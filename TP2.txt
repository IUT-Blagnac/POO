= Titre
:Author:  DUT/INFO/M1204
:doctitle: POO : TP2
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered:

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien

//-------------------- Warning si correction -----------
ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'entête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Je connais la syntaxe Java; j'ai relu mon cours de S1; j'ai effectué le TP précédent.
| {objtd}	| *Utiliser des objets en java*
| {duree}	| *2 séances* de 1,5h sur machine
| {depot}	| listings + compte-rendu de chaque question
|======================

[TIP]
====
- Lien sur le {sitecours}.
====



== Manipulations simples d'objets

Nous allons utiliser une classe +Compte+ qui permet de gérer des comptes simples comptabilisant des débits et des crédits successifs. 

[[Partie1]]
=== Classe +Compte+
Etudier en détail la documentation de la classe +Compte+. En particulier, étudiez si les méthodes sont des observateurs/accesseurs ou des modifieurs/transformateurs.

=== Premiers essais
.	Déclarer une variable +c+ "de type +Compte+" : une référence vers un +Compte+.
.	Appliquer la méthode +afficher()+ à +c+. Que se passe-t-il ?
.	Créer un +Compte+ avec un n° de compte, un propriétaire, un débit de 100 et un crédit de 300 à l'aide de +c+.
.	Appliquer la méthode +afficher()+ à c. Que se passe-t-il ?
.	Utiliser les méthodes disponibles sur la classe +Compte+ (modifieurs, observateurs (autres que +afficher()+).
.	Appliquer la méthode +afficher()+ à +c+. Que se passe-t-il ?
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(c);
----
+
Quel est le résultat ?
+
.	Affecter à +c+ la valeur +null+.
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(c);
----
+
Quel est le résultat ?
+
.	Appliquer la méthode +afficher()+ à +c+. Que se passe-t-il ? Expliquer.

ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Indications
=====
Blabla
=====
endif::prof[]


=== Références d'objets
.	Déclarer deux variables +n+ et +cDeux+ "de type +Compte+" : références vers un +Compte+.
.	Créer un +Compte+ à l'aide de +cUn+. Déposer 1000 € sur +cUn+. Afficher +cUn+ (méthode +afficher()+).
.	Affecter +cUn+ à +cDeux+ (+cDeux = cUn;+).
.	Afficher +cDeux+. Conclusion …
.	Déposer 2000€ sur +cUn+.
.	Afficher +cUn+ et +cDeux+. Conclusion …
.	Déposer 3000€ sur +cDeux+.
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +println()+ (cf <<Partie1,Partie 1>>). Conclusion …
.	Déposer 4000€ sur +cUn+ PUIS affecter la valeur +null+ à +cUn+.
.	Afficher +cDeux+. Conclusion …

=== Références d'objets (suite)

.	Déclarer deux variables +cUn+ et +cDeux+ "de type +Compte+" : références vers un +Compte+.
.	Créer un +Compte+ à l'aide de +cUn+ au nom de "Jean". Créer un autre +Compte+ à l'aide de +cDeux+ au nom de "Marie".
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +println()+ (cf <<Partie1,Partie 1>>). Conclusion …
.	Déposer 1€ sur +cUn+. Déposer 1000€ sur +cDeux+.
.	Afficher +cUn+ et +cDeux+. Conclusion …
.	Retirer  1€ de +cUn+. Retirer 1000€ de +cDeux+.
.	Afficher +cUn+ et +cDeux+. Conclusion …
.	Affecter +cUn+ à +cDeux+ (+cDeux = cUn;+).
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +println()+ (cf <<Partie1,Partie 1>>). Conclusion …
.	Déposer 1000€ sur +cUn+. Afficher +cUn+ et +cDeux+.
.	Déposer 2000€ sur l’objet +Compte+ ayant pour propriétaire "Marie" que vous avez créé au début de cette partie. Conclusion …		

== Devinette ... en objet

Pour cet exercice, on va rejouer au jeu de devinette, mais en utilisant cette fois des objets +Devinette+. Un objet +Devinette+, instance de la classe +Devinette+, est un objet qui :

-	lors de sa création, détermine des bornes au jeu et choisit la valeur à chercher,
-	dispose de méthodes permettant de jouer et d’interroger l’état de la partie (nombre de coups joués, résultat d’un coup, …).

Questions :

.	Etudier en détail la documentation de la classe +Devinette+. En particulier, étudiez si les méthodes sont des observateurs/accesseurs ou des modifieurs/transformateurs.
.	Imaginer comment construire un programme permettant de jouer à un jeu de devinette en utilisant un objet instance de la classe +Devinette+. Ecrire un programme +main+ permettant de jouer une partie de devinette.
.	Essayer, à la fin du jeu précédent, une fois la partie finie (gagnée), de jouer encore un coup (+soumettreCoup()+). Que se passe-t-il ? Consulter la documentation pour expliquer le résultat.
.	Modifier le programme pour jouer successivement 3 parties de devinette.

== Tableaux d'objets

.	Déclarer une variable +tabCompte+ de type tableau de +Compte+. L’utiliser pour créer un tableau de +Compte+ de 10 éléments (pas les comptes eux-mêmes).
.	Essayer la méthode +afficher()+ sur chaque élément du tableau +tabCompte+. Conclusion …
.	Afficher les références : contenue dans +tabCompte+, contenue dans chaque élément de +tabCompte+.
.	Créer un objet +Compte+ différent dans les éléments 0, 1, 2, 3 du tableau +tabCompte+ (noms des propriétaires différents).
.	Appliquez la méthode +afficher()+ aux  éléments 0 à 3 du tableau +tabCompte+. Conclusion …
.	Déposer 100€ sur le compte +tabCompte+[0], 1000€ sur +tabCompte+[1].
.	Appliquez la méthode +afficher()+ aux  éléments 0 à 3 du tableau +tabCompte+. Conclusion …
.	Créer un +Compte+ à l'aide d'une variable auxiliaire c.
.	Affecter c aux éléments 4 à 9 du tableau +tabCompte+.
.	Appliquez la méthode +afficher()+ aux 10 éléments du tableau +tabCompte+. Conclusion …
.	Déposer 10 000€ sur c.
.	Appliquez la méthode +afficher()+ aux 10 éléments du tableau +tabCompte+. Conclusion …
.	Combien d'objets ont été explicitement créés en mémoire entre les questions 1 et 11 (hors objets +String+) ? Donner leur type et le nombre de chaque type
.	Afficher les références : contenue dans +tabCompte+, contenue dans chaque élément de +tabCompte+.

== Chaînes de caractères ... des objets particuliers en java, non mutables.

Java propose deux classes de chaînes de caractères :

- +StringBuffer+ : la classe des chaînes de caractères modifiables (non étudiée ici).
- +String+ : la classe des chaînes de caractères la plus utilisée, mais ces chaînes ne sont pas modifiables (non mutables). 

Les +String+ sont très utilisées et très souvent partagées par plusieurs éléments de code (méthodes, objets, …). 
Leur aspect non modifiable permet de partager la « valeur » (chaîne), sans pouvoir la modifier, un peu à la manière d’une valeur de type de base. 

[NOTE]
====
À noter, en Java, écrire un littéral chaîne équivaut à une création implicite d’un objet +String+.
+"Bonjour"+ <==> +new String ("Bonjour")+
====

. Etudier l’aide de la classe +String+, en particulier le début de la description de la classe. 
. Chercher comment concaténer deux chaînes de caractères +String+ (2 façons). Tester l’égalité de deux chaînes de caractères (cf. opérateur « +==+ » et méthode +equals()+).
. Ecrire un programme permettant de : déclarer une variable +s1+ de type +String+, de l’initialiser à la valeur "Bonjour", d’afficher la chaîne référencée par +s1+ et sa longueur, d’ajouter à la fin de la chaîne " Madame", d’afficher à nouveau la chaîne et sa longueur, d’afficher la chaîne caractère par caractère, d’extraire et afficher une partie de la chaîne, de la passer en majuscules, en minuscules.
. Si vous avez le temps, essayer les autres méthodes.

== Avant de partir

. Enregistrer vos programmes sous *webetud*
. N'oubliez-pas de vous déconnecter

