include::lib/globals.asc[]
:tdnum: TD 1
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]


[TIP]
=====
Une grande partie des informations données ici s'appliquent au langage *Java*.
=====

//-------------------- Cartouche d'entête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| S1, notion de type, variables simples, tableaux.
| {objtd}	| *Comprendre l'implantation mémoire des données*.
| {duree}	| *1 séance* de 1,5h
| {depot}	| -
|======================

== Comprendre l'implantation mémoire des données

=== Principe de stockage des données en mémoire : les variables

Une variable permet d'associer

- un identificateur
- un type
- un emplacement mémoire qui contient une valeur

[TIP]
====
Quel que soit le langage, on parle pour une "variable" (sens dépendant du contexte) de :

- *r-value* : rigth value, expression qui a une valeur qui "n'a pas d'adresse", tout ce qui peut se mettre à droite d'une affectation (=). Ex : la valeur +10+.
- *l-value* : left value, expression qui permet d'accéder à un emplacement mémoire, tout ce qui peut se mettre à gauche d'une affectation (=). *Contre exemple* : la valeur +10+.
====

Une variable permet, en utilisant l'identificateur :

- d'accéder à la valeur : on s'intéresse à son aspect l-value
- de modifier le contenu de l'emplacement mémoire avec une valeur du type attendu : on s'intéressera à son aspect une r-value

=== Application : l-value ? r-valeur ?

Dans le code suivant, indiquer quand est ce que l'on s'intéresse à une r-value ou à une l-value

[source,java]
----
public static void main(String argv[]) {
	int i, j, k ;
	double d, e, f;
	i = 1; // <1>
	j = i + 10 ; // <2><3>
	k = j ; // 
	e = 10.5; 
	if (e < i) { // <4><5>
		f = j + k ;
		k = (int) (f - e) ;
	}	
}
----
<1> i ? 
<2> j ? 
<3> i ? 
<4> e ? 
<5> i ? 

ifdef::prof[]
[IMPORTANT]
.Solution
====

. l-value
. l-value
. r-value
. r-value
. r-value

====
endif::prof[]

=== Importance du type

Le type d'une variable définit :

* les valeurs que peut contenir la variable 
** +int+ : codage en complément à 2 sur 4 octets
** +double+ : codage en flottant 2 sur 8 octets
** +boolean+ : sur un octet, valeurs possibles +true+ et +false+
* les opérations possibles 
** +int+ : pass:[+,-,/,*,%, ++, --] entre +int+
** +double+ : pass:[+,-,/,*] entre +double+
** +boolean+ : &&, ||, ! entre +boolean+

=== Emplacement mémoire

Quel que soit le langage, au runtime, un programme dispose de mémoire allouée par le système d'exploitation :

* un segment de mémoire pour stocker le code (segment de code),
* un segment de mémoire pour stocker les données (segment de données) découpé en trois parties : i) un sous-segment pour la pile, ii) un sous-segment pour le tas, iii) un sous-segment permanent : données globales, données statiques des fonctions.

Un programme *Java* ne s'exécute pas directement sur le système d'exploitation, mais dans la Machine Virtuelle Java (JVM). De ce fait, le programmeur ne "dispose" que de deux segments de code :

* un sous-segment pour la pile – variables automatiques,
** il est utilisé lors des appels de sous-programmes pour stocker (fait partie de ce qu'on appelle contexte de la fonction cf. système) :
*** les paramètres de l'en-tête,
*** les variables locales (où quelles soient définies dan sle corps du sous-programme),
** sa gestion est *"automatique"* : allocation pour les variables lors du début de la fonction et libération à la fin de la fonction
** durée de vie des espaces alloués : le temps d'exécution du sous-programme.
* un sous-segment pour le tas – mémoire gérée par le programmeur,
** il est utilisé lors des appels à l'opérateur +new+ (tableaux et objets)
** sa gestion est assurée par le programmeur : allocation (+new+) et libération de la mémoire
*** Responsabilité au programmeur de faire les allocations *lorsque de besoin*
*** Responsabilité au programmeur de libérer la mémoire lorsque elle n'est plus nécessaire, cf. Langage C (mais c'est automatique en java vous verrez ...).
** durée de vie des espaces alloués : entre le +new+ et la libération, indépendamment du sous-programme qui fait le +new+.

Représentation graphique : pour schématiser la représentation mémoire, il faut imaginer deux espaces séparés, l'un de l'autre : la pile, le tas.

Exemple :

[source,java]
----
public void main (String argv[]) {
	int i, j;
}
----

[icon="{iconsdir}/stop.png"]
[IMPORTANT]
=====
**Image ici de Pile/Tas
=====


/////////////////////////////////////
["graphviz", "images/td1-ex1.png"]
---------------------------------------------------------------------
digraph G { rankdir=LR; Graphviz->AsciiDoc->HTML}
---------------------------------------------------------------------

== test

dfsfsdfs 

== tests 2



["graphviz", "images/td1_sample2.png"]
---------------------------------------------------------------------
digraph automata_0 {
  size ="8.5, 11";
  node [shape = circle];
  0 [ style = filled, color=lightgrey ];
  2 [ shape = doublecircle ];
  0 -> 2 [ label = "a " ];
  0 -> 1 [ label = "other " ];
  1 -> 2 [ label = "a " ];
  1 -> 1 [ label = "other " ];
  2 -> 2 [ label = "a " ];
  2 -> 1 [ label = "other " ];
  "Machine: a" [ shape = plaintext ];
}
---------------------------------------------------------------------

gfdgfdgfdgfsd


["graphviz", "images/td1_sample3.png", "dot"]
---------------------------------------------------------------------
digraph finite_state_machine {
  rankdir=LR;
  size="8,5"
  node [shape = doublecircle]; LR_0 LR_3 LR_4 LR_8;
  node [shape = circle];
  LR_0 -> LR_2 [ label = "SS(B)" ];
  LR_0 -> LR_1 [ label = "SS(S)" ];
  LR_1 -> LR_3 [ label = "S($end)" ];
  LR_2 -> LR_6 [ label = "SS(b)" ];
  LR_2 -> LR_5 [ label = "SS(a)" ];
  LR_2 -> LR_4 [ label = "S(A)" ];
  LR_5 -> LR_7 [ label = "S(b)" ];
  LR_5 -> LR_5 [ label = "S(a)" ];
  LR_6 -> LR_6 [ label = "S(b)" ];
  LR_6 -> LR_5 [ label = "S(a)" ];
  LR_7 -> LR_8 [ label = "S(b)" ];
  LR_7 -> LR_5 [ label = "S(a)" ];
  LR_8 -> LR_6 [ label = "S(b)" ];
  LR_8 -> LR_5 [ label = "S(a)" ];
}
---------------------------------------------------------------------
/////////////////////////////////////