:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 6
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD4 : Tableaux dynamiques, TP5 : implémentation classe AgenceBancaire, TD3 : Encapsulation/Création de classes,
| {objtd}	| Programmer la classe AgenceBancaire avec tableau dynamique.
| {duree}	| *2 séances* de 1,5h sur machine.
| {depot}	| Code source à déposer : Classe AgenceBancaire en 2 versions (1 est optionnelle) + réponses au questions éventuelles en commentaire en début de fichier.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* But du TP : Créer la classe AgenceBancaire en utilisant un tableau dynamique.

Les tableaux dynamiques ont été vus en TD -> cf. moodle.

Ce qui change : la suppression de compte puisqu'il faut réduire le tableau et recopier tous les comptes SAUF celui à supprimer.

====

[IMPORTANT]
====
Au départ :

Bien démarrer en expliquant le sujet + *l'installation des fichiers et autres en local*. Ce dernier point est important car c'est là qu'ils perdront du temps.

A priori : Ça compile dès le départ

ATTENTION : Ils doivent copier/coller leur code du TP précédent pour le modifier ...

En 3 heures ça devrait passer (2 fois 1.5h)

====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

Le but de ce TP est de construire la classe +AgenceBancaire+ mais de façon différente :

* Les Compte seront stockés dans un tableau "dynamique" de Compte  bâti sur les principes vus en TD pour stocker les informations en tableau "dynamique" dans la classe +Pile+.
* La documentation de la classe est connue : cf. documentation en ligne. *On ne changera pas l'interface de la classe*. 
* Parce que nous ne changeons pas l'interface de la classe, l'encapsulation va nous permettre d'utiliser le même programme client (menu pour un opérateur de l'agence bancaire) et le même programme de test {junit} .

[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp4-AG-Compte.png[]
=====

Il vous faudra réécrire une (grande) partie de la classe AgenceBancaire.

Pour les tests :

* le programme d'utilisation vous est fourni (menu pour un opérateur de l'agence bancaire).
* le programme de test {junit} est aussi fourni (le même que TP précédent).

== Mise en place de l'environnement

Récupérer l'archive fournie et la dézipper. Vous obtiendrez dans un seul et même répertoire de travail :

. Le fichier AgenceBancaire.java : *le fichier à modifier* durant le TP.
. Le fichier ClasseApplicationAgenceBancaire.java : pour les tests (menu pour un opérateur de l'agence bancaire). A ne pas toucher. 
. Le fichier TestAgenceBancaire.java : fichier {junit} de test des développements que vous ferez dans AgenceBancaire.java. A modifier ponctuellement pour les tests.
. Le répertoire tps qui contient le package tps (Compte, classes d'exceptions, ...) SAUF la classe AgenceBancaire bien sur ...
. Le fichier SciTE.properties : il paramètre Scite pour compiler/exécuter en utilisant la librairie {junit} contenue dans le fichier .jar. De plus l'option de formatage de code est disponible (indentation du code).
. Le fichier junit.jar : il contient la librairie {junit} pour les tests.

Ensuite seulement lancer Scite et ouvrir les 3 fichiers .java.

== Analyse de la solution à construire

=== Solution envisagée

L'idée est donc maintenant de modifier la classe AgenceBancaire afin de stocker les comptes dans un tableau dynamique à la place de l'ArrayList.

Dans cette version :

.	La taille du tableau sera toujours la même que le nombre de comptes dans l'AgenceBancaire (10 comptes => tableau de 10 éléments).
.	Chaque ajout de compte agrandira ce tableau de un élément.
.	Chaque retrait de compte rétrécira ce tableau de un élément.

On s'autorisera à utiliser en variable locale une ArrayList dans la méthode +public Compte[] getComptesDe(String pNomProprietaire)+.

=== Analyse de la mise en oeuvre

==== Modification des attributs

Dans la classe AgenceBancaire :

.	Enlevez la déclaration de l'ArrayList.
.	Déclarez à sa place un attribut (private) +tableauDesComptes+ de type tableau de Compte pour stocker les comptes.

Si besoin, vous ajouterez d'éventuels attributs.

[NOTE]
=====
On peut faire avec ce seul attribut +tableauDesComptes+.
====

==== Analyse du travail à faire

[icon="{iconsdir}/stop.png"]
[IMPORTANT]
====
*Une bonne démarche consiste à réfléchir 10'-15' avant de commencer.*
====

*Parcourez le code écrit en version précédente. Réfléchir à ce qui sera modifié, en particulier dans les méthodes :*

. D'une part :

..	+String getNomAgence()+
..	+String getLocAgence()+
..   +Compte getCompte(String pNumCompte)+

.	D'autre part :

..	+int getNbComptes()+
..	+String toString()+
..	+void afficher()+
..	+Compte[] getComptesDe(String pNomProprietaire)+ (rappel : on s’autorisera à utiliser une ArrayList dans cette méthode)
..	+int trouveCompte(String pNC)+ (private).

. Enfin :

..	+AgenceBancaire(String pNomAgence, String pLocAgence)+
..	+void addCompte(Compte pCompteAAjouter)+
..	+void removeCompte(String pNumCompte)+

== Implémentation de la solution

=== Codage : TODO

A vous de jouer : modifier la classe pour réaliser l'implémentation demandée.

[IMPORTANT]
.Rappel
=====
On commence TOUJOURS par le constructeur car c'est la première chose réalisée sur un objet nouvellement créé : début de la vie d'un objet.

Le rôle du constructeur est TOUJOURS d'initialiser TOUS les attributs de l'objet.
====

/////////////
Pour la suppression d'un comptes, il peut être utile de connaître le rang de celui-ci. Malheureusement, la méthode existante +private Compte trouveCompte(String pNC)+ renvoie le Compte, pas sa position.

On pourra donc ajouter une méthode nouvelle pour faciliter la programmation :

[source,java]
----
/**
 * Méthode privée de recherche du rang d'un compte.
 * Cherche un compte dans le tableau de comptes ayant pour numéro de compte pNC.
 * Renvoie -1 si aucun compte n'est trouvé.
 *
 * @param      pNC  numéro du compte recherché
 * @return     l'indice de l'objet compte trouvé ou -1 si non trouvé. 
 */
private int trouveRangDeCompte(String pNC) {
	// Code à écrire
}
----
/////////////
	
[NOTE]
=====
On peut ajouter autant de méthode privée que désiré : *cela ne change pas l'interface de la classe*.

Vous pouvez ajouter d'autres méthodes private si vous le souhaitez (pour recopier une partie de tableau dans un autre, pour agrandir un tableau et le recopier, autre traitement ...).
====

=== Tests de la classe

Testez votre classe :

.	L'application menu pour un opérateur de l'agence bancaire doit fonctionner avec votre classe.
+
[NOTE]
=====
C'est l'application la plus simple à utiliser pour les  premiers tests : ajouts, puis recherches, puis suppressions, puis recherches à nouveau ...
====
+
.	Elle doit passer avec succès (complet) les tests {junit}.
+
[NOTE]
=====
On réalise les tests "d'un coup" car :

* 	+getCompte()+ ne peut être testée sans +addCompte()+ (seul un cas particulier peut être testé).
*	De même +addCompte()+ ne peut être testée sans +getCompte()+ (seul un cas particulier peut être testé).
*	Enfin +removeCompte()+ ne peut être testée sans les 2 précédentes.
====

== Deuxième implémentation de solution (optionnelle mais très intéressante pour préparer S3/S4)

=== Solution envisagée

On souhaite maintenant faire une nouvelle version de la classe AgenceBancaire, toujours basée sur des tableaux dynamiques. Cette fois on stockera les comptes dans un tableau "avec de la marge". L'idée est de :

. pré-réserver au départ un tableau de taille +tailleMin+.
. lorsque nécessaire : agrandir le tableau en doublant sa capacité.
. lorsque nécessaire : ne réduire le tableau que lorsque il y a la moitié des éléments non utilisés et diviser alors sa taille par deux (sauf si elle est égale à +tailleMin+).

Dans cette version :

. +tailleMin+ est fixé à 3 pour les tests, on pourra le modifier plus tard si besoin (1000 par exemple).
. Le constructeur créera un tableau de +tailleMin+ éléments.
. Lors de l'ajout de compte, si le tableau est "plein", on doublera sa capacité (sa taille effective).
. Lors du retrait de compte, si le tableau contient la moitié des éléments non utilisés, on le réduira en divisant sa taille par deux, *sauf* si la taille est déjà de +tailleMin+ éléments.
. Le tableau de comptes +tableauDesComptes+ aura tout le temps au minimum +tailleMin+ éléments.
. Il faudra donc gérer dans cette version :
.. d'une part le nombre d'éléments réellement dans le tableau (le nombre de comptes stockés dans l'AgenceBancaire),
.. d'autre part la taille effective du tableau (3, 6, 12, 24, ...).

=== Analyse de la mise en oeuvre

==== Attributs nécessaires

Réfléchir aux attributs à ajouter au tableau de Compte pour cette solution (2 devraient suffire). Les déclarer (toujours en private !).

[NOTE]
=====
Pour déclarer tailleMin, utiliser un attribut en utilisant la syntaxe suivante :

+private final int tailleMin = 3;+

qui crée un attribut, privé, de type int, d'identificateur +tailleMin+

mais déclaré +final+ donc non modifiable. C'est une constante. Par la suite, pour passer à 1 élément ou à 100, modifier cette ligne et recompiler sera suffisant.
=====

==== Analyse de la solution à mettre en oeuvre

Une bonne démarche consiste à réfléchir 10'-15' avant de commencer.

Parcourez le code écrit en version précédente. Réfléchir à ce qui sera modifié.

=== Codage : TODO

A vous de jouer : modifier la classe pour réaliser l'implémentation demandée.

=== Tests

Testez votre classe :

.	L'application menu pour un opérateur de l'agence bancaire doit fonctionner avec votre classe.
.	Elle doit passer avec succès (complet) les tests {junit}.


ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Agence Bancaire Premère implémentation
======
[source,java]
----
package tps.banque;

import java.util.ArrayList;

import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;

// V TAB DYN +1 -1

/************************************************************
 * La classe AgenceBancaire permet de gérer une agence bancaire comme un ensemble de Comptes.<BR>
 * Une AgenceBancaire a un nom, une localisation (ville) et gère un ensemble de Comptes.<BR>
 * Exemple : agence "Agence Caisse Epargne" à "Pibrac".<BR>
 * Chaque Compte de l'AgenceBancaire a un numéro unique (vérification faite lors de l'ajout d'un Compte).<BR>
 * 
 * @author André Péninou.
 * @version 7.02
 *****************************/

public class AgenceBancaireX {
	// Attributs
	private String nom, loc;
	private Compte tableauDesComptes[]; // Tableau des comptes

	/**
	 * Constructeur paramétré.<BR>
	 * Permet de créer une AgenceBancaire en donnant son nom et sa ville.<BR>
	 * L'AgenceBancaire est initialisée avec 0 comptes.<BR>
	 * 
	 * @param pNomAgence
	 *            Le nom de l'AgenceBancaire.
	 * @param pLocAgence
	 *            La ville de localisation de l'AgenceBancaire.
	 */

	public AgenceBancaire(String pNomAgence, String pLocAgence) {
		this.nom = pNomAgence;
		this.loc = pLocAgence;
		this.tableauDesComptes = new Compte[0];
	}

	/**
	 * Permet de connaître le nom de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nom de l'AgenceBancaire.
	 */

	public String getNomAgence() {
		return this.nom;
	}

	/**
	 * Permet de connaître la localisation de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return La ville de localisation de l'AgenceBancaire.
	 */

	public String getLocAgence() {
		return this.loc;
	}

	/**
	 * Permet de connaître le nombre de Comptes existant dans l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nombre de comptes de l'AgenceBancaire.
	 */

	public int getNbComptes() {
		return this.tableauDesComptes.length;
	}

	/**
	 * Permet de retrouver un Compte de l'AgenceBancaire à partir de son numéro de
	 * compte (unique).<BR>
	 * Renvoie null si le Compte de numéro de compte pNumCompte n'est pas
	 * trouvé.<BR>
	 * <BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte recherché.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Le Compte de numéro pNumCompte, null si le compte n'est pas
	 *         trouvé.
	 */

	public Compte getCompte(String pNumCompte) {
		// A titre d'exemple : utilise une méthode privée définie en fin de
		// classe
		int rang;
		rang = this.trouveRangDeCompte(pNumCompte);
		if (rang != -1) { return this.tableauDesComptes[rang]; }
		return null;
	}

	/**
	 * Permet de retrouver les Comptes de l'AgenceBancaire correspondant à un nom de
	 * propriétaire donné.<BR>
	 * Renvoie un tableau du nombre de Comptes ayant pour propriétaire
	 * pNomProprietaire (et contenant les dits Comptes...).<BR>
	 * Si aucun Compte n'est trouvé, renvoie un tableau de longueur 0.<BR>
	 * <BR>
	 * 
	 * @param pNomProprietaire
	 *            Le nom du propriétaire de Compte dont on veut les Comptes.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Un tableau des Comptes ayant pour propriétaire pNomProprietaire,
	 *         un tableau de longueur 0 si aucun compte n'est trouvé.
	 */

	public Compte[] getComptesDe(String pNomProprietaire) {
		/*
		 * Méthode : créer une ArrayList de Compte temporaire : alTemp. 
		 * Parcourir this.alCptes.
		 * 	Si un compe appartient au proprietaire 
		 * 		=> le garder dans alTemp.
		 * Si alTemp non vide : recopier tous les comptes de alTemp dans
		 * un nouveau tableau qui sera renvoyé 
		 * Sinon créer un tableau de 0 éléments.
		 */

		Compte t[], cTemp;
		ArrayList<Compte> alTemp; // ArrayList de Compte temporaire
		int nbC, nbCTemp, i;

		t = null;

		// Recherche des comptes de pNomProprietaire dans l'AgenceBancaire
		alTemp = new ArrayList<Compte>();
		nbC = this.tableauDesComptes.length;
		for (i = 0; i < nbC; i++) {
			cTemp = this.tableauDesComptes[i];
			if (cTemp.getProprietaire().equals(pNomProprietaire)) {
				alTemp.add(cTemp);
			}
		}

		// Si on a trouvé des comptes ...
		if (alTemp.size() != 0) {
			// ... on crée un tableau et on les recopie
			nbCTemp = alTemp.size();
			t = new Compte[nbCTemp];
			for (i = 0; i < nbCTemp; i++) {
				t[i] = alTemp.get(i);
			}
			/*
			 * Ou bien directement, sans les lignes ci-dessus :
			 *		t = alTemp.toArray(new Compte[0]); 
			 * cf. doc ArrayList / T[] toArray(T[])
			 */
		} else {
			// ... pas de compte dans un tableau vide
			t = new Compte[0];
		}
		return t;
	}

	/**
	 * Permet d'afficher une AgenceBancaire -<B> SPECIAL TP.</B><BR>
	 * <BR>
	 * Affiche le nom de l'AgenceBancaire, sa localisation, le nombre de Comptes,
	 * chaque Compte avec son solde.<BR>
	 * <BR>
	 * <B>ATTENTION : Méthode spéciale pour les TP.</B><BR>
	 * <BR>
	 */

	public void afficher() {
		int i, nbC;
		Compte cTemp;

		System.out.println();
		System.out.println("Nom : " + this.nom + " (" + this.loc + ")");
		System.out.println("" + this.tableauDesComptes.length + " Comptes :");
		nbC = this.tableauDesComptes.length;
		for (i = 0; i < nbC; i++) {
			cTemp = this.tableauDesComptes[i];
			cTemp.afficher();
			System.out.println("   Solde : " + cTemp.soldeCompte());
		}
		System.out.println();
	}

	/**
	 * Permet d'obtenir la représentation String d'une AgenceBancaire.<BR>
	 * <BR>
	 * Donne le nom de l'AgenceBancaire, la localisation, le nombre de Comptes.<BR>
	 * <BR>
	 */

	public String toString() {
		return "Nom Agence : " + this.nom + " (" + this.loc + ") : "+this.tableauDesComptes.length+" cptes";
	}
	
	/**
	 * Permet d'ajouter un Compte à l'AgenceBancaire.<BR>
	 * Le Compte pCompteAAjouter est ajouté à l'AgenceBancaire s'il n'existe pas déjà un Compte
	 * ayant le même numéro de compte que pCompteAAjouter 
	 * (identique en numéro de compte à pCompteAAjouter.getNumCompte()).<BR>
	 * Si on appelle la méthode avec null en paramètre, la méthode lève une exception.<BR>
	 * 
	 * @param pCompteAAjouter
	 *            Le Compte à ajouter à l'AgenceBancaire.
	 * @throws ABCompteNullException  lorsque pCompteAAjouter == null	
	 * @throws ABCompteDejaExistantException  lorsque un compte de numéro pCompteAAjouter.getNumCompte() existe déjà dans l'AgenceBancaire.
	 * @see AgenceBancaire#removeCompte(String)
	 */

	public void addCompte(Compte pCompteAAjouter) throws ABCompteNullException, ABCompteDejaExistantException {
		int taille, i;
		Compte t[];
		int rang;
		
		// Si null => refusé
		if (pCompteAAjouter == null) {
			throw new ABCompteNullException("Erreur ajout Compte 'null' dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// On cherche un Compte de même numéro
		rang = this.trouveRangDeCompte(pCompteAAjouter.getNumCompte());

		// Si trouvé
		if (rang != -1) {
			throw new ABCompteDejaExistantException(
					"Erreur ajout Compte déja existant ("
					+ pCompteAAjouter.getNumCompte() + ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}
		// ... on ajoute le Compte à la fin du tableau que l'on "agrandit"
		taille = this.tableauDesComptes.length;
		t = new Compte[taille + 1];
		for (i=0; i<taille; i++) {
			t[i] = this.tableauDesComptes[i];
		}
		t[taille] = pCompteAAjouter;
		this.tableauDesComptes = t;
	}

	/**
	 * Permet de supprimer un Compte de l'AgenceBancaire, à partir de son numéro.<BR>
	 * Le Compte (unique) de numéro pNumCompte est retiré de l'AgenceBancaire s'il est
	 * trouvé.<BR>
	 * Une exception est levée si le compte n'est pas trouvé.<BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte à supprimer de l'AgenceBancaire.
	 * @throws ABCompteInexistantException	Lorsque aucun compte de numéro pNumCompte ne peut être trouvé.
	 * @see AgenceBancaire#addCompte(Compte)
	 */
	public void removeCompte(String pNumCompte) throws ABCompteInexistantException{
		int rangCompte ;
		int taille, i, j;
		Compte t[];
		
		// On cherche un Compte de même numéro
		rangCompte = this.trouveRangDeCompte(pNumCompte);

		// Si pas trouvé ...
		if (rangCompte == -1) {
			throw new ABCompteInexistantException(
					"Erreur suppression Compte inexistant ("
					+ pNumCompte+ ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}
		// ... on enlève ce Compte dans un tableau "rétréci"
		taille = this.tableauDesComptes.length - 1;
		t = new Compte[taille];
		j=0;
		for (i=0; i<rangCompte; i++) {
			t[j] = this.tableauDesComptes[i];
			j++;
		}
		for (i=rangCompte+1; i<taille+1; i++) {
			t[j] = this.tableauDesComptes[i];
			j++;
		}
		this.tableauDesComptes = t;
	}

	/**
	 * Méthode privée de recherche du rang d'un compte.
	 * Cherche un compte dans le tableau de comptes ayant pour numéro de compte pNC.
	 * Renvoie -1 si aucun compte n'est trouvé.
	 *
	 * @param      pNC  numéro du compte recherché
	 * @return     l'indice de l'objet compte trouvé ou -1 si non trouvé. 
	 */
	private int trouveRangDeCompte(String pNC) {
		Compte cTemp;
		int i, nbC, rang;

		// On parcours le tableau des comptes de l'AgenceBancaire
		nbC = this.tableauDesComptes.length;
		rang = -1;
		for (i = 0; i < nbC && rang == -1; i++) {
			cTemp = this.tableauDesComptes[i];
			// Si un Compte a le même numéro que pNC
			if (cTemp.getNumCompte().equals(pNC)) {
				// ... on le garde
				rang = i;
			}
		}
		return rang;
	}
	
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Agence Bancaire Deuxième implémentation
======
[source,java]
----
package tps.banque;

import java.util.ArrayList;

import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;

// V TAB DYN :
// capacité départ == 3
// add => doubler capacité
// remove => diviser par deux la capacité sauf à 3.

/************************************************************
 * La classe AgenceBancaire permet de gérer une agence bancaire comme un ensemble de Comptes.<BR>
 * Une AgenceBancaire a un nom, une localisation (ville) et gère un ensemble de Comptes.<BR>
 * Exemple : agence "Agence Caisse Epargne" à "Pibrac".<BR>
 * Chaque Compte de l'AgenceBancaire a un numéro unique (vérification faite lors de l'ajout d'un Compte).<BR>
 * 
 * @author André Péninou.
 * @version 7.02
 *****************************/

public class AgenceBancaireF {
	// Attributs
	private String nom, loc;
	private Compte tableauDesComptes[]; // Tableau des comptes
	private final int tailleMin = 3; // Taille minimum
	private int tailleCourante, nbElements;

	/**
	 * Constructeur paramétré.<BR>
	 * Permet de créer une AgenceBancaire en donnant son nom et sa ville.<BR>
	 * L'AgenceBancaire est initialisée avec 0 comptes.<BR>
	 * 
	 * @param pNomAgence
	 *            Le nom de l'AgenceBancaire.
	 * @param pLocAgence
	 *            La ville de localisation de l'AgenceBancaire.
	 */

	public AgenceBancaire(String pNomAgence, String pLocAgence) {
		this.nom = pNomAgence;
		this.loc = pLocAgence;
		this.tableauDesComptes = new Compte[this.tailleMin];
		this.tailleCourante = this.tailleMin;
		this.nbElements = 0;
	}

	/**
	 * Permet de connaître le nom de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nom de l'AgenceBancaire.
	 */

	public String getNomAgence() {
		return this.nom;
	}

	/**
	 * Permet de connaître la localisation de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return La ville de localisation de l'AgenceBancaire.
	 */

	public String getLocAgence() {
		return this.loc;
	}

	/**
	 * Permet de connaître le nombre de Comptes existant dans l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nombre de comptes de l'AgenceBancaire.
	 */

	public int getNbComptes() {
		return this.nbElements;
	}

	/**
	 * Permet de retrouver un Compte de l'AgenceBancaire à partir de son numéro de
	 * compte (unique).<BR>
	 * Renvoie null si le Compte de numéro de compte pNumCompte n'est pas
	 * trouvé.<BR>
	 * <BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte recherché.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Le Compte de numéro pNumCompte, null si le compte n'est pas
	 *         trouvé.
	 */

	public Compte getCompte(String pNumCompte) {
		// A titre d'exemple : utilise une méthode privée définie en fin de
		// classe
		int rang;
		rang = this.trouveRangDeCompte(pNumCompte);
		if (rang != -1) { return this.tableauDesComptes[rang]; }
		return null;
	}

	/**
	 * Permet de retrouver les Comptes de l'AgenceBancaire correspondant à un nom de
	 * propriétaire donné.<BR>
	 * Renvoie un tableau du nombre de Comptes ayant pour propriétaire
	 * pNomProprietaire (et contenant les dits Comptes...).<BR>
	 * Si aucun Compte n'est trouvé, renvoie un tableau de longueur 0.<BR>
	 * <BR>
	 * 
	 * @param pNomProprietaire
	 *            Le nom du propriétaire de Compte dont on veut les Comptes.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Un tableau des Comptes ayant pour propriétaire pNomProprietaire,
	 *         un tableau de longueur 0 si aucun compte n'est trouvé.
	 */

	public Compte[] getComptesDe(String pNomProprietaire) {
		/*
		 * Méthode : créer une ArrayList de Compte temporaire : alTemp. 
		 * Parcourir this.alCptes.
		 * 	Si un compe appartient au proprietaire 
		 * 		=> le garder dans alTemp.
		 * Si alTemp non vide : recopier tous les comptes de alTemp dans
		 * un nouveau tableau qui sera renvoyé 
		 * Sinon créer un tableau de 0 éléments.
		 */

		Compte t[], cTemp;
		ArrayList<Compte> alTemp; // ArrayList de Compte temporaire
		int nbC, nbCTemp, i;

		t = null;

		// Recherche des comptes de pNomProprietaire dans l'AgenceBancaire
		alTemp = new ArrayList<Compte>();
		nbC = this.nbElements;
		for (i = 0; i < nbC; i++) {
			cTemp = this.tableauDesComptes[i];
			if (cTemp.getProprietaire().equals(pNomProprietaire)) {
				alTemp.add(cTemp);
			}
		}

		// Si on a trouvé des comptes ...
		if (alTemp.size() != 0) {
			// ... on crée un tableau et on les recopie
			nbCTemp = alTemp.size();
			t = new Compte[nbCTemp];
			for (i = 0; i < nbCTemp; i++) {
				t[i] = alTemp.get(i);
			}
			/*
			 * Ou bien directement, sans les lignes ci-dessus :
			 *		t = alTemp.toArray(new Compte[0]); 
			 * cf. doc ArrayList / T[] toArray(T[])
			 */
		} else {
			// ... pas de compte dans un tableau vide
			t = new Compte[0];
		}
		return t;
	}

	/**
	 * Permet d'afficher une AgenceBancaire -<B> SPECIAL TP.</B><BR>
	 * <BR>
	 * Affiche le nom de l'AgenceBancaire, sa localisation, le nombre de Comptes,
	 * chaque Compte avec son solde.<BR>
	 * <BR>
	 * <B>ATTENTION : Méthode spéciale pour les TP.</B><BR>
	 * <BR>
	 */

	public void afficher() {
		int i, nbC;
		Compte cTemp;

		System.out.println();
		System.out.println("Nom : " + this.nom + " (" + this.loc + ")");
		System.out.println("" + this.nbElements + " Comptes :");
		nbC = this.nbElements ;
		for (i = 0; i < nbC; i++) {
			cTemp = this.tableauDesComptes[i];
			cTemp.afficher();
			System.out.println("   Solde : " + cTemp.soldeCompte());
		}
		System.out.println();
	}

	/**
	 * Permet d'obtenir la représentation String d'une AgenceBancaire.<BR>
	 * <BR>
	 * Donne le nom de l'AgenceBancaire, la localisation, le nombre de Comptes.<BR>
	 * <BR>
	 */

	public String toString() {
		return "Nom Agence : " + this.nom + " (" + this.loc + ") : "+this.nbElements+" cptes";
	}
	
	/**
	 * Permet d'ajouter un Compte à l'AgenceBancaire.<BR>
	 * Le Compte pCompteAAjouter est ajouté à l'AgenceBancaire s'il n'existe pas déjà un Compte
	 * ayant le même numéro de compte que pCompteAAjouter 
	 * (identique en numéro de compte à pCompteAAjouter.getNumCompte()).<BR>
	 * Si on appelle la méthode avec null en paramètre, la méthode lève une exception.<BR>
	 * 
	 * @param pCompteAAjouter
	 *            Le Compte à ajouter à l'AgenceBancaire.
	 * @throws ABCompteNullException  lorsque pCompteAAjouter == null	
	 * @throws ABCompteDejaExistantException  lorsque un compte de numéro pCompteAAjouter.getNumCompte() existe déjà dans l'AgenceBancaire.
	 * @see AgenceBancaire#removeCompte(String)
	 */

	public void addCompte(Compte pCompteAAjouter) throws ABCompteNullException, ABCompteDejaExistantException {
		int i;
		Compte t[];
		Compte c;
		int rang;
		
		// Si null => refusé
		if (pCompteAAjouter == null) {
			throw new ABCompteNullException("Erreur ajout Compte 'null' dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// On cherche un Compte de même numéro
		rang = this.trouveRangDeCompte(pCompteAAjouter.getNumCompte());

		// Si trouvé
		if (rang != -1) {
			throw new ABCompteDejaExistantException(
					"Erreur ajout Compte déja existant ("
					+ pCompteAAjouter.getNumCompte() + ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}
		// ... on ajoute le Compte à la fin du tableau 
		// que l'on "agrandit" si besoin
		// Agrandir ?
		if (this.nbElements == this.tailleCourante)
		{	
			this.tailleCourante = this.tailleCourante * 2;
			t = new Compte[this.tailleCourante];
			for (i=0; i<this.nbElements; i++) {
				t[i] = this.tableauDesComptes[i];
			}
			this.tableauDesComptes = t;
		}
		// ajout du Compte
		this.tableauDesComptes[this.nbElements] = pCompteAAjouter;
		this.nbElements++;
	}

	/**
	 * Permet de supprimer un Compte de l'AgenceBancaire, à partir de son numéro.<BR>
	 * Le Compte (unique) de numéro pNumCompte est retiré de l'AgenceBancaire s'il est
	 * trouvé.<BR>
	 * Une exception est levée si le compte n'est pas trouvé.<BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte à supprimer de l'AgenceBancaire.
	 * @throws ABCompteInexistantException	Lorsque aucun compte de numéro pNumCompte ne peut être trouvé.
	 * @see AgenceBancaire#addCompte(Compte)
	 */
	public void removeCompte(String pNumCompte) throws ABCompteInexistantException{
		int rangCompte ;
		int i;
		Compte t[];
		
		// On cherche un Compte de même numéro
		rangCompte = this.trouveRangDeCompte(pNumCompte);

		// Si pas trouvé ...
		if (rangCompte == -1) {
			throw new ABCompteInexistantException(
					"Erreur suppression Compte inexistant ("
					+ pNumCompte+ ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}
		// ... on, enlève le Compte par décalages
		for (i=rangCompte; i<this.nbElements -1 ; i++) {
			this.tableauDesComptes[i] = this.tableauDesComptes[i+1];
		}
		this.nbElements--;
		// Faut il diminuer la taille ?
		if (this.nbElements*2 == this.tailleCourante && this.tailleCourante > this.tailleMin)
		{
			this.tailleCourante = this.tailleCourante/2;
			t = new Compte[this.tailleCourante];
			for (i=0; i<this.nbElements; i++) {
				t[i] = this.tableauDesComptes[i];
			}
			this.tableauDesComptes = t;
		}
	}

	/**
	 * Méthode privée de recherche du rang d'un compte.
	 * Cherche un compte dans le tableau de comptes ayant pour numéro de compte pNC.
	 * Renvoie -1 si aucun compte n'est trouvé.
	 *
	 * @param      pNC  numéro du compte recherché
	 * @return     l'indice de l'objet compte trouvé ou -1 si non trouvé. 
	 */
	private int trouveRangDeCompte(String pNC) {
		Compte cTemp;
		int i, nbC, rang;

		// On parcours le tableau des comptes de l'AgenceBancaire
		nbC = this.nbElements;
		rang = -1;
		for (i = 0; i < nbC && rang == -1; i++) {
			cTemp = this.tableauDesComptes[i];
			// Si un Compte a le même numéro que pNC
			if (cTemp.getNumCompte().equals(pNC)) {
				// ... on le garde
				rang = i;
			}
		}
		return rang;
	}
}
----
======

endif::prof[]

endif::todoprof[]
