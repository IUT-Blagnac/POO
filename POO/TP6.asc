:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 6
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD5 : Listes chainées, TP5 : implémentation classe AgenceBancaire,
| {objtd}	| Programmer la classe AgenceBancaire avec une liste chaînée.
| {duree}	| *2 séance* de 1,5h sur machine.
| {depot}	| Code source à déposer : Classe AgenceBancaire + réponses au questions éventuelles en commentaire en début de fichier.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* But du TP : Créer la classe AgenceBancaire en utilisant une liste chaînée.

Le principe de liste chaînée a été vu en TD -> cf. moodle.

Là c'est un peu plus compliqué... Les algos n'ont pas été vus "tels quels".


====

[IMPORTANT]
====
Au départ :

Bien démarrer en expliquant le sujet + *l'installation des fichiers et autres en local*. Ce dernier point est important car c'est là qu'ils perdront du temps.

A priori : Ça compile dès le départ

ATTENTION : Ils peuvent éventuellement copier/coller leur code du TP précédent pour le modifier ... La classe livrée est une coquille vide.

En 3 heures ça devrait passer (2 fois 1.5h)

====

[IMPORTANT]
====
Les Tests :

Leur dire (imposer ?) de faire, dans l'ordre :

.	Tests avec l'application menu : créer un compte, un 2°, un get de Compte (pour déposer par exemple), puis une suppression.
+
En cas d'erreur, cela permet de savoir de suite quelle fonction plante vraiment
. 	Puis les tests JUnot plus complets.
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

Le but de ce TP est de construire la classe +AgenceBancaire+ mais de façon différente :

* Les Compte seront stockés dans une liste chaînée dont chaque Cellule contiendra un Compte. Cette liste chaînée sera bâtie selon les principes vus en TD pour stocker les données sous forme de liste chaînée.
* La documentation de la classe est connue : cf. documentation en ligne. *On ne changera pas l'interface de la classe*. 
* Parce que nous ne changeons pas l'interface de la classe, l'encapsulation va nous permettre d'utiliser le même programme client (menu pour un opérateur de l'agence bancaire) et, au final, le même programme de test {junit}.

[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp6-AG-Compte.png[]
=====

Il vous faudra réécrire une partie de la classe.

Pour les tests :

* le programme d'utilisation vous est fourni (menu pour un opérateur de l'agence bancaire).
* le programme de test {junit} est aussi fourni.

== Mise en place de l'environnement

Vous devrez mettre dans un seul et même répertoire de travail :

. Le fichier AgenceBancaire.java : *le fichier à modifier* durant le TP.
. Le fichier *Cellule.java : définit la classe Cellule nécessaire pour les listes chaînées*.
. Le fichier ClasseApplicationAgenceBancaire.java : pour les tests (menu pour un opérateur de l'agence bancaire). A ne pas toucher. 
. Le fichier TestAgenceBancaire.java : fichier {junit} de test des développements que vous ferez dans AgenceBancaire.java. A modifier ponctuellement pour les tests.
. Dé-zipper le fichier packagesTps5.zip fourni : il contient les packages de travail pour ce tp SAUF la classe AgenceBancaire bien sur ...
. Récupérer les fichiers :

*	SciTE.properties : il paramètre Scite pour compiler/exécuter en utilisant la librairie {junit} contenue dans le fichier .jar.
*	junit.jar : il contient la librairie {junit} pour les tests.

.	Ensuite seulement lancer Scite et ouvrir les fichiers .java.

== Implémentation de la solution

=== Solution envisagée

L'idée est donc maintenant de modifier la classe AgenceBancaire afin de stocker les comptes dans une liste chaînée. Vous disposez de la classe *Cellule* permettant de construire une liste chaînée sur les principes vus en TD.

On s'autorisera à utiliser une ArrayList dans la méthode +public Compte[] getComptesDe(String pNomProprietaire)+

=== Préparation de la mise en oeuvre

==== Modification des attributs

Dans la classe AgenceBancaire :

.	Enlevez la déclaration existante pour le stockage des Compte (ArrayList ou tableau de Compte).
.	Déclarez à sa place un attribut (private) +debutDeListe+ de type +Cellule+ pour stocker la référence de la première Cellule de la liste chaînée.
.	Si besoin, vous ajouterez d'éventuels attributs.

==== Analyse de la solution à mettre en oeuvre

Une bonne démarche consiste à réfléchir 10'-15' avant de commencer.

La méthode +afficher()+ est déjà écrite afin de vous aider. La classe ne compile pas car il faut déclarer les attributs nécessaires.

Parcourez le code (quasi vide) de la classe et réfléchir à ce qui sera à programmer, en particulier dans les méthodes :

. D'une part :

..	+String getNomAgence()+
..	+String getLocAgence()+
.. 	+Compte getCompte(String pNumCompte)+

.	D'autre part :

..	+String toString()+
..	+int getNbComptes()+ : *veiller ici* à limiter le nombre de parcours de la liste chaînée. Calculer ce nombre de compte à chaque appel en reparcourant la liste est une *mauvaise solution*. Trouvez mieux ...
..	+void afficher()+
..	+Compte[] getComptesDe(String pNomProprietaire)+ (rappel : on s’autorisera à utiliser une ArrayList dans cette méthode)
..	+Compte trouveCompte(String pNC)+ (private).

. Enfin :

..	+AgenceBancaire(String pNomAgence, String pLocAgence)+ :
...	Il faudra initialiser l'attribut +debutDeListe+. Il y a 0 Compte, donc pas de Cellule nécessaire.
..	+void addCompte(Compte pCompteAAjouter)+
... Deux stratégies possibles : ajout en début de liste chaînée, ajout en fin de liste chaînée.
... Choisissez la solution la plus simple et la plus économe en temps de calcul.
..	+void removeCompte(String pNumCompte)+
... On évitera de rechercher le Compte PUIS de le supprimer car cela serait couteux en temps de calcul (2 parcours de la liste).
... Il faudra traiter les différents cas possibles de suppression dans la liste.
....	En tête de liste (première Cellule).
....	En milieu fin de liste.
....	En fin de liste.

=== Codage : TODO

A vous de jouer : modifier la classe pour réaliser l'implémentation demandée.

[IMPORTANT]
.Rappel
=====
On commence TOUJOURS par le constructeur car c'est la première chose réalisée sur un objet nouvellement créé : début de la vie d'un objet.

Le rôle du constructeur est TOUJOURS d'initialiser TOUS les attributs de l'objet.
====

=== Tests de la classe

Testez votre classe :

.	L'application menu pour un opérateur de l'agence bancaire doit fonctionner avec votre classe.
+
[NOTE]
=====
C'est l'application la plus simple à utiliser pour les  premiers tests : ajouts, puis recherches, puis suppressions, puis recherches à nouveau ...
====
+
.	Elle doit passer avec succès (complet) les tests {junit}.
+
[NOTE]
=====
On réalise les tests "d'un coup" car :

* 	+getCompte()+ ne peut être testée sans +addCompte()+ (seul un cas particulier peut être testé).
*	De même +addCompte()+ ne peut être testée sans +getCompte()+ (seul un cas particulier peut être testé).
*	Enfin +removeCompte()+ ne peut être testée sans les 2 précédentes.
====

== Amélioration de la solution

=== Besoin du client 

Le client (directeur d'une agence) nous fait la remarque suivante : comme les clients connaissent en général leur numéro de compte, les options du menu les plus utilisées sont celles qui permettent de faire des opérations sur un Compte à partir de son numéro : 

*	s - Supprimer un compte de l'agence (par son numéro)
*	v - Voir un compte (par son numéro)
*	d - Déposer de l'argent sur un compte
*	r - Retirer de l'argent sur un compte

=== Amélioration envisagée 

En remarquant que tous les numéros de Compte sont différents dans un objet AgenceBancaire par construction même de la classe, on peut les stocker dans l'ordre des numéros pour accélérer ainsi les recherches des numéros inexistants (fautes de frappe) et les suppressions.

NB : dans une vraie agence bancaire, les numéros de comptes suivent une logique de numérotation. L'approche est donc intéressante même si elle n'est pas parfaite.

=== Codage : TODO

Après un moment de réflexion : mettez en oeuvre la solution ci-dessus :

.	Modifier TOUTES les méthodes impliquées. Les modifications porteront sur :

..	La détection plus rapide des cas où un numéro de compte est absent (on ne sera pas toujours obligés de parcourir toute la liste).
..	Ceci porte sur la recherche ET la suppression.

.	Lors de l'ajout, traiter tous les cas possibles : ajout dans une liste vide, ajout en première position, au milieu, à la fin.


On pourra utiliser une des deux méthodes de la classe String donc la documentation (partielle) est reproduite ci-dessous :

..	+public int compareTo(String anotherString)+
+
Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this String object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this String object lexicographically precedes the argument string. The result is a positive integer if this String object lexicographically follows the argument string. The result is zero if the strings are equal; compareTo returns 0 exactly when the equals(Object) method would return true.
+
This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. 
+
If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the < operator, lexicographically precedes the other string.
+    
If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. 
+
*Parameters*: 	anotherString - the String to be compared.
+
*Returns*:	the value 0 if the argument string is equal to this string; a value less than 0 if this string is lexicographically less than the string argument; and a value greater than 0 if this string is lexicographically greater than the string argument.

..	+public int compareToIgnoreCase(String str)+
+
Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of calling compareTo with normalized versions of the strings where case differences have been eliminated by calling Character.toLowerCase(Character.toUpperCase(character)) on each character.
+
Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides collators to allow locale-sensitive ordering.
+
*Parameters*:	str - the String to be compared.
+
*Returns*: 	a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations.


ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Agence Bancaire ListeChainee
======
[source,java]
----
import java.util.ArrayList;
import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;

// V ListeChainée :


/************************************************************
 * La classe AgenceBancaire permet de gérer une agence bancaire comme un ensemble de Comptes.<BR>
 * Une AgenceBancaire a un nom, une localisation (ville) et gère un ensemble de Comptes.<BR>
 * Exemple : agence "Agence Caisse Epargne" à "Pibrac".<BR>
 * Chaque Compte de l'AgenceBancaire a un numéro unique (vérification faite lors de l'ajout d'un Compte).<BR>
 * 
 * @author André Péninou.
 * @version 7.02
 *****************************/

public class AgenceBancaire {
	// Attributs
	private String nom, loc;
	private Cellule debutDeListe;
	private int nbElements;

	/**
	 * Constructeur paramétré.<BR>
	 * Permet de créer une AgenceBancaire en donnant son nom et sa ville.<BR>
	 * L'AgenceBancaire est initialisée avec 0 comptes.<BR>
	 * 
	 * @param pNomAgence
	 *            Le nom de l'AgenceBancaire.
	 * @param pLocAgence
	 *            La ville de localisation de l'AgenceBancaire.
	 */

	public AgenceBancaire(String pNomAgence, String pLocAgence) {
		this.nom = pNomAgence;
		this.loc = pLocAgence;
		this.debutDeListe = null;  // Initialisation liste : pas d'éléments.
		this.nbElements = 0;
	}

	/**
	 * Permet de connaître le nom de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nom de l'AgenceBancaire.
	 */

	public String getNomAgence() {
		return this.nom;
	}

	/**
	 * Permet de connaître la localisation de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return La ville de localisation de l'AgenceBancaire.
	 */

	public String getLocAgence() {
		return this.loc;
	}

	/**
	 * Permet de connaître le nombre de Comptes existant dans l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nombre de comptes de l'AgenceBancaire.
	 */

	public int getNbComptes() {
		return this.nbElements;
	}

	/**
	 * Permet de retrouver un Compte de l'AgenceBancaire à partir de son numéro de
	 * compte (unique).<BR>
	 * Renvoie null si le Compte de numéro de compte pNumCompte n'est pas
	 * trouvé.<BR>
	 * <BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte recherché.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Le Compte de numéro pNumCompte, null si le compte n'est pas
	 *         trouvé.
	 */

	public Compte getCompte(String pNumCompte) {
		// A titre d'exemple : utilise une méthode privée définie en fin de
		// classe
		Compte c;
		
		c = this.trouveCompte(pNumCompte);
		return c;
	}

	/**
	 * Permet de retrouver les Comptes de l'AgenceBancaire correspondant à un nom de
	 * propriétaire donné.<BR>
	 * Renvoie un tableau du nombre de Comptes ayant pour propriétaire
	 * pNomProprietaire (et contenant les dits Comptes...).<BR>
	 * Si aucun Compte n'est trouvé, renvoie un tableau de longueur 0.<BR>
	 * <BR>
	 * 
	 * @param pNomProprietaire
	 *            Le nom du propriétaire de Compte dont on veut les Comptes.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Un tableau des Comptes ayant pour propriétaire pNomProprietaire,
	 *         un tableau de longueur 0 si aucun compte n'est trouvé.
	 */

	public Compte[] getComptesDe(String pNomProprietaire) {
		/*
		 * Méthode : créer une ArrayList de Compte temporaire : alTemp. 
		 * Parcourir this.alCptes.
		 * 	Si un compe appartient au proprietaire 
		 * 		=> le garder dans alTemp.
		 * Si alTemp non vide : recopier tous les comptes de alTemp dans
		 * un nouveau tableau qui sera renvoyé 
		 * Sinon créer un tableau de 0 éléments.
		 */

		Compte t[], cTemp;
		ArrayList<Compte> alTemp; // ArrayList de Compte temporaire
		int nbCTemp, i;
		Cellule temp; 

		t = null;

		// Recherche des comptes de pNomProprietaire dans l'AgenceBancaire
		alTemp = new ArrayList<Compte>();
		temp = this.debutDeListe;
		while (temp != null) {
			cTemp = temp.getContenu();
			if (cTemp.getProprietaire().equals(pNomProprietaire)) {
				alTemp.add(cTemp);
			}
			temp = temp.getSuivant();
		}

		// Si on a trouvé des comptes ...
		if (alTemp.size() != 0) {
			// ... on crée un tableau et on les recopie
			nbCTemp = alTemp.size();
			t = new Compte[nbCTemp];
			for (i = 0; i < nbCTemp; i++) {
				t[i] = alTemp.get(i);
			}
			/*
			 * Ou bien directement, sans les lignes ci-dessus :
			 *		t = alTemp.toArray(new Compte[0]); 
			 * cf. doc ArrayList / T[] toArray(T[])
			 */
		} else {
			// ... pas de compte dans un tableau vide
			t = new Compte[0];
		}
		return t;
	}

	/**
	 * Permet d'afficher une AgenceBancaire -<B> SPECIAL TP.</B><BR>
	 * <BR>
	 * Affiche le nom de l'AgenceBancaire, sa localisation, le nombre de Comptes,
	 * chaque Compte avec son solde.<BR>
	 * <BR>
	 * <B>ATTENTION : Méthode spéciale pour les TP.</B><BR>
	 * <BR>
	 */

	public void afficher() {
		Compte cTemp;
		Cellule temp;

		System.out.println();
		System.out.println("Nom : " + this.nom + " (" + this.loc + ")");
		System.out.println("" + this.nbElements + " Comptes :");
		temp = this.debutDeListe;
		while (temp != null) {
			cTemp = temp.getContenu();
			cTemp.afficher();
			System.out.println("   Solde : " + cTemp.soldeCompte());
			temp = temp.getSuivant();
		}
		System.out.println();
	}

	/**
	 * Permet d'obtenir la représentation String d'une AgenceBancaire.<BR>
	 * <BR>
	 * Donne le nom de l'AgenceBancaire, la localisation, le nombre de Comptes.<BR>
	 * <BR>
	 */

	public String toString() {
		return "Nom Agence : " + this.nom + " (" + this.loc + ") : "+this.nbElements+" cptes";
	}
	
	/**
	 * Permet d'ajouter un Compte à l'AgenceBancaire.<BR>
	 * Le Compte pCompteAAjouter est ajouté à l'AgenceBancaire s'il n'existe pas déjà un Compte
	 * ayant le même numéro de compte que pCompteAAjouter 
	 * (identique en numéro de compte à pCompteAAjouter.getNumCompte()).<BR>
	 * Si on appelle la méthode avec null en paramètre, la méthode lève une exception.<BR>
	 * 
	 * @param pCompteAAjouter
	 *            Le Compte à ajouter à l'AgenceBancaire.
	 * @throws ABCompteNullException  lorsque pCompteAAjouter == null	
	 * @throws ABCompteDejaExistantException  lorsque un compte de numéro pCompteAAjouter.getNumCompte() existe déjà dans l'AgenceBancaire.
	 * @see AgenceBancaire#removeCompte(String)
	 */

	public void addCompte(Compte pCompteAAjouter) throws ABCompteNullException, ABCompteDejaExistantException {
		Cellule newCel;
		Compte c;
		
		// Si null => refusé
		if (pCompteAAjouter == null) {
			throw new ABCompteNullException("Erreur ajout Compte 'null' dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// On cherche un Compte de même numéro
		c = this.trouveCompte(pCompteAAjouter.getNumCompte());

		// Si trouvé
		if (c != null) {
			throw new ABCompteDejaExistantException(
					"Erreur ajout Compte déja existant ("
					+ pCompteAAjouter.getNumCompte() + ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// ... on ajoute le Compte en premier élément 

		newCel = new Cellule (pCompteAAjouter, this.debutDeListe);
		// Ou bien
		// newCel = new Cellule (pCompteAAjouter, null);
		// newCel.setSuivant(this.debutDeListe);
		this.debutDeListe = newCel;
		
		/*
			// Ou Bien :
			// ... on ajoute le Compte en dernier élément 
			Cellule temp;
			newCel = new Cellule (pCompteAAjouter, null);
			if (this.debutDeListe == null) {
				this.debutDeListe = newCel;
			} else {
				temp =this.debutDeListe;
				while (temp.getSuivant() != null) {
					temp = temp.getSuivant();
				}
				temp.setSuivant(newCel);
			}
		*/
		this.nbElements = this.nbElements + 1;
	}

	/**
	 * Permet de supprimer un Compte de l'AgenceBancaire, à partir de son numéro.<BR>
	 * Le Compte (unique) de numéro pNumCompte est retiré de l'AgenceBancaire s'il est
	 * trouvé.<BR>
	 * Une exception est levée si le compte n'est pas trouvé.<BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte à supprimer de l'AgenceBancaire.
	 * @throws ABCompteInexistantException	Lorsque aucun compte de numéro pNumCompte ne peut être trouvé.
	 * @see AgenceBancaire#addCompte(Compte)
	 */
	public void removeCompte(String pNumCompte) throws ABCompteInexistantException {
		Cellule temp, pred ;
		boolean trouve;
	
		
		// On cherche un Compte de même numéro
		// Il y a plusieurs algos possibles
		temp = this.debutDeListe;
		pred = null;
		trouve = false;
		while (temp != null && ! trouve) {
			if (temp.getContenu().getNumCompte().equals(pNumCompte)) {
				trouve = true;
			} else {
				pred = temp;
				temp = temp.getSuivant();
			}
		}

		// Si pas trouvé ...
		if (! trouve) {
			throw new ABCompteInexistantException(
					"Erreur suppression Compte inexistant ("
					+ pNumCompte+ ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}
		
		// ... on, enlève 
		if (pred == null) { // premier élément de la liste
			this.debutDeListe = this.debutDeListe.getSuivant();
		} else { // au milieu ou à la fin
			pred.setSuivant(temp.getSuivant());
		}
		this.nbElements = this.nbElements - 1;
	}
	
/*
    // Autre solution ... plus complexe àcomprendre.
      
 	public void removeCompte(String pNumCompte) throws ABCompteInexistantException {
 		boolean trouve;
		Cellule temp;
		
		// On cherche un Compte de même numéro
		trouve = false;
		if (this.debutDeListe == null) {
			trouve = false;
		} else {
			if (this.debutDeListe.getContenu().getNumCompte().equals(pNumCompte)) {
				// C'est le premier qu'il faut enlever ...
				trouve = true;
				this.debutDeListe = this.debutDeListe.getSuivant();
				this.nbElements = this.nbElements - 1;
			} else {
				// On cherche dans la liste en regardant toujours le suivant
				// pour rester sur l'élément courant qu'il faudra modifier pour la suppression
				trouve = false;
				temp = this.debutDeListe;
				while (!trouve && temp.getSuivant()!=null)
				{
					if (temp.getSuivant().getContenu().getNumCompte().equals(pNumCompte)) {
						trouve = true;
					} else {
						temp = temp.getSuivant();
					}
				}
				if (trouve) {
					temp.setSuivant(temp.getSuivant().getSuivant());
					this.nbElements = this.nbElements - 1;
				}
			}
		}
		
		// Si pas trouvé ...
		if (! trouve) {
			throw new ABCompteInexistantException(
					"Erreur suppression Compte inexistant ("
					+ pNumCompte+ ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}
	}
*/
	
	/**
	 * Méthode privée de recherche du Compte e la Cellule contenant un compte.
	 * Cherche la cellule contenant un compte ayant pour numéro de compte pNC.
	 * Renvoie null si aucun compte n'est trouvé.
	 *
	 * @param      pNC  numéro du compte recherché
	 * @return     la cellule contenant l'objet Compte trouvé ayant pour numéro pNC ou null si non trouvé. 
	 */
	private Compte trouveCompte(String pNC) {
		Compte cTemp, solution;
		Cellule temp ;

		solution = null;
		temp = this.debutDeListe;
		while (temp != null && solution == null) {
			cTemp = temp.getContenu();
			// Si un Compte a le même numéro que pNC
			if (cTemp.getNumCompte().equals(pNC)) {
				// ... on le garde
				solution = temp.getContenu();
			}
			temp = temp.getSuivant();
		}
		return solution;
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Agence Bancaire ListeChainee Ordonnée
======
[source,java]
----
package tps.banque;

import java.util.ArrayList;

import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;

// V ListeChainée ordonnée :


/************************************************************
 * La classe AgenceBancaire permet de gérer une agence bancaire comme un ensemble de Comptes.<BR>
 * Une AgenceBancaire a un nom, une localisation (ville) et gère un ensemble de Comptes.<BR>
 * Exemple : agence "Agence Caisse Epargne" à "Pibrac".<BR>
 * Chaque Compte de l'AgenceBancaire a un numéro unique (vérification faite lors de l'ajout d'un Compte).<BR>
 * 
 * @author André Péninou.
 * @version 7.02
 *****************************/

public class AgenceBancaire {
	// Attributs
	private String nom, loc;
	private Cellule debutDeListe;
	private int nbElements;

	// Autres méthodes identiques
	
	/**
	 * Permet d'ajouter un Compte à l'AgenceBancaire.<BR>
	 * Le Compte pCompteAAjouter est ajouté à l'AgenceBancaire s'il n'existe pas déjà un Compte
	 * ayant le même numéro de compte que pCompteAAjouter 
	 * (identique en numéro de compte à pCompteAAjouter.getNumCompte()).<BR>
	 * Si on appelle la méthode avec null en paramètre, la méthode lève une exception.<BR>
	 * 
	 * @param pCompteAAjouter
	 *            Le Compte à ajouter à l'AgenceBancaire.
	 * @throws ABCompteNullException  lorsque pCompteAAjouter == null	
	 * @throws ABCompteDejaExistantException  lorsque un compte de numéro pCompteAAjouter.getNumCompte() existe déjà dans l'AgenceBancaire.
	 * @see AgenceBancaire#removeCompte(String)
	 */

	public void addCompte(Compte pCompteAAjouter) throws ABCompteNullException, ABCompteDejaExistantException {
		Cellule newCel, temp, pred;
		boolean positionTrouvee, erreurExiste;
		
		// Si null => refusé
		if (pCompteAAjouter == null) {
			throw new ABCompteNullException("Erreur ajout Compte 'null' dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// ... on parcours pour soit trouver le Compte, soit l'ajouter 
		
		erreurExiste = false;
		
		if (debutDeListe == null) {
			// premier compte de la liste
			debutDeListe = new Cellule (pCompteAAjouter, null);
			this.nbElements = this.nbElements + 1;
		} else {
			if (pCompteAAjouter.getNumCompte().compareToIgnoreCase(debutDeListe.getContenu().getNumCompte())<0) {
				// en première position
				newCel = new Cellule (pCompteAAjouter, null);
				newCel.setSuivant(debutDeListe);
				debutDeListe = newCel;
				this.nbElements = this.nbElements + 1;
			} else {
				if (pCompteAAjouter.getNumCompte().compareToIgnoreCase(debutDeListe.getContenu().getNumCompte()) == 0) {
					// Pb, le compte existe
					erreurExiste = true;
				} else {
					pred = debutDeListe;
					temp = debutDeListe.getSuivant();
					positionTrouvee = false;
					while (temp != null && !positionTrouvee && !erreurExiste) {
						if (temp.getContenu().getNumCompte().compareToIgnoreCase(pCompteAAjouter.getNumCompte())<0) {
							pred = temp;
							temp = temp.getSuivant();
						} else {
							if (temp.getContenu().getNumCompte().compareToIgnoreCase(pCompteAAjouter.getNumCompte()) == 0) {
								// Pb, le compte existe
								erreurExiste = true; 
							} else {
								positionTrouvee = true;
							}
						}
					}
					if (! erreurExiste) {
						newCel = new Cellule (pCompteAAjouter, null);
						newCel.setSuivant(pred.getSuivant());
						pred.setSuivant(newCel);
						this.nbElements = this.nbElements + 1;
					}
				}
			}
		}
		if (erreurExiste) {
			throw new ABCompteDejaExistantException(
					"Erreur ajout Compte déja existant ("
					+ pCompteAAjouter.getNumCompte() + ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

	}
	
	/* Autre méthode BIEN MOINS optimisée car deux parcours de la liste
	public void addCompte(Compte pCompteAAjouter) throws ABCompteNullException, ABCompteDejaExistantException {
		Cellule newCel, temp, pred;
		boolean positionTrouvee;
		
		Compte c;
		
		// Si null => refusé
		if (pCompteAAjouter == null) {
			throw new ABCompteNullException("Erreur ajout Compte 'null' dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// On cherche un Compte de même numéro
		c = this.trouveCompte(pCompteAAjouter.getNumCompte());

		// Si trouvé
		if (c != null) {
			throw new ABCompteDejaExistantException(
					"Erreur ajout Compte déja existant ("
					+ pCompteAAjouter.getNumCompte() + ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// ... on ajoute le Compte 
		
		newCel = new Cellule (pCompteAAjouter, null);
		if (debutDeListe == null) {
			// premier compte de la liste
			debutDeListe = newCel;
		} else {
			if (pCompteAAjouter.getNumCompte().compareToIgnoreCase(debutDeListe.getContenu().getNumCompte())<=0) {
				// en première position
				newCel.setSuivant(debutDeListe);
				debutDeListe = newCel;
			} else {
				pred = debutDeListe;
				temp = debutDeListe.getSuivant();
				positionTrouvee = false;
				while (temp != null && !positionTrouvee) {
					if (temp.getContenu().getNumCompte().compareToIgnoreCase(pCompteAAjouter.getNumCompte())<=0) {
						pred = temp;
						temp = temp.getSuivant();
					} else {
						positionTrouvee = true;
					}
				}
				newCel.setSuivant(pred.getSuivant());
				pred.setSuivant(newCel);
			}
		}
		this.nbElements = this.nbElements + 1;
	}
	*/

	/**
	 * Méthode privée de recherche du Compte e la Cellule contenant un compte.
	 * Cherche la cellule contenant un compte ayant pour numéro de compte pNC.
	 * Renvoie null si aucun compte n'est trouvé.
	 *
	 * @param      pNC  numéro du compte recherché
	 * @return     la cellule contenant l'objet Compte trouvé ayant pour numéro pNC ou null si non trouvé. 
	 */
	private Compte trouveCompte(String pNC) {
		Compte cTemp, solution;
		Cellule temp ;
		boolean fini;
		
		solution = null;
		temp = this.debutDeListe;
		fini = false;
		while (temp != null && solution == null && !fini) { // solution== null : est superflue
			cTemp = temp.getContenu();
			// Si un Compte a le même numéro que pNC
			if (cTemp.getNumCompte().equals(pNC)) {
				// ... on le garde
				solution = temp.getContenu();
				fini = true;
			} else {
				if (cTemp.getNumCompte().compareToIgnoreCase(pNC) <= 0 ) {
					// il faut regarder le suivant
					temp = temp.getSuivant();
				} else {
					// il ne peut pas être après
					fini = true;
				}
			}
		}
		return solution;
	}
}
----
======

endif::prof[]

endif::todoprof[]
