:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 5
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

ifndef::todoprof[]
//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]
endif::todoprof[]


//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD3 classes objets-encapsulation, TP2 : Utilisation d'objets.
| {objtd}	| *Stockage de données : listes chaînées*.
| {duree}	| *2 séance* de 1,5h
|======================
// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

. Objectif :

* Utiliser une liste chaînée
* Programmer une liste chaînée

. Viendra plus tard :

* TP : une liste simple pour les comptes (AgenceBancaire)

. Déroulement a priori :

* TODOTODO

====
endif::todoprof[]

ifndef::todoprof[]

== A VOIR

La notion de structure autoréferrentielle

Une structure autoréferrentielle (parfois appelée structure récursive) correspond à une structure

dont au moins un des champs contient un pointeur vers une structure de même type. De cette façon on crée des éléments
(appelés parfois noeuds ou liens) contenant
des données, mais, contrairement à un tableau, celles-ci peuvent être éparpillées en mémoire et reliées entre elles
par des liens logiques (des pointeurs), c'est-à-dire un ou plusieurs champs dans chaque structure contenant l'adresse d'une ou plusieurs structures
de même type.

    Lorsque la structure contient des données et un pointeur vers la structure suivante on parle de liste chaînée
    Lorsque la structure contient des données, un pointeur vers la structure suivante, et un pointeur vers la structure précédente on parle de liste chaînée double
    Lorsque la structure contient des données, un pointeur vers une première structure suivante, et un pointeur vers une seconde, on parle d'arbre binaire
	

////////////////////////////////////
== Principes de stockage de données

=== Stockage de données en mémoire / Possibilités du langage

Pour stocker des données, ce qui est donné comme disponible au programmeur en Java est :

. les types de base,
. le type tableau d'éléments d'un type donné,
. le type "classe(/structure)" : des objets en mémoire contenant des attributs.

Pour stocker en mémoire "plusieurs" données, disons un "ensemble"/"suite"/"séquence" de données, il existe deux structures de programmation de base :

. le tableau,
. la structure chaînée (vue plus tard).

=== Structures de données

En dehors de tout contexte particulier (langage et application), une structure de donnée définit :

. un ensemble d'informations organisées,
. l'organisation de ces informations,
. les opérations applicables sur ces informations ... et leur résultat respectif.

Exemples: pile, file, liste, ensemble, map (clef/valeur), arbre, graphe, ... 

Pour les utiliser, il faut *construire*/*implémenter* ces structures de données à partir des possibilités de chaque langage. 

Une implantation d'une structure de donnée repose sur :

* le choix d'une représentation mémoire,
* le choix d'une implémentation algorithmique des opérations de la structure de donnée.
* 2 éléments fondamentaux à prendre en compte : espace mémoire - temps exécution/accès.

Dans les environnements de développement, on trouve des bibliothèques (packages java) qui offrent diverses implémentations des structures de données. 

Par exemple, en java on trouve au moins deux implémentations de la structure de donnée liste itérative :

* ArrayList<E> : liste implantée sous forme de tableau,
* LinkedList<E> : liste implantée sous forme de structure doublement chaînée.

On trouvera aussi : 

* Structure de donnée pile :
** Stack<E> : pile implantée sous forme de tableau,
** et d'autres ...
* Structure de donnée file :
** ArrayDeque<E> : file implantée sous forme de tableau.
** et d'autres ...
* Structure de donnée ensemble (collection sans doublons)
** HashSet<E> : ensemble implanté sous forme de paires clef/valeur,
** TreeSet<E> : ensemble implanté  sous forme d'arbre balancé.
* Structure de donnée map (association clef/valeur)
** HashMap<K,V> : map implantée sous forme d'une table de hachage,
** TreeMap<K,V> : map implantée sous forme d'arbre balancé.

== But du TD 

Étudier comment implémenter des "tableaux dynamiques" ou "comment changer la taille d'un tableau sans perdre les éléments". Implémenter une pile de String avec un tableau dynamique. Permet d'illustrer UN mode d'implémentation d'une structure de donnée.

== Principe d'un "tableau dynamique"

Fonctionnement des tableaux :

* ils sont créés au run-time.
* une fois créés : la taille ne peut pas être modifiée.

=== Exercice : comment "agrandir/rétrécir" un tableau ?

Question : Soit un tableau rempli de longueur n, dont la référence est stockée dans la variable +tabCourant+ : 

Comment faire "évoluer" la taille du tableau rempli, par exemple l'agrandir (tabCourant donnera accès à un tableau "plus grand") ?

Rappel : un tableau se manipule au travers de sa référence.

Réponse :

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse
======
. Créer un nouveau tableau plus grand : +nouvTab = new ... [...]+
. Copier les valeurs de l'ancien tableau (for).
. Conserver la nouvelle référence de tableau : +tabCourant = nouvTab;+
======
endif::prof[]

=== Exercice : le faire ...
 
Dans le programme joint, indiquer le code nécessaire à ajouter pour agrandir le tableau référencé par +tabCourant+ :

* il fait 5 éléments au départ,
* on y rentre 5 valeurs en <1>,
* il faudra l'agrandir de +nbValSuppl+ éléments,
* à la fin il faudra afficher les 5 premières valeurs saisies en <1> et les +nbValSuppl+ valeurs saisies en <2>.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse
======
[source, java]
-----
int[] nouvTab = new int [tab.length+nbValSuppl];
for (i=0;i< tab.length; i++) {
	nouvTab[i] = tab[i];
}
tab = nouvTab; // IMPORTANT
-----
======
endif::prof[]

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Représentation mémoire
======
. Début du programme, en <1> par exemple
+
image:images/td4tabdyn.1.avantcreation.png[]
+
. Pendant la création (code ajouté)
+
image:images/td4tabdyn.2.pendantcreation.png[]
+
. A la fin, après +tab = nouvTab;+, en, <2> par exemple
+
image:images/td4tabdyn.3.aprescreation.png[]
======
endif::prof[]


// Source code
public class CrashTest {
	public static void main(String[] args) {
		
		Scanner lect ;					// TD 4 - Classe Pile
		int i, nbValSuppl;

		int [] tabCourant ;

		lect = new Scanner (System.in) ;
		lect.useLocale(Locale.US);

		tabCourant = new int [5];

		for ( i=0 ; i< tabCourant.length ; i++) {
		    tabCourant[i] = lect.nextInt();  // <1> Remplissage
		}


		
		System.out.println("   Nb Valeurs en plus ? : -> ");
		nbValSuppl = lect.nextInt();
		// A faire ici
		
		int[] nouvTab = new int [tabCourant.length+nbValSuppl];
		for (i=0;i< tabCourant.length; i++) {
			nouvTab[i] = tabCourant[i];
		}
		tabCourant = nouvTab;

		
		
		for ( i=5 ; i< tabCourant.length ; i++) { // de 5 au nb de valeurs saisies
			   tabCourant[i] = lect.nextInt();   // <2> Remplissage complémentaire
			}

			for ( i=0; i< tabCourant.length ; i++) {
			    System.out.println(tabCourant[i]); 
			    // Affichera les 5 valeurs saisies au départ <1> 
			    // + les valeurs ajoutées en <2>
			}

	}
}


== Classe à développer : Pile de String

La pile :

* Structure de donnée de type LIFO (Last In, First Out).
* Dernier élément "entré" dans la pile sera le premier "sorti". 

On souhaite définir une classe *Pile de String* dont l'implémentation est un tableau "dynamique" de la taille exacte du nombre d'éléments contenus dans la Pile. L'implantation proposée ici consiste à changer le tableau de stockage à chaque modification de la pile.

[options="header"]
|=======
| Diagramme UML complet de la classe Pile | Méthodes
| image:images/classePile.png[]  image:images/classePileInterface.png[]  |
Les méthodes :

* +Pile()+ : Constructeur par défaut qui construit une pile vide (sans éléments).

* +boolean estVide ()+ : retourne true si la pile est vide, false sinon.

* +String sommet ()+ : donne accès au sommet de la pile, l'élément en "haut" de la pile (le dernier empilé).

=> Précondition : sommet() valide ssi pilevide() == false. Lève une exception PileException si non respecté.

* +void empiler (String elt)+ : permet d'ajouter un élément en "haut" de la pile.

* +void depiler ()+ : enlève l'élément en "haut" de la pile.

=> Précondition : depiler() valide ssi pilevide() == false. Lève une exception PileException si non respecté.
|=======

NB : noter que dans certains cas (livres, sites web, etc.), l'en-tête de depiler() pourrait être +*String* depiler ()+, signifiant que depiler() pourrait ET enlever le sommet de la pile ET renvoyer la valeur de ce dernier.

=== Implémentation mémoire

Donner l'implémentation d'un objet Pile que l'on a créé avec une variable +maPile+
 NB : on ne représentera pas le contenu des éléments du tableau de la Pile qui sont des String

. Avec un élément.
. Après empilement d'un nouvel élément
. Après empilement d'un nouvel élément
. Après dépilement d'un élément
. Après dépilement d'un élément
. Après dépilement d'un élément

[NOTE]
======
Java autorise de créer des tableaux de longueur 0 : un objet tableau qui existe et peut contenir 0 éléments (l'attribut length vaut 0).
======

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Représentation mémoire Pile de String
======
[options="header"]
|=======
| Début et empiler() | depiler()

| 1) Avec un élément.
+
image:images/td4.pile.10.png[]
+
| 4) Après dépilement d'un élément
+
image:images/td4.pile.40.png[]

| 2) Après empilement d'un nouvel élément 
+
image:images/td4.pile.20.png[]
+
| 5) Après dépilement d'un élément
+
image:images/td4.pile.50.png[]

| 3) Après empilement d'un nouvel élément 
+
image:images/td4.pile.30.png[]
+
| 6) Après dépilement d'un élément
+
image:images/td4.pile.60.png[]
|=======
======
endif::prof[]

=== Codage

Écrire les méthodes de la classe Pile implémentée par un tableau "dynamique" de la taille exacte du nombre d'éléments contenus dans la Pile.

En cas d'appel des méthodes hors préconditions, les méthodes lèveront une exception de type +PileException+.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
[source, java]
-----
public class Pile {
	private String[] values;
	
	public Pile() {
		 this.values = new String[0];
	}
	public boolean estVide () {
		return this.values.length == 0 ;
	}
	public String sommet () throws PileException {
		if (this.estVide()) {
			throw new PileException();
		}
		return this.values[this.values.length-1];
	}

	public void empiler (String elt) {
		String[] nouvTab;
		int i;
		nouvTab = new String[this.values.length + 1];
		for (i=0; i<this.values.length; i++) {
			nouvTab[i] = this.values[i];
		}
		nouvTab[nouvTab.length-1] = elt;
		this.values = nouvTab;
	}

	public void depiler () throws PileException {
		if (this.estVide()) {
			throw new PileException();
		}
		String[] nouvTab;
		int i;
		nouvTab = new String[this.values.length - 1];
		for (i=0; i<this.values.length-1; i++) {
			nouvTab[i] = this.values[i];
		}
		this.values = nouvTab;
	}

}

class PileException extends Exception {}
-----
======
endif::prof[]

////////////////////////////////////

endif::todoprof[]

