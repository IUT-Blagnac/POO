:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 5
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

ifndef::todoprof[]
//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]
endif::todoprof[]


//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD1 : implantations mémoires, TD3 classes objets-encapsulation, TP2 : Utilisation d'objets.
| {objtd}	| *Stockage de données : listes chaînées*.
| {duree}	| *2 séances* de 1,5h
|======================
// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

. Objectif :

* Dessiner une liste chaînée
* Utiliser une liste chaînée
* Programmer une liste chaînée dans un main

. Viendra plus tard :

* TD et TP : une liste simple pour les comptes (AgenceBancaire)

. Déroulement a priori :

* Prendra 2 séances
* Y aller doucement car ils auront du mal je pense.
* Le but est de comprendre, faire des schémas.
* Séance 1 : début + p1/p2 début p3
* Séance 2 : p3 + algo général + conclu tableau dynamiques/liste

Eventuellement :

*	Ne pas distribuer le support au début,
*	Faire 1 (Principes) 2 (Listes chaînées)

**	La solution des exemples et en fait donnée plus loin ... partie 3
*	Leur faire chercher la classe Cellule
*	Distribuer le support puis faire le 3

====
endif::todoprof[]

ifndef::todoprof[]

== Principes

Une structure autoréferrentielle (parfois appelée structure récursive) correspond à une structure dont au moins un des champs contient une référence vers une structure de même type. 

De cette façon on crée des éléments *cellule* (appelés parfois noeuds ou liens) contenant des données, mais, contrairement à un tableau, celles-ci peuvent être éparpillées en mémoire et reliées entre elles par des liens logiques (des références), c'est-à-dire un ou plusieurs champs dans chaque structure contenant la référence d'une ou plusieurs structures de même type.

Plusieurs cas sont possibles :

*	Lorsque la structure contient des données et une référence vers la structure suivante : on parle de structure/liste chaînée.
*	Lorsque la structure contient des données, une référence vers la structure suivante, et une référence vers la structure précédente : on parle de structure/liste chaînée double.
*	Lorsque la structure contient des données, une référence vers une première structure suivante, et une référence vers une seconde, on parle d'arbre binaire.

== Listes chaînées

===	Définition

On va considérer uniquement ici les structures chaînées de type liste simplement chaînée.

.	Pour gérer de telles listes, il faut :

* des éléments *cellule* contenant une valeur (contenu) et une référence vers la *cellule suivante*,
* repérer a minima la première *cellule* de la chaîne.

. Exemple de liste chaînée contenant des réels :
+
image:images/td5listechainee2.png[]
+
On a donc des *cellules* reliées entre elles comme des maillons d'un chaîne.

.	Attention : importance de la valeur *null* de la dernière Cellule -> repère la fin de la chaîne (dernier maillon).

.	Attention : +debutChaine+ est ici une variable "externe" à la structure chaînée. Il faut nécessairement repérer *au moins* le début de la structure chaînée (une variable, un attribut d'une classe plus tard, ...).

[IMPORTANT]
=====
A noter :

*	Liste chaînée fait penser à liste et ArrayList => on attendrait des méthodes
*	On présente plutôt ici des *structures* chaînées, sans opération spécifique définie (ajout, retrait, ...).
*	Par abus de langage, on parlera de "listes" chaînées
=====

===	Exemple

Question : Proposer un schéma de cette liste (barrer les cellules inutiles) avec :

ifdef::prof[]
image:images/td5listechainee2.png[]
endif::prof[]

.	Un élément 35.5 de plus au début.
.	Un élément 75.5 de plus en fin.
+
image:images/td5listechaineeVidePourReponses.png[]
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse ajouts
======
image:images/td5listechainee1.png[]
======
endif::prof[]
+
.	L'élément 35.5 en moins.
.	L'élément 55.5 en moins.
.	L'élément 75.5 en moins.
+
image:images/td5listechaineeVidePourReponses.png[]
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse suppressions
======
image:images/td5listechainee3.png[]
======
endif::prof[]
+
.	Comment représenter une liste chaînée ne comportant aucune valeur ?
+
image:images/td5listechaineeVidePourReponses.png[]
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse liste chaînée ne comportant aucune valeur
======
[source, java]
-----
debutChaine vaut null; // debutChaine ne référence aucune Cellule
-----
======
endif::prof[]

== Utiliser "manuellement" une liste chaînée

=== La classe Cellule

Afin de pouvoir gérer les cellules d'une liste chaînée, on propose la classe ci-dessous :

.Diagramme UML de la classe Cellule
[caption="Figure : "]
image:images/classeCellule.png[]

.Source java de la classe Cellule
[source, java]
-----
public class Cellule {
	private double contenu; 
	private Cellule suivant;
	
	public Cellule (double pVal, Cellule pSuiv) {
		this.contenu = pVal;
		this.suivant = pSuiv;
	}
	public double getContenu () {
		return this.contenu;
	}
	public Cellule getSuivant () {
		return this.suivant;
	}
	public void setContenu (double pVal) {
		this.contenu = pVal;
	}
	public void setSuivant (Cellule pSuiv) {
		this.suivant = pSuiv;
	}
}
-----

////////////////////
.	Question : Ecrire le code (simple) de la classe Cellule.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse classe Cellule
======
[source, java]
-----
public class Cellule {
	private double contenu; 
	private Cellule suivant;
	
	public Cellule (double pVal, Cellule pSuiv) {
		this.contenu = pVal;
		this.suivant = pSuiv;
	}
	public double getContenu () {
		return this.contenu;
	}
	public Cellule getSuivant () {
		return this.suivant;
	}
	public void setContenu (double pVal) {
		this.contenu = pVal;
	}
	public void setSuivant (Cellule pSuiv) {
		this.suivant = pSuiv;
	}
}
-----
======
endif::prof[]
////////////////////


=== Utiliser la classe Cellule

Écrire le programme simple proposé en annexe.

En utilisant trois variables, la partie 1 doit permettre de construire :

image:images/td5listechainee2.png[]

En ne conservant que l'information +debutChaine+, la partie 2 doit permettre de construire :

image:images/td5listechainee1.png[]

En ne conservant que l'information +debutChaine+, la partie 3 doit permettre de construire :

image:images/td5listechainee3.png[]

Enfin, chercher un algorithme permettant la suppression d'un élément (ou valeur, appelons-la +valASup+) n'importe où dans la structure chaînée et éventuellement absent de la structure. Il faudra réfléchir :

* 	au cas où l'élément n'est pas dans la structure chaînée,
*	au cas où l'élément est présent et est le premier de la structure chaînée,
*	au cas où l'élément est présent et est "au milieu" de la structure chaînée,
*	au cas où l'élément est présent et est le dernier de la structure chaînée (mais est ce bien un cas particulier ?).

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse ajouts
======
[source, java]
-----
public class TestCelluleManuel {
  public static void main (String[] argv) {
	
	// PARTIE 1 - PARTIE 1 - PARTIE 1 - PARTIE 1
	
	// déclarer debutChaine et des variables Cellule : pCel1, pCel2, pCel3, temp, nouvCel
	
	Cellule debutChaine;
	Cellule pCel1, pCel2, pCel3, temp, nouvCel, temp2;

	// créer la cellule contenant 45.5 en utilisant la variable pCel1
	
	pCel1 = new Cellule(45.5, null);
	
	// créer la cellule contenant 55.5 en utilisant la variable pCel2
	
	pCel2 = new Cellule (55.5, null);
	
	// relier les cellules contenant 45.5 et 55.5
	
	pCel1.setSuivant(pCel2);
	
	// créer la cellule contenant 65.5 en utilisant la variable pCel3
	
	pCel3 = new Cellule (65.5, null);
	
	// relier les cellules contenant 55.5 et 65.5
	
	pCel2.setSuivant(pCel3);
	
	// initialiser correctement le champ suiv de la Cellule contenant 65.5 
	// pour que la structure  chaînée soit correcte (c'est la dernière cellule de la structure )
	
	pCel3.setSuivant(null); // Mais fait au constructeur
	

	// initialiser la variable debutChaine pour qu’elle contienne la référence de la première 
	// cellule de la chaîne que vous venez de créer
	
	debutChaine = pCel1;
	
	// afficher les différentes valeurs contenues dans la structure  chaînée dans l'ordre 
	// des Cellules en utilisant les valeurs de pCel1, pCel2 et pCel3,

	
	System.out.println();
	System.out.println(pCel1.getContenu());
	System.out.println(pCel2.getContenu());
	System.out.println(pCel3.getContenu());

	// afficher les différentes valeurs contenues dans la structure  chaînée dans l'ordre des Cellules 
	// en utilisant debutChaine et éventuellement un autre pointeur de Cellule et en utilisant une boucle
	// NE PAS se servir des valeurs de pCel1, pCel2 et pCel3
	
	System.out.println();
	temp = debutChaine ;
	while (temp != null) {
		System.out.println(temp.getContenu());
		temp = temp.getSuivant();
	}
	
	// PARTIE 2 - PARTIE 2 - PARTIE 2 - PARTIE 2

	pCel1 = null;
	pCel2 = null;
	pCel3 = null;

	// en utilisant les variables nécessaires : ajouter l'élément 35.5 avant la cellule contenant 45.5 sans utiliser pCel1 et pCel2 (mises à null entre temps)
	
	temp = new Cellule (35.5, null);
	temp.setSuivant(debutChaine);
	debutChaine = temp;
	
	// en utilisant les variables nécessaires : ajouter l'élément 75.5 à la fin de la structure 
	// SANS utiliser la valeur de pCel2 (mise à null entre temps)
	
	nouvCel = new Cellule (75.5, null);
	temp = debutChaine ;
	while (temp.getSuivant() != null) {
		temp = temp.getSuivant();
	}
	temp.setSuivant(nouvCel);

	// afficher les différentes valeurs contenues dans la structure chaînée 
	
	System.out.println();
	temp = debutChaine ;
	while (temp != null) {
		System.out.println(temp.getContenu());
		temp = temp.getSuivant();
	}
	
	// PARTIE 3 - PARTIE 3 - PARTIE 3 - PARTIE 3

	// supprimer la cellule contenant 55.5.
	// on supposera ne pas "connaître" sa position. Il faut donc chercher la cellule.
	// on sait que ce n'est pas la première et on sait qu’elle existe !!
	
	temp = debutChaine ;
	while (temp.getSuivant().getContenu() != 55.5) {
		temp = temp.getSuivant();
	}
	temp2 = temp.getSuivant(); // Cellule contenant 55.5 
	temp2 = temp2.getSuivant(); // Cellule suivante de la cellule contenant 55.5
	temp.setSuivant(temp2);

	// supprimer la cellule contenant 75.5.
	// on supposera ne pas "connaître" sa position. Il faut donc chercher la cellule.
	// on sait que ce n'est pas la première et on sait qu’elle existe !!
	// est ce si différent que ci-dessus ?
	
	temp = debutChaine ;
	while (temp.getSuivant().getContenu() != 75.5) {
		temp = temp.getSuivant();
	}
	temp.setSuivant(temp.getSuivant().getSuivant());

	// supprimer la cellule contenant 35.5 (une ligne)
	
	debutChaine = debutChaine.getSuivant();
	
	// afficher les différentes valeurs contenues dans la structure chaînée 
	
	System.out.println();
	temp = debutChaine ;
	while (temp != null) {
		System.out.println(temp.getContenu());
		temp = temp.getSuivant();
	}
	
	//Enfin, chercher un algorithme permettant la suppression d’un élément (ou valeur, appelons-la valASup) n’importe où dans la structure chaînée et éventuellement absent de la structure.
	
	float valASup;
	Cellule pred;
	boolean trouve;
	
	// SOLUTION 1 :
	
	valASup = 55.5F;
	
	temp = debutChaine;
	pred = null;
	trouve = false;
	
	while (temp != null && ! trouve) {
		if (temp.getContenu() == valASup) {
			trouve = true;
		} else {
			pred = temp;
			temp = temp.getSuivant();
		}
	}
	if (trouve) {
		if (pred == null) {
			debutChaine = debutChaine.getSuivant();
		} else {
			pred.setSuivant(temp.getSuivant());
		}
	}
	
	// SOLUTION 2 :
	
	if (debutChaine != null) {
		if (debutChaine.getContenu() == valASup) {
			debutChaine = debutChaine.getSuivant();
		} else {
			trouve = false;
			temp = debutChaine;
			while (temp.getSuivant() != null && ! trouve) {
				if (temp.getSuivant().getContenu() == valASup) {
					trouve = true;
				} else {
					temp = temp.getSuivant();
				}
			}
			if (trouve) {
				temp.setSuivant(temp.getSuivant().getSuivant());
			}
		}
		
	}
	
	// test
	
	System.out.println();
	temp = debutChaine ;
	while (temp != null) {
		System.out.println(temp.getContenu());
		temp = temp.getSuivant();
	}
}
-----
======
endif::prof[]


== Différence tableau "dynamique" <> liste chaînée simple

Donner les différences entre tableaux "dynamiques" et listes chaînées simples dans les situations suivantes :

. Ajout d'un élément en fin.
. Ajout au début.
. Suppression d'un élément (début, milieu, fin).
. Accès élément i.


ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponses
======

.	Ajout d'un élément en fin.
**	Tableau : si plein => créer un autre tableau + recopie, sinon une instruction.
**	Liste chaînée : parcours liste + ajout une cellule. On pourrait aussi conserver la référence de la fin de la liste.
.	Ajout au début.
**	Tableau : si plein => créer un autre tableau + recopie/décalage, si non plein => décalage.
**	Liste chaînée : immédiat => création d'une cellule.
.	Suppression d'un élément (début, milieu, fin).
**	Tableau : décalage dans le tableau (sauf fin) + éventuellement diminution de la taille du tableau.
**	Liste chaînée : rechercher (parcours) le précédent et modification d'une référence
.	Accès élément i.
**	Tableau : immédiat
**	Liste chaînée : parcours des (i-1) éléments précédents.

======
endif::prof[]

endif::todoprof[]

