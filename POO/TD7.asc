:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 7
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

ifndef::todoprof[]
//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]
endif::todoprof[]


//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 4 : Principes de l'héritage et Héritage en Java.
| {objtd}	| *Illustration des concepts de l'héritage.*
| {duree}	| *1 séances* de 0.75h
|======================
// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

. Objectif :

* 	Montrer des traces écran des mécanismes de l'héritage :

**	Transmission des attributs et des méthodes
**	Appel des constructeurs (superclasse et classe courante)
**	Appel des méthodes héritées (super.methode(...) )

. Déroulement a priori :

*	En présentation en mode debug de Eclipse
*	Doit être faisable en 45' en complément de la fin du TD6
====
endif::todoprof[]

ifndef::todoprof[]

== Domaine d'étude

On va s'intéresser aux mécanismes d'héritage mis en oeuvre dans la hiérarchie de classes suivante. 

.Diagramme UML des classes mises en oeuvre (sans multiplicités)
[caption="Figure : "]
image:images/td7.1.png[]

Le code correspondant :

[source,java]
----
public class  Vehicule extends  Object   // Héritage implicite
{
   // Attributs 
   private  String  marque;
   private  int  noSerie;
   private  int  km;

   // Constructeur
   public  Vehicule  ()
   {
       this ("", 0);   // Appel  de Vehicule (String, int)
   }
   public  Vehicule  (String  pMarque,  int  pSerie)
   {
       super () ;  // Implicite : Appel de Object()
       this.marque  =  pMarque; 
       this.noSerie  =  pSerie;
       this.km  =  0; // Implicite
   }

   // Méthodes
   public  String  getMarque()  {  return  this.marque;  }
   public  int  getNoSerie()  {  return  this.noSerie;  }
   public  int  getKm()  {  return  this.km;  }

   public  void  afficher  ()
   {
       System.out.println ("Vehicule " + this.marque + " " + this.noSerie);
   }

   public  void  setNoSerie(int  pSerie)  {  this.noSerie  =  pSerie;  }
   public  void  rouler  (int  nbKm)  {  this.km  =  this.km  +  nbKm; }
} // Fin Classe Vehicule

public class  AutreVehicule  extends  Vehicule  {}

public class  Voiture  extends  Vehicule 
{
   // Attributs 
   private  String  noImmat;
   
   // Constructeurs
   public  Voiture()
   {
       this  ("",  0,  ""); // Appel  de Voiture (String, int, String)
   }
   
   public  Voiture(String  pMarque,  int  pSerie,  String  pImmat)
   {
       super  (pMarque,  pSerie); // Appel  de Vehicule (String, int)
       this.noImmat  =  pImmat;
   }
   
   // Méthodes
   public  String  getNumeroImmat  ()  {  return  this.noImmat; }
   public  void  setNumeroImmat  (String pImmat)  { this.noImmat = pImmat; }

   public  void  afficher  ()
   {
       System.out.println  ("Immatriculation "  +  this.noImmat);
       super.afficher();
   }
} // Fin Classe Voiture

public class  MonoSpace  extends  Voiture
{
   public Monospace () {
       super();
   }
   public  void  afficher  ()
   {
       System.out.println  ("MonoSpace ");
       super.afficher();
   }
   public  void  afficher  (int decalage)
	{
	   int  i;
	   for  (i=0;  i<decalage;  i++)  System.out.print(" ");
	   this.afficher();
   }
} // Fin Classe MonoSpace
----

== Principe de l'héritage

Héritage :

*	« Relation » établie entre classes d’objets.
*	Relatif à la nature des objets.

Principe : mécanisme de transmission des *attributs et des méthodes* de la super-classe VERS sa sous-classe. Pas de transmission des constructeurs.

Exemple : 

ifdef::prof[]
[CAUTION]
.Démonstration
=====
.	Mettre en commentaire : i) le extends dans AutreVehicule, ii)  les appels de méthodes dans le main (méthodes de Vehicule).
.	Faire un debug  => Un objet sans attribut.
.	Enlever les commentaires mis ci-dessus.
.	Faire un debug => Un objet 

*	Avec les attributs de Vehicule (hérités).
*	Les méthodes publiques héritées de Vehicule sont applicables.
*	Pas de constructeur déclaré => il existe un constructeur par défaut

**	AutreVehicule ()
**	appelle Vehicule () (vu plus tard)
=====
endif::prof[]

[source,java]
----
public class  Vehicule 
{
   // ... Le code complet
} 

public class  AutreVehicule  extends  Vehicule  {}

public class TestAutreVehicule
{
	public static void main(String[] args)
	{  
		AutreVehicule av;
	
		av = new AutreVehicule (); // Constructeur par défaut créé automatiquement
	   
		av.setNoSerie(10);// setNoSerie() héritée
	                      // => fait partie de l'interface des objets AutreVehicule
		av.rouler (159); // Idem
		av.afficher ();
		System.out.println (av.getNoSerie());
		System.out.println (av.getKm());

	}
}
----


L'objet créé avec +av+ contient bien tous els attributs déclarés dans la classe Vehicule dont hérite AutreVehicule.

Sur l'objet créé avec +av+ on peut appliquer toutes les méthodes de la classe Vehicule dont hérite AutreVehicule.

== Appel des constructeurs


TOTOTOTOTOTOTTOOTOT

== Principe 

En TP, nous avons déjà travaillé le cas de l'association orientée (navigable dans un seul sens) ou agrégation dans le cas de la classe +AgenceBancaire+ : 

*	la classe +AgenceBancaire+ contient une ArrayList de +Compte+,
*	les objets +Compte+ *ne sont pas* reliés à une +AgenceBancaire+.

Pour mettre en oeuvre une association *navigable*, le principe est toujours de :

*	pour la navigabilité : stocker les "liens" d'une classe vers une autre par un attribut, et ce dans les deux classes,
*	selon la multiplicité : l'attribut aura un type particulier : objet, tableau/ArrayList, ...,
*	il faudra créer des méthodes permettant de maintenir les relations en "état cohérent" par rapport aux multiplicités.

== Premier cas : association 0..1 -- 0..1

On fixe les multiplicités de l'association "Passer" à "0..1" et "0..1" comme indiqué sur le diagramme ci-dessous.

.Diagramme UML des classes mises en oeuvre (multiplicités 0..1)
[caption="Figure : "]
image:images/td6.un.un.png[]

Pour réaliser cette solution, il faut ajouter *a minima* :

*	à la classe Commande : 

** 	un attribut +leCient+ de type Client : Client associé à la Commande ; vaut null si la Commande n'est associée à aucun Client,
**	deux méthodes :

***	+Client getClient ()+ : permet d'obtenir le Client associé à la Commande (null si pas associée à un Client),
***	+void setClient (Client cli)+ : permet de faire un lien entre la Commande et +cli+ ; défait le lien lorsque +cli+ vaut null.

*	à la classe Client : 

** 	un attribut +laCommande+ de type Commande : Commande associée au Client; vaut null si le Client n'est associé à aucune Commande,
**	deux méthodes :

***	+Commande getCommande ()+ : permet d'obtenir la Commande associée à un Client (null si pas associé à une Commande),
***	+void setCommande (Commande comm)+ : permet de faire un lien entre le Client et +comm+ ; défait le lien lorsque +comm+ vaut null.

Deux objets Client cl1 et Commande co1 sont reliés si et seulement si :

*	l'attribut +laCommande+ de cl1 référence co1,
*	l'attribut +leClient+ de co1 référence cl1.

Exemple :

image:images/td6.un.un.liens0.png[]

=== Une version incomplète

Cela donne la première version comme donnée sur la feuille jointe.

Soit le programme :
[source,java]
----
Commande com = new Commande ("com", "01/01/2014");
Client client1 = new Client ("client1", "c1", "ad1", "tel1");
Client client2 = new Client ("client2", "c2", "ad2", "tel2");

client2.setCommande (com);
com.setClient (client2);
client1.setCommande (com);
----

Cette solution simpliste sans aucun contrôle mène le programme ci-dessus à des liens incohérents entre objets Commande et objets Clients. 

.	*Question 1* : Où est l'incohérence ? Dessinez les liens entre objets mis en place.
.	*Question 2* : Donnez des exemples d'autres erreurs potentielles.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse
======
Q1 :

image:images/td6.un.un.liens1.png[]

Q2 :

[source,java]
----
Commande com1 = new Commande ("comm1", "01/01/2014");
Commande com2 = new Commande ("comm2", "01/12/2014");
Client client1 = new Client ("client1", "c1", "ad1", "tel1");
Client client2 = new Client ("client2", "c2", "ad2", "tel2");

com1.setClient (client2);
client1.setCommande (com2);
----

image:images/td6.un.un.liens2.png[]

======
endif::prof[]

=== Une version cohérente : maintient des liens

Pour résoudre le problème et maintenir les liens cohérents : il faut que lors de l'association d'une Commande co à un Client cl :

*	lier la Commande co au Client cl,
*	lier le Client cl à la Commande co,
*	si le Client cl était déjà associé une Commande, l'association de cette Commande vers cl doit être rompue,
*	si la Commande co était déjà associé à un Client, l'association de ce Client vers co doit être rompue.

Il en est de même lorsqu'un Client est associé à une Commande.

*Question* : Pour réaliser ce traitement, écrire :

*	dans la classe Commande, une nouvelle méthode +void associerClient (Client cli)+, qui créera correctement l'association (ou la défera si +cli+ vaut null),
*	dans la classe Client, une nouvelle méthode duale +public void associerCommande (Commande comm)+, qui créera correctement l'association (ou la défera si +comm+ vaut null),.

La méthode +void associerClient (Client cli)+ dans la classe Commande :

*	Si le paramètre cli est null : défaire l'association :

**	Si la Commande est déjà associée à un Client : défaire cette association (lier ce Client à null).
** 	Lier la Commande à null (setClient()).

*	Si le paramètre cli n'est pas null : construire une association :

**	Si cli est associé à une Commande : défaire cette association (lier cette Commande à null).
**	Si la Commande est déjà associée à un Client : défaire cette association (lier ce Client à null).
**	Créer les liens pour associer la Commande et cli (setClient() et setCommande()).

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse
======
[source,java]
----
public void associerClient (Client cli) {
	if (cli == null ){ // Défaire l'association
		if (this.leClient != null) {
			this.leClient.setCommande(null);
		}
		this.setClient(null); // Ou  this.leClient = null ;	    	
	} else { // Créer l'association
		if (cli.getCommande() != null ) {
			cli.getCommande().setClient(null);
		}
		if (this.leClient != null) {
			this.leClient.setCommande(null);
		}
		this.setClient(cli); // Ou this.leClient = cli ;
		cli.setCommande ( this );
	}
}

// La méthode +public void associerCommande (Commande comm)+ de la classe Client est symétrique.

public void associerCommande (Commande comm) {
	if (comm == null) { // Défaire l'association
		if ( this.laCommande != null) {
			this.laCommande.setClient(null);
		}
		this.setCommande(null); // Ou this.laCommande = null; 
	} else { // Créer l'association
		if (comm.getClient() != null ) {
			comm.getClient().setCommande(null);
		}
		if ( this.laCommande != null) {
			this.laCommande.setClient(null);
		}
		this.setCommande(comm); // Ou this.laCommande = comm;
		comm.setClient ( this );
	}
}
----

A Noter : si l'association existait déjà => elle est "effacée" et "recréée".

======
endif::prof[]

== Deuxième cas : association 0..1 -- 0..*

On fixe les multiplicités de l'association "Passer" à "0..1" et "0..*" comme indiqué sur le diagramme ci-dessous.

.Diagramme UML des classes mises en oeuvre (multiplicités 0..1)
[caption="Figure : "]
image:images/td6.un.etoile.png[]

Pour réaliser cette solution, il faut modifier les classes de départ *a minima* :

*	à la classe Commande (pas de changement) : 

** 	un attribut +leCient+ de type Client : Client associé à la Commande ; vaut null si la Commande n'est associée à aucun Client,
**	deux méthodes :

***	+Client getClient ()+ : permet d'obtenir le Client associé à la Commande (null si pas associée à un Client),
***	+void setClient (Client cli)+ : permet de faire un lien entre la Commande et +cli+ ; défait le lien lorsque +cli+ vaut null.

*	à la classe Client : 

** 	un attribut +lesCommandes+ de type ArrayList<Commande> : liste des objets Commande associés éventuellement au Client (0 éléments si pas de Commande),
**	trois méthodes :

***	+void addCommande(Commande comm)+ : lie le Client à la nouvelle Commande +comm+ (ajoute la Commande +comm+ à +lesCommandes+),
*** +void removeCommande (Commande comm)+ : enlève le lien du Client à la Commande +comm+ (retire la Commande +comm+ de +lesCommandes+),
***	+public boolean existeCommande(Commande comm)+ : permet de savoir si le Client est associé à une Commande +comm+ (+comm+ est présent dans +lesCommandes+).
*** on aurait pu imaginer un "getter" de la liste des Commande auxquelles le Client est associé.

Cela donne la première version comme donnée sur la feuille jointe.

Deux objets Client cl1 et Commande co1 sont reliés si et seulement si :

*	l'attribut +lesCommandes+ de cl1 référence co1,
*	l'attribut +leClient+ de co1 référence cl1.

Exemple :

image:images/td6.un.un.liens3.png[]

*Question* : Ecrire :

*	dans la classe Commande une nouvelle méthode +void associerClient (Client cli)+, qui créera correctement l'association (ou la défera si +cli+ vaut null),
*	dans la classe Client, une nouvelle méthode : +void associerCommande (Commande comm)+, pour créer une association,
*	dans la classe Client, une nouvelle méthode : +void defaireAssoCommande (Commande comm)+, pour défaire une association.

Ces trois méthodes doivent permettre de construire et défaire correctement les liens entre objets afin de maintenir les associations cohérentes (éviter les problèmes rencontrés dans le cas précédent).

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse
======
La méthode +void associerClient (Client cli)+ dans la classe Commande réalise le traitement :

*	Si le paramètre cli est null : défaire l'association :

**	Si la Commande est déjà associée à un Client : enlever la Commande de ce Client.
** 	Lier la Commande à null (setClient()).

*	Si le paramètre cli n'est pas null : construire une association :

**	Si la Commande est déjà associée à un Client : enlever la Commande de ce Client.
**	Créer les liens pour associer la Commande et cli (setClient() et addCommande()).

[source,java]
----
class Commande {
	// ...
	public void associerClient (Client cli) {
	    if (cli == null ){ // Défaire l'association
	        if (this.leClient != null) {
	        	this.leClient.removeCommande(this);
	        }
	        this.setClient(null); // Ou this.leClient = null ;	    	
	    } else { // Créer l'association
	    	if (this.leClient != null) {
	    		this.leClient.removeCommande(this);
	    	}
	    	this.setClient(cli); // Ou this.leClient = cli;
	    	cli.addCommande(this);
	    }
	}	
}

//A Noter : si l'association existait déjà => elle est "effacée" et "recréée".

----

La méthode +public void associerCommande (Commande comm)+ dans la classe Client réalise le traitement :

*	Si le paramètre comm est null : ne rien faire.
*	Si comm est déjà enregistrée comme Commande de ce Client : ne rien faire.
*	Si comm est associé à un Client : défaire cette association (removeCommande()).
*	Créer les liens pour associer le Client et comm (setClient() et addCommande()).

[source,java]
----
class Client {
	// ...	
	public void associerCommande (Commande comm) {
	    if (comm != null) {
	    	if(!this.lesCommandes.contains(comm)) { // Peut être enlevé
			                                        // Efface et recrée l'association
		        if (comm.getClient() != null ) {
		        	comm.getClient().removeCommande(comm);
		        }
		        this.lesCommandes.add ( comm ); // Ou this.addCommande(comm);
		        comm.setClient ( this );
	    	}
	    }
	}
}
----

La méthode +public void defaireAssoCommande (Commande comm)+ dans la classe Client :

*	Si le paramètre comm est null : ne rien faire.
*	Si la comm N'est PAS enregistrée comme Commande de ce Client : ne rien faire.
*	Défaire les liens entre le Client et comm (removeCommande() et setClient(null)).


[source,java]
----
class Client {
	// ...	
	public void defaireAssoCommande (Commande comm) {
	    if (comm != null) {
	    	if(this.lesCommandes.contains(comm)) {
		        this.lesCommandes.remove ( comm ); // Ou this.removeCommande(comm);
		        comm.setClient ( null );
	    	}
	    }
	}
}
----
======
endif::prof[]

== Remarques finales

Toutes les méthodes sont déclarées publiques et donc sont accessibles aux clients, en particulier +setClient()+, +setCommande+, et +addCommande()/removeCommande()+ en version 0..*.

Notons que les clients de la classe DOIVENT maintenant utiliser UNIQUEMENT les méthodes +associerClient()+ et +associerCommande()+ (et +defaireAssoCommande()+ en version 0..*).

Pour cela 3 solutions :

*	Documenter clairement chaque classe et chaque méthode pour en expliquer l'usage.
*	Utiliser des visibilités autres que public qui résolvent le problème ; lié au langage et non étudié à ce jour.
*	Trouver des algorithmes pour +associerClient()+ et +associerCommande()+ ne réclamant pas les méthodes setters qui posent problème ; complexe à mettre en oeuvre mais possible. 

Enfin notons que les méthodes +associerClient()+ et +associerCommande()+ (et +defaireAssoCommande()+ en version 0..*) devraient se nommer +passeePar (Client c)+ dans la classe Commande et +passer(Commande c)+ dans la classe Client. 

endif::todoprof[]

