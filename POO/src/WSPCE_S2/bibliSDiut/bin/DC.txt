@startuml

class ArrayList {
	-java.util.ArrayList<E> theRealArrayList
	+ArrayList(int initialCapacity)
	+ArrayList()
	+ArrayList(ArrayList<E> ale)
	+int size()
	+boolean isEmpty()
	+boolean contains(Object o)
	+int indexOf(Object o)
	+int lastIndexOf(Object o)
	+E[] toArray(E[] a)
	+E elementAt(int index)
	+E setElementAt(int index, E element)
	+void inserElementAt(int index, E element)
	+void add(E e)
	+E removeElementAt(int index)
	+boolean remove(E element)
	+void clear()
	+void addAll(ArrayList<E> ale)
	+void addAll(int index, ArrayList<E> ale)
	+Iterator<E> iterator()
	+ListIterator<E> listIterator()
	+boolean removeAll(ArrayList<E> ale)
	+ArrayList<E> subList(int fromIndex, int toIndex)
	+void trimToSize()
}

class LinkedList {
	-java.util.LinkedList<E> theRealLinkedList
	+LinkedList()
	+LinkedList(LinkedList<E> lle)
	+E getFirst()
	+E getLast()
	+E removeFirst()
	+E removeLast()
	+void addFirst(E e)
	+void addLast(E e)
	+int size()
	+void addEndAll(LinkedList<E> lle)
	+void addBeginAll(LinkedList<E> lle)
	+void clear()
	+ListIterator<E> listIterator()
	+Iterator<E> descendingIterator()
	+Iterator<E> iterator()
	+E[] toArray(E[] a)
}

abstract class Stack <E> {
	+E peek()
	+void push(E e)
	+E pop()
	+int size()
}

class StackAsLinkedList <E> {
	-sd.iut.implementations.LinkedList<E> theRealStack
	+StackAsLinkedList()
	+E peek()
	+void push(E e)
	+E pop()
	+int size()
}

Stack <|-- StackAsLinkedList

abstract class Queue <E> {
	#int actualSize
	#int maximumSize
	+Queue(int maxSize)
	+void add(E e)
	+boolean offer(E e)
	+E remove()
	+E poll()
	+E element()
	+E peek()
	+int size()
	+boolean isEmpty()
	+boolean isFull()
}

class QueueAsLinkedList <E> {
	-sd.iut.implementations.LinkedList<E> theRealStack
	+QueueAsLinkedList(int maxSize)
	+void add(E e)
	+boolean offer(E e)
	+E remove()
	+E poll()
	+E element()
	+E peek()
}

Queue <|-- QueueAsLinkedList


@enduml