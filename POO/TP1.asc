:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 1
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'entête -----------
ifndef::slides[]

ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD1. S1, notion de type, variables simples, tableaux.
| {objtd}	| *Apprendre à utiliser un debugger*.
| {duree}	| *2 séance* de 1,5h sur machine
| {depot}	| CR à remplir TODOTODO
|======================
====
endif::prof[]

[TIP]
====
- Lien sur le {sitecours}.
====
endif::slides[]

== Préambule

Dans ce premier TP nous allons principalement viser à utiliser un outil de deboggage (déboggueur ou débugguer) afin de :

- comprendre des programmes déjà écrits,
- corriger des incohérences algorithmiques de programmes déjà écrits,
- déverminer des programmes déjà écrits,

Pour cela nous allons utilsier l'IDE {eclipse} (version {eclipseVersion}, téléchargeable ici {eclipsedownload}).
Mais les autres TPs se feront sous Scite car l'usage est plus simple pour les TPs (liens JUnit, liens avec des fichiers .class existants, disponibilité chez vous, sauvegardes des programmes développés, ...)


ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
Eclipse est un Environnement Intégré de Développement. Un tel outil :

- permet de travailler dans plusieurs langages,
- offre plusieurs outils travaillant simultanément (fenêtres synchronisées, ...),
- permet de développer des projets très complexes,
- s'interface avec des outils externes (svn, git, Maven, ...),
- et plus encore.
====
endif::prof[]

=== Lancement

. Lancer Eclipse depuis le bureau.
. Il ouvre un *workspace*, espace de travail où Eclipse range les fichiers.
* Si Eclipse demande où est le workspace -> Indiquer E:\Eclipse
+
*TODO : Image écran*
+
. Créer un *projet* 
* File > New > Java Project
* Donner un nom de projet -> +testDebug+
* Valider
+
*TODO : Image écran*
+
. Créer une classe de base *ClasseEssai* dans laquelle on fera par la suite des copier coller pour les tests.
* File > New > Class
* Donner un nom de classe -> +ClasseEssai+
* Valider
+
*TODO : Image écran*

A partir de maintenant :

* copier/coller le code à tester dans la classe ClasseEssai,
* faire les tests : run ou debug.

=== Premier Test

. Ecrire une méthode main() affichant "Hello World" pour tester.
+
[source,java]
----
public static void main(String argv[]) {
	System.out.println ("Hello World");
}
----
. Sauvegarder.
. Chercher comment compiler -> s'est déjà fait à la sauvegarde.
* Modifier le code pour générer une erreur de compilation.
* Sauvegarder -> croix rouge au niveau de l'erreur.
* Corriger le code et sauvegarder à nouveau.
. Exécuter : cliquer sur le petit icône vert (une flèche)
. Fenêtre "Console" -> le résultat.
* La fenêtre "Console" n'apparaît pas ? -> Menu Window > Show View > Console

=== Second test et Debug

. Modifier le code de la classe comme suit.
+
[source,java]
----
public static double plusPlus (double a, int d) {
	double res;
	
	res = a + d + 1;
	return res;
}
public static void main(String argv[]) {
	double ageDebut;
	int anneesEtudes;
	double ageFinEtudes;
	
	Scanner s = new Scanner (System.in);
	
	System.out.print ("Votre age de début d'études : ");
	ageDebut = s.nextDouble();
	System.out.print ("Nombre d'années d'études : ");
	anneesEtudes = s.nextInt();
	ageFinEtudes = ClasseEssai.plusPlus (ageDebut, anneesEtudes);
	System.out.print ("Votre age en fin de parcours détudes : " + ageFinEtudes);
}
----
+
[source,java]
----
// Ne pas oublier :

import java.util.Scanner;
----
. Sauvegarder.
. Exécuter.
+
ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
Nous allons maintenant débugguer cette application. Il s'agira de pouvoir :

* mettre un *point d'arrêt* ou plusieurs dans le programme?
* à partir de cet endroit on pourra au runtime :
** consulter l'état des variables du sous-programme en cours d'exécution?
** avancer dans l'exécution ?
====
endif::prof[]
+
. suite

== Avant de partir

. Enregistrer vos programmes sous *hardy*
. Déposer le compte rendu
. N'oubliez-pas de vous déconnecter

