:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 2 - Eléments de Solution
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 1 : approche objet. S1.
| {objtd}	| *Utiliser des objets en Java*.
| {duree}	| *1 séance* de 1,5h
|======================

// // | {depot}	| -


ifndef::todoprof[]

== Utilisation de classe

=== Exercice Pile

Soit la classe Pile suivante dont on ne donne que les constructeurs et les méthodes (sans les corps) :

[source, java]
-----
class Pile {
	private String[] elements;
	private int indiceSommet;

	public Pile() { ... }
	public Pile(int pfTaille) { 
		this.elements = new String [pfTaille];
		this.indiceSommet = -1
	}

	public boolean estVide() { ... }

	public void empiler(String pfElement) throws Exception { ... }

	public void depiler() throws Exception { ... }
	
	public String sommet() throws Exception { ... }
} 
-----

A faire :

. 	Étudier le code de la classe Pile.
.	Ecrire (feuille jointe) un programme main() utilisant *obligatoirement des objets +Pile+* permettant : a) de saisir 10 chaînes de caractères, b) qui sépare d'un côté celles plus petites que "moto" et de l'autre celles plus grandes, et c) qui affiche ces deux "sous-listes" dans l'ordre inverse de leur saisie.
+ 
Exemple : saisie de "a" "b" "n" "o" "p" "c" "m" "d" "e" "q" affichera :
+ 
=> e d m c b a
+
=> q p o n

NB : pour comparer deux chaînes, on dispose de la méthode suivante dans la classe +String+ :

*	+public int compareTo (String otherString)+ : compare la chaîne avec +otherString+ et renvoie +0+ si elles sont égales, une valeur <0 si la chaîne est plus petite que +otherString+, une valeur >0 si la chaîne est plus grande que +otherString+.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
public class Test {
	public static void main (String[] argv) throws Exception {
		Scanner sc = new Scanner(System.in);
		String ch;
		
		Pile moins, plus;
		moins = new Pile(10);
		plus = new Pile(10);
		
		for (int i=0; i<10; i++) {
			ch = sc.next();
			if (ch.compareTo("moto") >= 0)
				plus.empiler(ch);
			else
				moins.empiler(ch);
		}
		
		System.out.println();
		while (! moins.estVide()) {
			ch = moins.sommet();
			System.out.println(ch);
			moins.depiler();
		}
		
		System.out.println();
		while (! plus.estVide()) {
			System.out.println(plus.sommet());
			plus.depiler();
		}
	}
}
-----
====
endif::prof[]

[[sujetdevinette]]
=== Exercice Devinette

Nous allons utiliser une classe Devinette pour jouer.

Au jeu de la "devinette" :

* On suppose une valeur entière à trouver, tirée au sort par le programme, entre une borne basse (10<>20) et haute (40<>50).
* L'utilisateur cherche la valeur par essais successifs, la machine répondant à chaque coup si le nombre recherché est supérieur ou inférieur au nombre soumis.
* Le jeu s'arrête quand la valeur est trouvée.

Exemple d'exécution :
-----
Coup : (13-49) : 33 // <1>
Plus Haut ... Coup : (13-49) : 40 // <2>
Plus Haut ... Coup : (13-49) : 49 // <3>
Plus Bas ... Coup : (13-49) : 48
Plus Bas ... Coup : (13-49) : 41
Plus Haut ... Coup : (13-49) : 47
Plus Bas ... Coup : (13-49) : 44
Plus Haut ... Coup : (13-49) : 46
Bravo, en 8 coups.
-----
<1> Saisie utilisateur de 33
<2> Saisie utilisateur de 40
<3> ...

A faire :

. Étudier la documentation de la classe Devinette (constructeurs/méthodes).
. Un objet Devinette, instance de la classe Devinette, est un objet qui :

* 	lors de sa création, détermine des bornes min et max au jeu et choisit la valeur à chercher,
** 	tirer au sort la borne supérieure (40<>50) et la borne inférieure (10<>20) du jeu.
**	tirer au sort la valeur à rechercher entre les bornes choisies ci-dessus.<BR>
 Exemple : borne inf 12, bone sup 47, valeur à chercher 22.<BR>
* dispose de méthodes permettant de jouer et d’interroger l’état de la partie (nombre de coups joués, résultat d’un coup, ...).

. Écrire un programme main permettant de faire une partie de devinette en utilisant la classe Devinette : tirage au sort des valeurs, demander une valeur comprise entre les deux bornes et répondre à l'utilisateur sur la validité de son coup, afficher « partie gagnée » à la fin ainsi que le nombre de coups joués (essais).
. Écrire un autre programme main permettant de jouer successivement 3 parties de devinette. Écrire d'abord un sous-programme +void jouer (Devinette d)+ permettant de "dérouler" une partie de devinette avec l'objet d en paramètre. Puis écrire le programme demandé (quelques lignes).

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
import java.util.Scanner;
import classestps.*;

public class TestDevinette
{
	private static void jouer (Devinette d) throws ErreurExecutionDevinette
	{
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		d.soumettreCoup (val);
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas()) 
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			d.soumettreCoup (val);
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
	}
	public static void main2 () throws ErreurExecutionDevinette
	{
		Devinette d;
		int i;
		
		for (i=0; i<3; i++)
		{
			d = new Devinette() ;
			TestDevinette.jouer (d);
		}
	}
	public static void main1 () 
	{
		Devinette d;
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		d = new Devinette() ;
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		try {
			d.soumettreCoup (val);
		} catch (ErreurExecutionDevinette e) {
			System.out.println(e);
			System.out.println("Bug !!");
		}
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas())
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			try {
				d.soumettreCoup (val);
			} catch (ErreurExecutionDevinette e) {
				System.out.println(e);
				System.out.println("Bug !!");
			}
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
		
		// d.soumettreCoup (20); // Plantage car partie finie ...
	}
	public static void main (String[] argv) throws ErreurExecutionDevinette
	{
		System.out.println("Exo 1");
		TestDevinette.main1();
		
		System.out.println("Exo 2");
		TestDevinette.main2();
	}
}
-----
====
endif::prof[]

/////////////////////////////////////////////

[[sujetcompte]]
=== Exercice

Nous reprenons une classe Compte, <<doccompte, cf. ci-après>>.

Compléter le programme main() suivant afin de :

. Créer un Compte au nom de "César" avec un numéro, des débits/crédits de 0.
. Créer un Compte au nom de "Brutus" avec un numéro, des débits de 100, des crédits de 200.
. Déposer 100 sur le compte de "César".
. Retirer 50 sur le compte de "Brutus".
. Afficher à l'écran les comptes de "César" et "Brutus".
. Créer un tableau *tabC* de 5 comptes (éléments de type Compte).
. Ranger dans le tableau les comptes suivants :

* [0] : le compte de "César"
* [1] : le compte de "Brutus"
* [2] : un nouveau compte au nom de "Astérix"
* [3] : un nouveau compte au nom de "Obélix"
* [4] : un nouveau compte au nom de "Idéfix"

. Trier le tableau tabC par ordre des propriétaires.
. Afficher le tableau
. Créer un tableau d'index du tableau tabC. Ce tableau permettra d'accéder aux comptes dans l'ordre de leur numéro de compte.

* Comment s'y prendre ? tableau d'entiers ? tableau de Compte ?
* Réfléchir à l'implantation mémoire java

. Afficher les comptes dans l'ordre de leurs numéros de compte.
. Réaliser un second index similaire et les traitement ci-dessus avec maintenant un tableau d'entiers contenant les indices de tabC.

[TIP]
.Aide
=====
Pour comparer 2 chaînes de caractères, il existe une méthode sur la classe String : +int compareTo (String s)+

Exemple :  +if (chaine1.compareTo(chaine2) > 0) ...+

qui renvoie : 0 si les 2 chaînes sont égales, une valeur > si chaine1 "plus grande" que chaine2, une valeur négative sinon.
=====

[source, java]
-----
public class Test {
	public static void main(String[] argv)  {
		Compte c1, c2;
		Compte tabC [];
		Compte indexTabC [];
		int i, j;
-----

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
public class Test {
	public static void main(String[] argv)  {
		Compte c1, c2;
		Compte tabC [];
		Compte indexTabC [];
		int i, j;
		
		c1 = new Compte ("01", "César"); // <1>
		c2 = new Compte ("02", "Brutus", 100, 200); // <2>
		
		c1.deposer (100); // <3>
		c2.retirer (50); // <4>
		
		c1.afficher(); // <5>
		c2.afficher();
		System.out.println();
		
		tabC = new Compte [5]; // <6>
		tabC[0] = c1; // <7>
		tabC[1] = c2;
		tabC[2] = new Compte ("03", "Astérix");
		tabC[3] = new Compte ("04", "Obélix");
		tabC[4] = new Compte ("05", "Idéfix");
		
		for (i=0; i<tabC.length-1; i++) {  // <8>
			for (j=i+1; j<tabC.length; j++) {
				if (tabC[i].getProprietaire().compareTo(tabC[j].getProprietaire()) > 0) {
					c1 = tabC[i];   tabC[i] = tabC[j];  tabC[j] = c1;
				}
			}
		}
		for (i=0; i<tabC.length; i++) { // <9>
			tabC[i].afficher();
		}
		System.out.println();
		
		indexTabC = new Compte[5]; // <10>
		for (i=0; i<tabC.length; i++) {
			indexTabC[i] = tabC[i];
		}
		for (i=0; i<indexTabC.length-1; i++) {
			for (j=i+1; j<indexTabC.length; j++) {
				if (indexTabC[i].getNumCompte().compareTo(indexTabC[j].getNumCompte()) > 0) {
					c1 = indexTabC[i];   indexTabC[i] = indexTabC[j];  indexTabC[j] = c1;
				}
			}
		}
		for (i=0; i<tabC.length; i++) { // <11>
			indexTabC[i].afficher();
		}
		System.out.println();
		
		int index2[] = new int[5]; // <12>
		int temp;
		for (i=0; i<tabC.length; i++) {
			index2[i] = i;
		}
		for (i=0; i<index2.length-1; i++) {
			for (j=i+1; j<index2.length; j++) {
				if (tabC[index2[i]].getNumCompte().compareTo(tabC[index2[j]].getNumCompte()) > 0) {
					temp = index2[i];   index2[i] = index2[j];  index2[j] = temp;
				}
			}
		}
		for (i=0; i<tabC.length; i++) {
			tabC[index2[i]].afficher();
		}
		System.out.println();
	}
}
-----
====
endif::prof[]
////////////////////////////////////////////

ifndef::impression[]

[[docdevinette]]
=== Documentation classe Devinette

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<<sujetdevinette, Retour sujet>>

include::./TD2_common.asc[]


endif::impression[]

endif::todoprof[]

