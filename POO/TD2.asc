:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 2
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 1 : approche objet. S1.
| {objtd}	| *Utiliser des objets en Java*.
| {duree}	| *1 séance* de 1,5h
|======================

// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

. Objectif :

* Retour sur les méthodes, signatures
* Préciser les éléments "pur objet"
** Attributs private
** Méthodes publiques, certaines private si on veut
** On utilise un objet sans connaître l'implémentation.

. Au besoin inverser exo 1 après le 3 
. Si trop court : finir le TD1 dernière partie si besoin (mais sera vu en TPs)
====
endif::todoprof[]

ifndef::todoprof[]

== Préliminaires et rappels

////
=== Déclaration de sous-programmes en Java (principes)
////

=== En-tête de sous-programme en Java

////
Un en-tête de sous-programme définit :

. une spécification pour le programmeur qui doit développer le sous-programme,
. une "mode d'emploi" pour le programmeur qui doit utiliser ce sous-programme.
////

Un en-tête de sous-programme définit :

- l'identificateur du sous-programme,
- le nombre ET le type ET l'ordre des paramètres formels : une suite de couples +type  identificateur+ séparés par des virgules,
- un éventuel type de valeur retournée, +void+ si rien n'est retourné.
+
Notez que +void+, du point de vue du compilateur,  ne veut pas dire "rien" mais est un type (il existe une classe Void) qui n'a aucune valeur et veut donc dire "retourne aucune valeur".

La *signature ou prototype* du sous-programme est ce qui permet de le reconnaître. Elle est formé de :

- l'identificateur du sous-programme,
- le nombre ET le type ET l'ordre des paramètres formels.

Exemple :
[source, java]
-----
/**
* Calcul de la puissance puiss de la valeur v (calcul de v puissance puiss).
* Ne fonctionne que si puiss >= 0
*
* @param    v      valeur dont on cherche la puissance
* @param    puiss  puissance à laquelle on va élever v
* @return   v élevé à la puissance puiss
**/
double  puissance (double v, int puiss) {
	double resultat ;
	...
	return resultat;
}
-----

=== Appel d'un sous-programme en Java

L'appel d'un sous-programme fait intervenir :

- l'identificateur du sous-programme,
- des paramètres effectifs en nombre ET ordre ET type correspondant au prototype du sous-programme.

Les paramètres effectifs peuvent être toute expression donnant une valeur du type attendu.

Lors de l'appel, d'éventuelles conversions de types, si elles sont nécessaires, peuvent intervenir. Les plus "classiques" sont les conversions des types de base : char -> int -> long -> float -> double.

*Exercice* Pour les  appels suivants, expliquez si : i) l'appel est correct, ii) les calculs effectués pour réaliser l'appel. On considérera l'écriture des  appels comme correcte même si nous reviendrons plus tard sur la syntaxe exacte d'appel.

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10.5, 1+1);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Oui
* Calculs - Calcul de 1+1 (=2), appel du sous-programme, retour puis affectation à x.
======
endif::prof[]

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10.5, 2, 2+2);
x = puissance (10.5);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Aucun des deux, trop ou manque de paramètres.
* Calculs -
======
endif::prof[]

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10, 2);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Oui
* Calculs - Conversion de 10 de int en double (stocké localement par le compilateur) puis appel de fonction et calcul.
======
endif::prof[]

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10.5, 2.5);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Non car 2.5 et un double
* Calculs - Correction : x = puissance (10.5, *(int)2.5*); ou x = puissance (10.5, 2);
======
endif::prof[]

////
. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
int val;
val = puissance (10, 2);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Non val est de type int donc l'affectation n'est pas ok.
+
Java ne sait faire automatiquement que des promotions byte/char -> int -> long -> float -> double.
+
Ici on peut écrire : +val = *(int)*  puissance (10, 2);+
+
Mais risque de perte de précision avec des vrais paramètres double (pas dans notre cas).

* Calculs (suite à la correction) - +val = (int)  puissance (10, 2);+
** Conversion de 10 de int en double (stocké localement par le compilateur),
** puis appel de fonction et calcul,
** puis conversion du résultat de double en int (perte de la partie décimale).
======
endif::prof[]
////

////
=== Méthodes static en Java

Il existe des sous-programmes qui existent "en eux-mêmes". On peut les décrire et on souhaite pouvoir les programmer pour les appeler. Exemple : sinus, cosinus, calcul de puissance, obtenir l'heure du système, ...

En java :

. Tout identificateur déclaré ne peut l’être qu’à l’intérieur d’une unité de définition appelée classe.
. On peut déclarer un sous-programme rattaché à une classe, appelée méthode *de classe* ou méthode *statique*.
. Elle s'écrit précédée du mot-clef +*static*+
. Pour l'appeler, il faut utiliser le nom de la classe devant l'appel : +NomDeClasse . identificateurmethode(...)+

Exemple :
[source, java]
-----
public class ClasseLibrairie {
	/**
	* Calcul de la puisssance puiss de la valeur v (calcul de v puissance puiss).
	* Ne fonctionne que si puiss >= 0
	*
	* @param    v      valeur dont on cherche la puissance
	* @param    puiss  puissance à laquelle on va élever v
	* @return   v      elévé à la puissance puiss
	**/
	public static double  puissance (double v, int puiss) {
		double resultat=0 ;
		...
		return resultat;
	}	
	public static void main(String argv[]) throws Exception  {
		double x;
		x = ClasseLibrairie.puissance (10.5, 2);
	}
}
-----

Par la suite, lorsque nous écrirons des classes, on séparera clairement :

- des classes "librairies" qui définissent uniquement des méthodes statiques. Ex Math et System ou une classe contenant une fonction main().
- des classes décrivant des objets définissant uniquement des méthodes non statiques.

Cette dichotomie que l'on recherchera ne sera pas tous toujours possible ou souhaitable. Nous l'appliquerons le plus possible. Exception : les sujets de TD ou TP (pour diminuer le volume des exemples).

[TIP]
=====
Notons que les librairies Java mélangent souvent les deux type de méthodes et d'attributs.
Faire attention en lisant la documentation.
=====

Autre exemple :
[source, java]
-----
public static void main(String argv[])  {
	double x, y, xpowy;
	long debut, lg;
	
	debut = System.currentTimeMillis();  // instant de démarrage en milisecondes 
	                                     // calculé depuis January 1, 1970 UTC - 0h.)
	x = 100 * Math.random();   // Tirage au sort d'un nombre entre 0 et 100 
	y = 10 * Math.random();    // Tirage au sort d'un nombre entre 0 et 10
	xpowy = Math.pow(x, y);    // Calcul de x puissance y
	System.out.println("Résultat : " + x + " pow " + y + " => " + xpowy);
	lg = System.currentTimeMillis() - debut; // Calcul durée du programme
	System.out.println("Durée : " + lg);
}

Exécution :
 Résultat : 80.6991463652636 pow 1.7813938064916623 => 2493.931501272706
 Durée : 3
 Exit code: 0
-----

=== Constantes (attributs static)

De la même manière, on peut aussi définir des attributs de classe (static) : attributs accessibles à partir de la classe.

Ils sont très souvent déclarés *public* (accessibles), *static* (de classe), *final* (non modifiables).

Exemple : Math.PI -> Valeur de approchée de pi (double) : 3,141592...

Exemple : Math.E -> Valeur de approchée de e (double) : e = 2,718281...


=== Autres cas particuliers (attributs static)

Certaines classes définissent des attributs de classe (static) "modifiables", mais à ne modifier qu'avec précaution.

Ils donnent accès à des ressources systèmes.

Exemple : 

* System.out -> accès au dispositif de sortie standard par défaut du programme (objet de la classe PrintStream).
* System.in -> accès au dispositif d'entrée standard du programme (objet de la classe BufferedInputStream).
* System.err -> accès au dispositif de sortie d'erreur standard du programme (objet de la classe PrintStream).

----------
System.in
|-----|     Une classe (un indicateur -> majuscule)
|---------| Un attribut de la classe (indicateur -> pas de parenthèses après le "in").
----------
////

== Utiliser des objets en Java

=== Rappel objets

Objet = identité + état + comportement

* Identité : Un objet forme un tout identifiable
* Un état : ensemble de propriétés/caractéristiques (attributs) ayant une valeur
* Comportement : ensemble des traitements (méthodes) que peut accomplir l’objet si on le lui « demande »

image:images/td2objetsencapsules.png[]

Par principe :

* Un objet *encapsule* son état
** Etat : accessible que par l’objet lui-même (méthodes)
** Principe objet majeur à respecter => *abstraction*
* Un objet reçoit des *messages* => appel de méthode appliqué à l'objet
* Un objet est créé à partir d'une classe qui fournit sa description.

Un objet reçoit des messages => appel de méthode appliqué à l'objet

* Idée : c'est l'objet qui est "actif" et qui réagit (exécute la méthode)
* On peut "penser" objet comme cela ... 
* ... mais la mise en oeuvre est différente.

=== Principe des classes en Java

Pour décrire une classe d'objet en Java, on définit une classe qui déclare :

* des attributs pour les objets (private),
* des méthodes pour les objets (public) + éventuellement des méthodes internes (private),
** des méthodes observateurs (appelées aussi pour certaines getters),
** des méthodes transformateurs (appelées aussi pour certaines setters),
* un/des constructeurs (public) pour construire des objets.

Exemple :

image:images/td2classpersonne.png[]

[source, java]
-----
class Personne
{
		// Attributs 
		private  String nom;
		private  int age;

	// Constructeurs
	public  Personne ()  { ... }
	public  Personne (String pNom)   { ... }
	public  Personne (String pNom, int pAge) { ... }
   
	// Méthodes
	public  String getNom () { ... }
	public  int getAge ()   { ... }
	public  void setNom (String nouvNom) { ... }
	public  void setAge (int nouvAge)  { ... }
	public  String toString() { ... } 
} // Fin Classe Personne
-----

Principes de syntaxe :

. Attributs : *toujours* déclarés private. Règle à appliquer pour construire des objets (et non des enregistrements).
. Constructeur :
* Porte le nom de la classe.
* Pas de valeur de retour.
* Plusieurs constructeurs possibles (surcharge) : différenciés par leur signature.

La classe définit un type :

. On peut déclarer des variables de ce type.
. Ces variables contiennent des *références* vers des objets de ce type (une référence est typée).

=== Création d'objet

Utiliser l'opérateur *new* : Exemple +new Personne ("Jean", 39);+

* réserve la mémoire nécessaire : environ le nombre d'octets pour stocker les attributs définis par la classe,
* initialise chaque attribut (+0+ pour les nombres, +false+ pour les booleans, +null+ pour les objets et les tableaux),
* applique le constructeur spécifié (signature à partir des paramètres),
* *renvoie la référence* de l'objet créé dans le tas.

----------
 new  Personne  ("Jean", 39)
|-------------| ..................> L'objet à créer -> avec les attributs définis par la classe

 new  Personne  ("Jean", 39)
     |----------------------| ....> Signature du constructeur à appliquer -> Personne (String, int)
----------

Autre façon de créer des objets ? oui, méthode clone() appliquée à un objet ... mais sera vu plus tard.

=== Identité d'objet en Java

L'identité d'objet en Java est automatique -> c'est la référence de l'objet créée par *new*.

Elle est unique et permet de désigner l'objet indépendamment des valeurs des attributs.

Les variables objet contiennent la référence vers l'objet ... donc son identité.

=== Envoi de message

Syntaxe : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +expressionReferenceObjet *.* identificateurMethode *(* [parametreEffectif1, ...] *)*+

=== Exemple

[source, java]
-----
class ClasseEssai
{
	public static  void main (String  argv[]) {       
		int i;
		Personne  p1, p2, p3;
		Personne tabPers [];

		p1 = new Personne ("Jean", 39);
		p2 = new Personne ("Jean", 39);
		p3 = new Personne ("Pierre");
	   
		p3.setAge (45);
		p3.setNom ("Durand");
		
		System.out.println (p1.toString());
		System.out.println (p1.getNom () );
		System.out.println (p2);   // Implicitement fera appel à p2.toString()
		System.out.println (p3);   // Idem
			 
		if  (p1 != p2) 
			System.out.println ("Non Egalité des références");

		if (p1.getNom().equals(p2.getNom()))
			System.out.println ("Egalité des noms des Personnes");

		tabPers = new Personne [3];
		tabPers[0] = p1;
		tabPers[1] = p2;
		tabPers[2] = new Personne ("Albert", 30);
	   
		for (i=0; i<tabPers.length; i++) {
			System.out.println (tabPers[i]);
		}
	}// Fin Main
}// Fin Classe ClasseEssai
-----

== Utilisation de classe

=== Exercice Pile

Soit la classe Pile suivante dont on ne donne que les constructeurs et les méthodes (sans les corps) :

[source, java]
-----
class Pile {
	private String[] elements;
	private int indiceSommet = -1;

	public Pile() { ... }

	public Pile(int pfTaille) { ... }

	public boolean estVide() { ... }

	public void empiler(String element) throws Exception { ... }

	public void depiler() throws Exception { ... }
	
	public String sommet() throws Exception { ... }
} 
-----

A faire :

. 	Étudier le code de la classe Pile.
.	Ecrire (feuille jointe) un programme main() utilisant *obligatoirement des objets +Pile+* permettant : a) de saisir 10 chaînes de caractères, b) qui sépare d'un côté celles plus petites que "moto" et de l'autre celles plus grandes, et c) qui affiche ces deux "sous-listes" dans l'ordre inverse de leur saisie.
+ 
Exemple : saisie de "a" "b" "n" "o" "p" "c" "m" "d" "e" "q" affichera :
+ 
=> e d m c b a
+
=> q p o n

NB : pour comparer deux chaînes, on dispose de la méthode suivante dans la classe +String+ :

*	+public int compareTo (String otherString)+ : compare la chaîne avec +otherString+ et renvoie +0+ si elles sont égales, une valeur <0 si la chaîne est plus petite que +otherString+, une valeur >0 si la chaîne est plus grande que +otherString+.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
public class Test {
	public static void main (String argv[]) throws Exception {
		Scanner sc = new Scanner(System.in);
		String ch;
		
		Pile moins, plus;
		moins = new Pile(10);
		plus = new Pile(10);
		
		for (int i=0; i<10; i++) {
			ch = sc.next();
			if (ch.compareTo("moto") >= 0)
				plus.empiler(ch);
			else
				moins.empiler(ch);
		}
		
		System.out.println();
		while (! moins.estVide()) {
			ch = moins.sommet();
			moins.depiler();
			System.out.println(ch);
		}
		
		System.out.println();
		while (! plus.estVide()) {
			System.out.println(plus.sommet());
			plus.depiler();
		}
	}
}
-----
====
endif::prof[]

[[sujetdevinette]]
=== Exercice Devinette

Nous allons utiliser une classe Devinette pour jouer, <<docdevinette, cf. ci-après>>.

Au jeu de la "devinette" :

* On suppose une valeur entière à trouver, tirée au sort par le programme, entre une borne basse (10<>20) et haute (40<>50).
* L'utilisateur cherche la valeur par essais successifs, la machine répondant à chaque coup si le nombre recherché est supérieur ou inférieur au nombre soumis.
* Le jeu s'arrête quand la valeur est trouvée.

Exemple d'exécution :
-----
Coup : (13-49) : 33 // <1>
Plus Haut ... Coup : (13-49) : 40 // <2>
Plus Haut ... Coup : (13-49) : 49 // <3>
Plus Bas ... Coup : (13-49) : 48
Plus Bas ... Coup : (13-49) : 41
Plus Haut ... Coup : (13-49) : 47
Plus Bas ... Coup : (13-49) : 44
Plus Haut ... Coup : (13-49) : 46
Bravo, en 8 coups.
-----
<1> Saisie utilisateur de 33
<2> Saisie utilisateur de 40
<3> ...

A faire :

. Étudier la documentation de la classe Devinette (constructeurs/méthodes).
. Un objet Devinette, instance de la classe Devinette, est un objet qui :

* 	lors de sa création, détermine des bornes min et max au jeu et choisit la valeur à chercher,
** 	tirer au sort la borne supérieure (40<>50) et la borne inférieure (10<>20) du jeu.
**	tirer au sort la valeur à rechercher entre les bornes choisies ci-dessus.<BR>
 Exemple : borne inf 12, bone sup 47, valeur à chercher 22.<BR>
* dispose de méthodes permettant de jouer et d’interroger l’état de la partie (nombre de coups joués, résultat d’un coup, ...).

. Écrire un programme main permettant de faire une partie de devinette en utilisant la classe Devinette : tirage au sort des valeurs, demander une valeur comprise entre les deux bornes et répondre à l'utilisateur sur la validité de son coup, afficher « partie gagnée » à la fin ainsi que le nombre de coups joués (essais).
. Écrire un autre programme main permettant de jouer successivement 3 parties de devinette. Écrire d'abord un sous-programme +void jouer (Devinette d)+ permettant de "dérouler" une partie de devinette avec l'objet d en paramètre. Puis écrire le programme demandé (quelques lignes).

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
import java.util.Scanner;
import classestps.*;

public class TestDevinette
{
	private static void jouer (Devinette d) throws ErreurExecutionDevinette
	{
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		d.soumettreCoup (val);
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas()) 
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			d.soumettreCoup (val);
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
	}
	public static void main2 () throws ErreurExecutionDevinette
	{
		Devinette d;
		int i;
		
		for (i=0; i<3; i++)
		{
			d = new Devinette() ;
			TestDevinette.jouer (d);
		}
	}
	public static void main1 () 
	{
		Devinette d;
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		d = new Devinette() ;
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		try {
			d.soumettreCoup (val);
		} catch (ErreurExecutionDevinette e) {
			System.out.println(e);
			System.out.println("Bug !!");
		}
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas())
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			try {
				d.soumettreCoup (val);
			} catch (ErreurExecutionDevinette e) {
				System.out.println(e);
				System.out.println("Bug !!");
			}
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
		
		// d.soumettreCoup (20); // Plantage car partie finie ...
	}
	public static void main (String argv[]) throws ErreurExecutionDevinette
	{
		System.out.println("Exo 1");
		TestDevinette.main1();
		
		System.out.println("Exo 1");
		TestDevinette.main2();
	}
}
-----
====
endif::prof[]

/////////////////////////////////////////////

[[sujetcompte]]
=== Exercice

Nous reprenons une classe Compte, <<doccompte, cf. ci-après>>.

Compléter le programme main() suivant afin de :

. Créer un Compte au nom de "César" avec un numéro, des débits/crédits de 0.
. Créer un Compte au nom de "Brutus" avec un numéro, des débits de 100, des crédits de 200.
. Déposer 100 sur le compte de "César".
. Retirer 50 sur le compte de "Brutus".
. Afficher à l'écran les comptes de "César" et "Brutus".
. Créer un tableau *tabC* de 5 comptes (éléments de type Compte).
. Ranger dans le tableau les comptes suivants :

* [0] : le compte de "César"
* [1] : le compte de "Brutus"
* [2] : un nouveau compte au nom de "Astérix"
* [3] : un nouveau compte au nom de "Obélix"
* [4] : un nouveau compte au nom de "Idéfix"

. Trier le tableau tabC par ordre des propriétaires.
. Afficher le tableau
. Créer un tableau d'index du tableau tabC. Ce tableau permettra d'accéder aux comptes dans l'ordre de leur numéro de compte.

* Comment s'y prendre ? tableau d'entiers ? tableau de Compte ?
* Réfléchir à l'implantation mémoire java

. Afficher les comptes dans l'ordre de leurs numéros de compte.
. Réaliser un second index similaire et les traitement ci-dessus avec maintenant un tableau d'entiers contenant les indices de tabC.

[TIP]
.Aide
=====
Pour comparer 2 chaînes de caractères, il existe une méthode sur la classe String : +int compareTo (String s)+

Exemple :  +if (chaine1.compareTo(chaine2) > 0) ...+

qui renvoie : 0 si les 2 chaînes sont égales, une valeur > si chaine1 "plus grande" que chaine2, une valeur négative sinon.
=====

[source, java]
-----
public class Test {
	public static void main(String argv[])  {
		Compte c1, c2;
		Compte tabC [];
		Compte indexTabC [];
		int i, j;
-----

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
public class Test {
	public static void main(String argv[])  {
		Compte c1, c2;
		Compte tabC [];
		Compte indexTabC [];
		int i, j;
		
		c1 = new Compte ("01", "César"); // <1>
		c2 = new Compte ("02", "Brutus", 100, 200); // <2>
		
		c1.deposer (100); // <3>
		c2.retirer (50); // <4>
		
		c1.afficher(); // <5>
		c2.afficher();
		System.out.println();
		
		tabC = new Compte [5]; // <6>
		tabC[0] = c1; // <7>
		tabC[1] = c2;
		tabC[2] = new Compte ("03", "Astérix");
		tabC[3] = new Compte ("04", "Obélix");
		tabC[4] = new Compte ("05", "Idéfix");
		
		for (i=0; i<tabC.length-1; i++) {  // <8>
			for (j=i+1; j<tabC.length; j++) {
				if (tabC[i].getProprietaire().compareTo(tabC[j].getProprietaire()) > 0) {
					c1 = tabC[i];   tabC[i] = tabC[j];  tabC[j] = c1;
				}
			}
		}
		for (i=0; i<tabC.length; i++) { // <9>
			tabC[i].afficher();
		}
		System.out.println();
		
		indexTabC = new Compte[5]; // <10>
		for (i=0; i<tabC.length; i++) {
			indexTabC[i] = tabC[i];
		}
		for (i=0; i<indexTabC.length-1; i++) {
			for (j=i+1; j<indexTabC.length; j++) {
				if (indexTabC[i].getNumCompte().compareTo(indexTabC[j].getNumCompte()) > 0) {
					c1 = indexTabC[i];   indexTabC[i] = indexTabC[j];  indexTabC[j] = c1;
				}
			}
		}
		for (i=0; i<tabC.length; i++) { // <11>
			indexTabC[i].afficher();
		}
		System.out.println();
		
		int index2[] = new int[5]; // <12>
		int temp;
		for (i=0; i<tabC.length; i++) {
			index2[i] = i;
		}
		for (i=0; i<index2.length-1; i++) {
			for (j=i+1; j<index2.length; j++) {
				if (tabC[index2[i]].getNumCompte().compareTo(tabC[index2[j]].getNumCompte()) > 0) {
					temp = index2[i];   index2[i] = index2[j];  index2[j] = temp;
				}
			}
		}
		for (i=0; i<tabC.length; i++) {
			tabC[index2[i]].afficher();
		}
		System.out.println();
	}
}
-----
====
endif::prof[]
////////////////////////////////////////////

ifndef::impression[]

[[docdevinette]]
=== Documentation classe Devinette

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<<sujetdevinette, Retour sujet>>

include::./TD2_common.asc[]


endif::impression[]

endif::todoprof[]

