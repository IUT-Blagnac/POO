:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 2
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 1 : approche objet. S1.
| {objtd}	| *Utiliser des objets en Java*.
| {duree}	| *1 séance* de 1,5h
|======================

// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

. Finir le TD1 dernière partie
. Objectif :

* Retour sur les méthodes, signatures
* Retour sur méthodes static pour "écarter" le problème.
* Préciser les éléments "pur objet"
** Attributs private
** Méthodes publiques, certaines private si on veut
** On utilise un objet sans connaître l'implémentation.

. Si trop court (m'étonnerait) : commencer l'exo sur les comptes

====
endif::todoprof[]

ifndef::todoprof[]

== Préliminaires et rappels

=== Déclaration de sous-programmes en Java (principes)

==== En-tête de sous-programme

Un en-tête de sous-programme définit :

. une spécification pour le programmeur qui doit développer le sous-programme,
. une "mode d'emploi" pour le programmeur qui doit utiliser ce sous-programme.

Cet en-tête définit :

- l'identificateur du sous-programme,
- le nombre ET le type ET l'ordre des paramètres formels : une suite de couples +type  identificateur+ séparés par des virgules,
- un éventuel type de valeur retournée, void si rien n'est retourné.
+
Notez que "void", du point de vue du compilateur,  ne veut pas dire "rien" mais est un type qui n'a aucune valeur et veut donc dire "pas de valeur de retour".

La *signature ou prototype* du sous-programme est ce qui permet de le distinguer ET de le reconnaître. Elle est formé de :

- l'identificateur du sous-programme,
- le nombre ET le type ET l'ordre des paramètres formels.

Exemple :
[source, java]
-----
/**
* Calcul de la puissance puiss de la valeur v (calcul de v puissance puiss).
* Ne fonctionne que si puiss >= 0
*
* @param    v      valeur dont on cherche la puissance
* @param    puiss  puissance à laquelle on va élever v
* @return   v élevé à la puissance puiss
**/
double  puissance (double v, int puiss) {
	double resultat ;
	...
	return resultat;
}
-----

==== Appel d'un sous-programme

L'appel d'un sous-programme fait intervenir :

- l'identificateur du sous-programme,
- des paramètres effectifs en nombre ET ordre ET type correspondant au prototype du sous-programme.

Les paramètres effectifs peuvent être toute expression donnant une valeur du type attendu.

*Exercice* Pour les  appels suivants,expliquez si : i) l'appel est correct, ii) les calculs effectués pour réaliser l'appel. On considérera les appels corrects même si nous reviendrons plus tard sur la syntaxe exacte d'appel.

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10.5, 1+1);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Oui
* Calculs - Calcul de 1+1 (=2), appel du sous-programme, retour puis affectation à x.
======
endif::prof[]

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10.5, 2, 2+2);
x = puissance (10.5);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Aucun des deux, trop ou manque de paramètres.
* Calculs -
======
endif::prof[]

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10, 2);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Oui
* Calculs - Conversion de 10 de int en double (stocké localement par le compilateur) puis appel de fonction et calcul.
======
endif::prof[]

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
double x;
x = puissance (10.5, 2.5);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Non car 2.5 et un double
* Calculs - Correction : x = puissance (10.5, *(int)2.5*); ou x = puissance (10.5, 2);
======
endif::prof[]

. Q : +double  puissance (double v, int puiss)+
+
[source, java]
-----
int val;
val = puissance (10, 2);
-----

* Correct ?
* Calculs ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
* Correct - Non val est de type int donc l'affectation n'est pas ok.
+
Java ne sait faire automatiquement que des promotions byte/char -> int -> long -> float -> double.
+
Ici on peut écrire : +val = *(int)*  puissance (10, 2);+
+
Mais risque de perte de précision avec des vrais paramètres double (pas dans notre cas).

* Calculs (suite à la correction) - +val = (int)  puissance (10, 2);+
** Conversion de 10 de int en double (stocké localement par le compilateur),
** puis appel de fonction et calcul,
** puis conversion du résultat de double en int (perte de la partie décimale).
======
endif::prof[]

=== Méthodes static en Java

Il existe des sous-programmes qui existent "en eux-mêmes". Ont peut les décrire et on souhaite pouvoir les programmer pour les appeler. Exemple : sinus, cosinus, calcul de puissance, obtenir l'heure du système, ...

En java :

. Tout identificateur déclaré ne peut l’être qu’à l’intérieur d’une unité de définition appelée classe.
. On peut déclarer un sous-programme rattaché à une classe, appelée méthode *de classe* ou méthode *statique*.
. Elle s'écrit précédée du mot-clef +*static*+
. Pour l'appeler, il faut utiliser le nom de la classe devant l'appel : +NomDeClasse . identificateurmethode(...)+

Exemple :
[source, java]
-----
public class ClasseLibrairie {
	/**
	* Calcul de la puisssance puiss de la valeur v (calcul de v puissance puiss).
	* Ne fonctionne que si puiss >= 0
	*
	* @param    v      valeur dont on cherche la puissance
	* @param    puiss  puissance à laquelle on va élever v
	* @return   v      elévé à la puissance puiss
	**/
	public static double  puissance (double v, int puiss) {
		double resultat=0 ;
		...
		return resultat;
	}	
	public static void main(String argv[]) throws Exception  {
		double x;
		x = ClasseLibrairie.puissance (10.5, 2);
	}
}
-----

Par la suite, lorsque nous écrirons des classes, on séparera clairement :

- des classes "librairies" qui définissent uniquement des méthodes statiques. Ex Math et System ou une classe contenant une fonction main().
- des classes décrivant des objets définissant uniquement des méthodes non statiques.

Cette dichotomie que l'on recherchera ne sera pas tous toujours possible ou souhaitable. Nous l'appliquerons le plus possible. Exception : les sujets de TD ou TP (pour diminuer le volume des exemples).

[TIP]
=====
Notons que les librairies Java mélangent souvent les deux type de méthodes et d'attributs.
Faire attention en lisant la documentation.
=====

Autre exemple :
[source, java]
-----
public static void main(String argv[])  {
	double x, y, xpowy;
	long debut, lg;
	
	debut = System.currentTimeMillis();  // instant de démarrage en milisecondes 
	                                     // calculé depuis January 1, 1970 UTC - 0h.)
	x = 100 * Math.random();   // Tirage au sort d'un nombre entre 0 et 100 
	y = 10 * Math.random();    // Tirage au sort d'un nombre entre 0 et 10
	xpowy = Math.pow(x, y);    // Calcul de x puissance y
	System.out.println("Résultat : " + x + " pow " + y + " => " + xpowy);
	lg = System.currentTimeMillis() - debut; // Calcul durée du programme
	System.out.println("Durée : " + lg);
}

Exécution :
 Résultat : 80.6991463652636 pow 1.7813938064916623 => 2493.931501272706
 Durée : 3
 Exit code: 0
-----

=== Constantes (attributs static)

De la même manière, on peut aussi définir des attributs de classe (static) : attributs accessibles à partir de la classe.

Ils sont très souvent déclarés *public* (accessibles), *static* (de classe), *final* (non modifiables).

Exemple : Math.PI -> Valeur de approchée de pi (double) : 3,141592...

Exemple : Math.E -> Valeur de approchée de e (double) : e = 2,718281...

=== Autres cas particuliers (attributs static)

Certaines classes définissent des attributs de classe (static) "modifiables", mais à ne modifier qu'avec précaution.

Ils donnent accès à des ressources systèmes.

Exemple : 

* System.out -> accès au dispositif de sortie standard par défaut du programme (objet de la classe PrintStream).
* System.in -> accès au dispositif d'entrée standard du programme (objet de la classe BufferedInputStream).
* System.err -> accès au dispositif de sortie d'erreur standard du programme (objet de la classe PrintStream).

----------
System.in
|-----|     Une classe (un indicateur -> majuscule)
|---------| Un attribut de la classe (indicateur -> pas de parenthèses après le "in").
----------

== Utiliser des objets en Java

=== Rappel objets

Objet = identité + état + comportement

* Identité : Un objet forme un tout identifiable
* Un état : ensemble de propriétés/caractéristiques (attributs) ayant une valeur
* Comportement : ensemble des traitements (méthodes) que peut accomplir l’objet si on le lui « demande »

image:images/td2objetsencapsules.png[]

Par principe :

* Un objet *encapsule* son état
** Etat : accessible que par l’objet lui-même (méthodes)
** Principe objet majeur à respecter => *abstraction*
* Un objet reçoit des *messages* => appel de méthode appliqué à l'objet
* Un objet est créé à partir d'une classe qui fournit sa description.

Un objet reçoit des messages => appel de méthode appliqué à l'objet

* Idée : c'est l'objet qui est "actif" et qui réagit (exécute la méthode)
* On peut "penser" objet comme cela ... 
* ... mais la mise en oeuvre est différente.

=== Principe des classes en Java

Pour décrire une classe d'objet en Java, on définit une classe qui déclare :

* des attributs pour les objets (private),
* des méthodes pour les objets (public) + éventuellement des méthodes internes (private),
** des méthodes observateurs (appelées aussi pour certaines getters),
** des méthodes transformateurs (appelées aussi pour certaines setters),
* un/des constructeurs (public) pour construire des objets.

Exemple :

image:images/td2classpersonne.png[]

[source, java]
-----
class Personne
{
		// Attributs 
		private  String nom;
		private  int age;

	// Constructeurs
	public  Personne ()  { ... }
	public  Personne (String pNom)   { ... }
	public  Personne (String pNom, int pAge) { ... }
   
	// Méthodes
	public  String getNom () { ... }
	public  int getAge ()   { ... }
	public  void setNom (String nouvNom) { ... }
	public  void setAge (int nouvAge)  { ... }
	public  String toString() { ... } 
} // Fin Classe Personne
-----

Principes de syntaxe :

. Attributs : *toujours* déclarés private. Règle à appliquer pour construire des objets (et non des enregistrements).
. Constructeur :
* Porte le nom de la classe.
* Pas de valeur de retour.
* Plusieurs constructeurs possibles (surcharge) : différenciés par leur signature.

La classe définit un type :

. On peut déclarer des variables de ce type.
. Ces variables contiennent des *références* vers des objets de ce type (une référence est typée).

=== Création d'objet

Utiliser l'opérateur *new* : Exemple +new Personne ("Jean", 39);+

* réserve la mémoire nécessaire : environ le nombre d'octets pour stocker les attributs définis par la classe,
* initialise chaque attribut (+0+ pour les nombres, +false+ pour les booleans, +null+ pour les objets et les tableaux),
* applique le constructeur spécifié (signature à partir des paramètres),
* *renvoie la référence* de l'objet créé dans le tas.

----------
 new  Personne  ("Jean", 39)
|-------------| ..................> L'objet à créer -> avec les attributs définis par la classe

 new  Personne  ("Jean", 39)
     |----------------------| ....> Signature du constructeur à appliquer -> Personne (String, int)
----------

Autre façon de créer des objets ? oui, méthode clone() appliquée à un objet ... mais sera vu plus tard.

=== Identité d'objet en Java

L'identité d'objet en Java est automatique -> c'est la référence de l'objet créé par *new*.

Elle est unique et permet de désigner l'objet indépendamment des valeurs des attributs.

Les variables objet contiennent la référence vers l'objet ... donc son identité.

=== Envoi de message

Syntaxe : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +expressionReferenceObjet *.* identificateurMethode *(* [parametreEffectif1, ...] *)*+

=== Exemple

[source, java]
-----
class ClasseEssai
{
	public static  void main (String  argv[]) {       
		int i;
		Personne  p1, p2, p3;
		Personne tabPers [];

		p1 = new Personne ("Jean", 39);
		p2 = new Personne ("Jean", 39);
		p3 = new Personne ("Pierre");
	   
		p3.setAge (45);
		p3.setNom ("Durand");
		
		System.out.println (p1.toString());
		System.out.println (p1.getNom () );
		System.out.println (p2);   // Implicitement fera appel à p2.toString()
		System.out.println (p3);   // Idem
			 
		if  (p1 != p2) 
			System.out.println ("Non Egalité des références");

		if (p1.getNom().equals(p2.getNom()))
			System.out.println ("Egalité des noms des Personnes");

		tabPers = new Personne [3];
		tabPers[0] = p1;
		tabPers[1] = p2;
		tabPers[2] = new Personne ("Albert", 30);
	   
		for (i=0; i<tabPers.length; i++) {
			System.out.println (tabPers[i]);
		}
	}// Fin Main
}// Fin Classe ClasseEssai
-----

== Utilisation de classe

[[sujetdevinette]]
=== Exercice

Nous allons utiliser une classe Devinette pour jouer, <<docdevinette, cf. ci-après>>.

Au jeu de la "devinette" :

* On suppose une valeur entière à trouver, tirée au sort par le programme, entre une borne basse (10<>20) et haute (40<>50).
* L'utilisateur chercher la valeur par essais successifs, la machine répondant à chaque coup si le nombre recherché est supérieur ou inférieur au nombre soumis.
* Le jeu s'arrête quand la valeur est trouvée.

Exemple d'exécution :
-----
Coup : (13-49) : 33 // <1>
Plus Haut ... Coup : (13-49) : 40 // <2>
Plus Haut ... Coup : (13-49) : 49 // <3>
Plus Bas ... Coup : (13-49) : 48
Plus Bas ... Coup : (13-49) : 41
Plus Haut ... Coup : (13-49) : 47
Plus Bas ... Coup : (13-49) : 44
Plus Haut ... Coup : (13-49) : 46
Bravo, en 8 coups.
-----
<1> Saisie utilisateur de 33
<2> Saisie utilisateur de 40
<3> ...

A faire :

. Étudier la documentation de la classe Devinette (constructeurs/méthodes).
. Un objet Devinette, instance de la classe Devinette, est un objet qui :

* lors de sa création, détermine des bornes min et max au jeu et choisit la valeur à chercher,
* dispose de méthodes permettant de jouer et d’interroger l’état de la partie (nombre de coups joués, résultat d’un coup, ...).

. Écrire un programme main permettant de faire une partie de devinette en utilisant la classe Devinette : tirage au sort des valeurs, demander une valeur comprise entre les deux bornes et répondre à l'utilisateur sur la validité de son coup, afficher « partie gagnée » à la fin ainsi que le nombre de coups joués (essais).
. Écrire un autre programme main permettant de jouer successivement 3 parties de devinette. Écrire d'abord un sous-programme +void jouer (Devinette d)+ permettant de "dérouler" une partie de devinette avec l'objet d en paramètre. Puis écrire le programme demandé (quelques lignes).

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
import java.util.Scanner;
import classestps.*;

public class TestDevinette
{
	private static void jouer (Devinette d) throws ErreurExecutionDevinette
	{
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		d.soumettreCoup (val);
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas()) 
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			d.soumettreCoup (val);
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
	}
	public static void main2 () throws ErreurExecutionDevinette
	{
		Devinette d;
		int i;
		
		for (i=0; i<3; i++)
		{
			d = new Devinette() ;
			TestDevinette.jouer (d);
		}
	}
	public static void main1 () 
	{
		Devinette d;
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		d = new Devinette() ;
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		try {
			d.soumettreCoup (val);
		} catch (ErreurExecutionDevinette e) {
			System.out.println(e);
			System.out.println("Bug !!");
		}
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas())
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			try {
				d.soumettreCoup (val);
			} catch (ErreurExecutionDevinette e) {
				System.out.println(e);
				System.out.println("Bug !!");
			}
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
		
		// d.soumettreCoup (20); // Plantage car partie finie ...
	}
	public static void main (String argv[]) throws ErreurExecutionDevinette
	{
		System.out.println("Exo 1");
		TestDevinette.main1();
		
		System.out.println("Exo 1");
		TestDevinette.main2();
	}
}
-----
====
endif::prof[]

/////////////////////////////////////////////

[[sujetcompte]]
=== Exercice

Nous reprenons une classe Compte, <<doccompte, cf. ci-après>>.

Compléter le programme main() suivant afin de :

. Créer un Compte au nom de "César" avec un numéro, des débits/crédits de 0.
. Créer un Compte au nom de "Brutus" avec un numéro, des débits de 100, des crédits de 200.
. Déposer 100 sur le compte de "César".
. Retirer 50 sur le compte de "Brutus".
. Afficher à l'écran les comptes de "César" et "Brutus".
. Créer un tableau *tabC* de 5 comptes (éléments de type Compte).
. Ranger dans le tableau les comptes suivants :

* [0] : le compte de "César"
* [1] : le compte de "Brutus"
* [2] : un nouveau compte au nom de "Astérix"
* [3] : un nouveau compte au nom de "Obélix"
* [4] : un nouveau compte au nom de "Idéfix"

. Trier le tableau tabC par ordre des propriétaires.
. Afficher le tableau
. Créer un tableau d'index du tableau tabC. Ce tableau permettra d'accéder aux comptes dans l'ordre de leur numéro de compte.

* Comment s'y prendre ? tableau d'entiers ? tableau de Compte ?
* Réfléchir à l'implantation mémoire java

. Afficher les comptes dans l'ordre de leurs numéros de compte.
. Réaliser un second index similaire et les traitement ci-dessus avec maintenant un tableau d'entiers contenant les indices de tabC.

[TIP]
.Aide
=====
Pour comparer 2 chaînes de caractères, il existe une méthode sur la classe String : +int compareTo (String s)+

Exemple :  +if (chaine1.compareTo(chaine2) > 0) ...+

qui renvoie : 0 si les 2 chaînes sont égales, une valeur > si chaine1 "plus grande" que chaine2, une valeur négative sinon.
=====

[source, java]
-----
public class Test {
	public static void main(String argv[])  {
		Compte c1, c2;
		Compte tabC [];
		Compte indexTabC [];
		int i, j;
-----

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source, java]
-----
public class Test {
	public static void main(String argv[])  {
		Compte c1, c2;
		Compte tabC [];
		Compte indexTabC [];
		int i, j;
		
		c1 = new Compte ("01", "César"); // <1>
		c2 = new Compte ("02", "Brutus", 100, 200); // <2>
		
		c1.deposer (100); // <3>
		c2.retirer (50); // <4>
		
		c1.afficher(); // <5>
		c2.afficher();
		System.out.println();
		
		tabC = new Compte [5]; // <6>
		tabC[0] = c1; // <7>
		tabC[1] = c2;
		tabC[2] = new Compte ("03", "Astérix");
		tabC[3] = new Compte ("04", "Obélix");
		tabC[4] = new Compte ("05", "Idéfix");
		
		for (i=0; i<tabC.length-1; i++) {  // <8>
			for (j=i+1; j<tabC.length; j++) {
				if (tabC[i].getProprietaire().compareTo(tabC[j].getProprietaire()) > 0) {
					c1 = tabC[i];   tabC[i] = tabC[j];  tabC[j] = c1;
				}
			}
		}
		for (i=0; i<tabC.length; i++) { // <9>
			tabC[i].afficher();
		}
		System.out.println();
		
		indexTabC = new Compte[5]; // <10>
		for (i=0; i<tabC.length; i++) {
			indexTabC[i] = tabC[i];
		}
		for (i=0; i<indexTabC.length-1; i++) {
			for (j=i+1; j<indexTabC.length; j++) {
				if (indexTabC[i].getNumCompte().compareTo(indexTabC[j].getNumCompte()) > 0) {
					c1 = indexTabC[i];   indexTabC[i] = indexTabC[j];  indexTabC[j] = c1;
				}
			}
		}
		for (i=0; i<tabC.length; i++) { // <11>
			indexTabC[i].afficher();
		}
		System.out.println();
		
		int index2[] = new int[5]; // <12>
		int temp;
		for (i=0; i<tabC.length; i++) {
			index2[i] = i;
		}
		for (i=0; i<index2.length-1; i++) {
			for (j=i+1; j<index2.length; j++) {
				if (tabC[index2[i]].getNumCompte().compareTo(tabC[index2[j]].getNumCompte()) > 0) {
					temp = index2[i];   index2[i] = index2[j];  index2[j] = temp;
				}
			}
		}
		for (i=0; i<tabC.length; i++) {
			tabC[index2[i]].afficher();
		}
		System.out.println();
	}
}
-----
====
endif::prof[]
////////////////////////////////////////////

ifndef::impression[]

[[docdevinette]]
=== Documentation classe Devinette

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<<sujetdevinette, Retour sujet>>


++++
<HR>

<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../classestps/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Devinette.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../classestps/Compte.html" title="class in classestps"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../classestps/ErreurExecutionDevinette.html" title="class in classestps"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?classestps/Devinette.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Devinette.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
classestps</FONT>
<BR>
Class Devinette</H2>
<PRE>
java.lang.Object
  <IMG SRC="../resources/inherit.gif" ALT="extended by "><B>classestps.Devinette</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>Devinette</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
Classe Devinette permettant de faire des jeux de "devinette de nombres".<BR>
 A la création, un objet Devinette est configuré avec les 2 bornes du jeu (haute : 40<>50, basse : 10<>20) et la valeur à rechercher. Ces valeurs ne sont pas modifiables par la suite.<BR>
 On peut soumettre un coup à une Devinette ("jouer") 
 et tester ensuite si le dernier coup joué est gagnant, trop haut ou trop bas. <BR>
 Lorsque la valeur à chercher a été trouvée, la partie est considérée "terminée" et on ne devra plus soumettre de coup. Les autres opérations de tests restent disponibles.<BR>
 <BR>
 <BR><U>Exemple :</U><BR>
 <code>Devinette d;<BR>
 d = new Devinette();<BR>
 d.soumettreCoup(35);<BR>
 if (d.isDernierCoupGagnant())<BR>
  System.out.println ("Gagné");<BR>
<BR></code>
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>2.02</DD>
<DT><B>Author:</B></DT>
  <DD>André Péninou</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../classestps/Devinette.html#Devinette()">Devinette</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructeur de Devinette qui initialise un objet Devinette prêt à être utilisé.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#getBas()">getBas</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'obtenir la borne basse du jeu tirée au sort à la création de l'objet.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#getHaut()">getHaut</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'obtenir la borne haute du jeu tirée au sort à la création de l'objet.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#getNbCoupsJoues()">getNbCoupsJoues</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'obtenir le nombre de coups déjà joués à une devinette.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#isDernierCoupGagnant()">isDernierCoupGagnant</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet de tester si le dernier coup joué est gagnant ou pas.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#isDernierCoupTropBas()">isDernierCoupTropBas</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet de tester si le dernier coup joué est trop bas.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#isDernierCoupTropHaut()">isDernierCoupTropHaut</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet de tester si le dernier coup joué est trop haut.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#isValeurDansBornes(int)">isValeurDansBornes</A></B>(int&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet de tester si une valeur est située entre les bornes du jeu (incluses).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Devinette.html#soumettreCoup(int)">soumettreCoup</A></B>(int&nbsp;valeurJouee)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Soumettre un coup ("jouer" une valeur) à une devinette.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Devinette()"><!-- --></A><H3>
Devinette</H3>
<PRE>
public <B>Devinette</B>()</PRE>
<DL>
<DD>Constructeur de Devinette qui initialise un objet Devinette prêt à être utilisé.
 Permet de :<BR>
 - Tirer au sort la borne supérieure (40<>50) et la borne inférieure (10<>20) du jeu.<BR>
 - Tirer au sort la valeur à rechercher entre les bornes chosies ci-dessus.<BR>
 Exemple : borne inf 12, bone sup 47, valeur à chercher 22.<BR>
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="soumettreCoup(int)"><!-- --></A><H3>
soumettreCoup</H3>
<PRE>
public void <B>soumettreCoup</B>(int&nbsp;valeurJouee)
                   throws <A HREF="../classestps/ErreurExecutionDevinette.html" title="class in classestps">ErreurExecutionDevinette</A></PRE>
<DL>
<DD>Soumettre un coup ("jouer" une valeur) à une devinette.<BR>
 Permet de soumettre un coup dans le cas où :<BR>
 - Soit aucun coup n'a encore été joué (début de partie).<BR>
 - Soit le dernier coup joué n'était pas gagnant (partie en cours, non finie).
 <BR><BR><B>ATTENTION : </B>Lève une exception si le coup précédent était gagnant.<BR>
 C'est dire que si <code>isDernierCoupGagnant()</code> vaut <code>true</code>,
 car la partie est considérée terminée.<BR>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>valeurJouee</CODE> - coup (valeur) que l'on souhaite soummettre à la devinette.
<DT><B>Throws:</B>
<DD><CODE><A HREF="../classestps/ErreurExecutionDevinette.html" title="class in classestps">ErreurExecutionDevinette</A></CODE> - lorsque on joue un coup ET que la partie était terminée (valeur trouvée au soumettreCoup() précédent)<DT><B>See Also:</B><DD><A HREF="../classestps/Devinette.html#isDernierCoupGagnant()"><CODE>isDernierCoupGagnant()</CODE></A>, 
<A HREF="../classestps/Devinette.html#isDernierCoupTropHaut()"><CODE>isDernierCoupTropHaut()</CODE></A>, 
<A HREF="../classestps/Devinette.html#isDernierCoupTropBas()"><CODE>isDernierCoupTropBas()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isValeurDansBornes(int)"><!-- --></A><H3>
isValeurDansBornes</H3>
<PRE>
public boolean <B>isValeurDansBornes</B>(int&nbsp;val)</PRE>
<DL>
<DD>Permet de tester si une valeur est située entre les bornes du jeu (incluses).<BR>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>val</CODE> - valeur que l'on souhaite tester.
<DT><B>Returns:</B><DD><code>true</code> ou <code>false</code> selon le cas.</DL>
</DD>
</DL>
<HR>

<A NAME="isDernierCoupGagnant()"><!-- --></A><H3>
isDernierCoupGagnant</H3>
<PRE>
public boolean <B>isDernierCoupGagnant</B>()</PRE>
<DL>
<DD>Permet de tester si le dernier coup joué est gagnant ou pas.<BR>
 Permet de tester si le dernier coup joué par la méthode <code>soumettreCoup</code> a été gagnant ou pas. <BR>
 Retourne <code>false</code> si aucun coup n'a encore été joué.
<P>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> ou <code>false</code> selon le cas.<DT><B>See Also:</B><DD><A HREF="../classestps/Devinette.html#soumettreCoup(int)"><CODE>soumettreCoup(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isDernierCoupTropHaut()"><!-- --></A><H3>
isDernierCoupTropHaut</H3>
<PRE>
public boolean <B>isDernierCoupTropHaut</B>()</PRE>
<DL>
<DD>Permet de tester si le dernier coup joué est trop haut.<BR>
 Permet de savoir si le dernier coup joué par la méthode <code>soumettreCoup</code> a été trop haut  (bonne valeur plus petite).<BR>
 Retourne <code>false</code> si aucun coup n'a encore été joué.
<P>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> ou <code>false</code> selon le cas.<DT><B>See Also:</B><DD><A HREF="../classestps/Devinette.html#soumettreCoup(int)"><CODE>soumettreCoup(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="isDernierCoupTropBas()"><!-- --></A><H3>
isDernierCoupTropBas</H3>
<PRE>
public boolean <B>isDernierCoupTropBas</B>()</PRE>
<DL>
<DD>Permet de tester si le dernier coup joué est trop bas.<BR>
 Permet de savoir si le dernier coup joué par la méthode <code>soumettreCoup</code> a été trop bas (bonne valeur plus grande).<BR>
 Retourne <code>false</code> si aucun coup n'a encore été joué.
<P>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> ou <code>false</code> selon le cas.<DT><B>See Also:</B><DD><A HREF="../classestps/Devinette.html#soumettreCoup(int)"><CODE>soumettreCoup(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getNbCoupsJoues()"><!-- --></A><H3>
getNbCoupsJoues</H3>
<PRE>
public int <B>getNbCoupsJoues</B>()</PRE>
<DL>
<DD>Permet d'obtenir le nombre de coups déjà joués à une devinette.<BR>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>nombre de coups joués.</DL>
</DD>
</DL>
<HR>

<A NAME="getHaut()"><!-- --></A><H3>
getHaut</H3>
<PRE>
public int <B>getHaut</B>()</PRE>
<DL>
<DD>Permet d'obtenir la borne haute du jeu tirée au sort à la création de l'objet.<BR>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>borne haute du jeu.</DL>
</DD>
</DL>
<HR>

<A NAME="getBas()"><!-- --></A><H3>
getBas</H3>
<PRE>
public int <B>getBas</B>()</PRE>
<DL>
<DD>Permet d'obtenir la borne basse du jeu tirée au sort à la création de l'objet.<BR>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>borne basse du jeu.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../classestps/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Devinette.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../classestps/Compte.html" title="class in classestps"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../classestps/ErreurExecutionDevinette.html" title="class in classestps"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?classestps/Devinette.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Devinette.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>
++++

/////////////////////////////////////////////
[[doccompte]]
=== Documentation classe Compte

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<<sujetcompte, Retour sujet>>

++++
<HR>
<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../classestps/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../classestps/Devinette.html" title="class in classestps"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?classestps/Compte.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Compte.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
classestps</FONT>
<BR>
Class Compte</H2>
<PRE>
<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../resources/inherit.gif" ALT="extended by "><B>classestps.Compte</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>Compte</B><DT>extends <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></DL>
</PRE>

<P>
Classe Compte permettant de gérer des comptes simples.<BR>
    Un Compte a un numéro, appartient à un propriétaire et on peut y faire
    des versements (crédits) et des retraits (débits).<BR>
    Aucun contrôle n'est réalisé : montant déposé, retiré, ...<BR>
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>2.14</DD>
<DT><B>Author:</B></DT>
  <DD>André Péninou.</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../classestps/Compte.html#Compte()">Compte</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructeur non paramétré, appelé aussi constructeur "par défaut".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../classestps/Compte.html#Compte(java.lang.String, java.lang.String)">Compte</A></B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNumCompte,
       <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNomProp)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructeur paramétré.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../classestps/Compte.html#Compte(java.lang.String, java.lang.String, double, double)">Compte</A></B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNumCompte,
       <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNomProp,
       double&nbsp;pDebit,
       double&nbsp;pCredit)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructeur paramétré.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Compte.html#afficher()">afficher</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'afficher un Compte - <B>ATTENTION : Méthode spéciale pour les TPs.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Compte.html#deposer(double)">deposer</A></B>(double&nbsp;pSomme)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'effectuer un dépot sur un Compte.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Compte.html#getNumCompte()">getNumCompte</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'obtenir le numéro d'un Compte.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Compte.html#getProprietaire()">getProprietaire</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'obtenir le propriétaire d'un Compte.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Compte.html#retirer(double)">retirer</A></B>(double&nbsp;pSomme)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'effectuer un retrait sur un Compte.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Compte.html#setProprietaire(java.lang.String)">setProprietaire</A></B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNomProp)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet de modifier le propriétaire d'un Compte.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../classestps/Compte.html#soldeCompte()">soldeCompte</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Permet d'obtenir le solde d'un Compte.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Compte()"><!-- --></A><H3>
Compte</H3>
<PRE>
public <B>Compte</B>()</PRE>
<DL>
<DD>Constructeur non paramétré, appelé aussi constructeur "par défaut".<BR>
 <BR>
 Permet de créer un Compte.<BR>
 Les crédits et débits sont initialisés à 0. le numéro est initialisé à "Pas de numéro", le propriétaire à "Pas de propriétaire"<BR>
 <BR>
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../classestps/Compte.html#Compte(java.lang.String, java.lang.String)"><CODE>Compte(String, String)</CODE></A>, 
<A HREF="../classestps/Compte.html#Compte(java.lang.String, java.lang.String, double, double)"><CODE>Compte(String, String, double, double)</CODE></A></DL>
</DL>
<HR>

<A NAME="Compte(java.lang.String, java.lang.String)"><!-- --></A><H3>
Compte</H3>
<PRE>
public <B>Compte</B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNumCompte,
              <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNomProp)</PRE>
<DL>
<DD>Constructeur paramétré.<BR>
 <BR>
 Permet de créer un Compte en donnant son numéro et son propriétaire.<BR>
 Les crédits et débits sont initialisés à 0.<BR>
 <BR>
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>pNumCompte</CODE> - Le numéro du Compte.<DD><CODE>pNomProp</CODE> - Le nom du propriétaire.<DT><B>See Also:</B><DD><A HREF="../classestps/Compte.html#Compte(java.lang.String, java.lang.String, double, double)"><CODE>Compte(String, String, double, double)</CODE></A></DL>
</DL>
<HR>

<A NAME="Compte(java.lang.String, java.lang.String, double, double)"><!-- --></A><H3>
Compte</H3>
<PRE>
public <B>Compte</B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNumCompte,
              <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNomProp,
              double&nbsp;pDebit,
              double&nbsp;pCredit)</PRE>
<DL>
<DD>Constructeur paramétré.<BR>
 <BR>
 Permet de créer un Compte en donnant son numéro, son propriétaire et des montants 
 initiaux de débits et crédits.<BR>
 Le solde est initialisé en conséquence (crédits - débits).<BR>
 <BR>
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>pNumCompte</CODE> - Le numéro du Compte.<DD><CODE>pNomProp</CODE> - Le nom du propriétaire.<DD><CODE>pDebit</CODE> - Montant initial des débits.<DD><CODE>pCredit</CODE> - Montant initial des crédits.<DT><B>See Also:</B><DD><A HREF="../classestps/Compte.html#Compte(java.lang.String, java.lang.String)"><CODE>Compte(String, String)</CODE></A></DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="soldeCompte()"><!-- --></A><H3>
soldeCompte</H3>
<PRE>
public double <B>soldeCompte</B>()</PRE>
<DL>
<DD>Permet d'obtenir le solde d'un Compte.<BR>
 <BR>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Le solde du Compte.</DL>
</DD>
</DL>
<HR>

<A NAME="getProprietaire()"><!-- --></A><H3>
getProprietaire</H3>
<PRE>
public <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getProprietaire</B>()</PRE>
<DL>
<DD>Permet d'obtenir le propriétaire d'un Compte.<BR>
 <BR>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Le propriétaire du Compte.<DT><B>See Also:</B><DD><A HREF="../classestps/Compte.html#setProprietaire(java.lang.String)"><CODE>setProprietaire(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getNumCompte()"><!-- --></A><H3>
getNumCompte</H3>
<PRE>
public <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A> <B>getNumCompte</B>()</PRE>
<DL>
<DD>Permet d'obtenir le numéro d'un Compte.<BR>
 <BR>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Le numéro du Compte.</DL>
</DD>
</DL>
<HR>

<A NAME="afficher()"><!-- --></A><H3>
afficher</H3>
<PRE>
public void <B>afficher</B>()</PRE>
<DL>
<DD>Permet d'afficher un Compte - <B>ATTENTION : Méthode spéciale pour les TPs.</B><BR>
 <BR>
 Affiche le numéro, le propriétaire, le total des débits, le total des crédits.<BR>
 Message affiché :<BR>
 "  Num. : aaa  - Prop. : bbb - Debit xxx E / Credit yyy E""<BR>
 <BR>
 <B>ATTENTION : Méthode spéciale pour les TP.</B><BR>
 <BR>
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="retirer(double)"><!-- --></A><H3>
retirer</H3>
<PRE>
public void <B>retirer</B>(double&nbsp;pSomme)</PRE>
<DL>
<DD>Permet d'effectuer un retrait sur un Compte.<BR>
 <BR>
 Effectue un retrait (débit) de pSomme Euros sur le Compte.<BR> 
 Spécial TP : tout retrait est accepté, même si le solde est négatif !<BR>
 <BR>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pSomme</CODE> - Le montant retiré sur le Compte.<DT><B>See Also:</B><DD><A HREF="../classestps/Compte.html#deposer(double)"><CODE>deposer(double)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="deposer(double)"><!-- --></A><H3>
deposer</H3>
<PRE>
public void <B>deposer</B>(double&nbsp;pSomme)</PRE>
<DL>
<DD>Permet d'effectuer un dépot sur un Compte.<BR>
 <BR>
 Effectue un dépot (crédit) de pSomme Euros sur le Compte.<BR> 
 <BR>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pSomme</CODE> - Le montant déposé sur le Compte.<DT><B>See Also:</B><DD><A HREF="../classestps/Compte.html#retirer(double)"><CODE>retirer(double)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setProprietaire(java.lang.String)"><!-- --></A><H3>
setProprietaire</H3>
<PRE>
public void <B>setProprietaire</B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;pNomProp)</PRE>
<DL>
<DD>Permet de modifier le propriétaire d'un Compte.<BR>
 <BR>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pNomProp</CODE> - Le nom du propriétaire.<DT><B>See Also:</B><DD><A HREF="../classestps/Compte.html#getProprietaire()"><CODE>getProprietaire()</CODE></A></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../classestps/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;<A HREF="../classestps/Devinette.html" title="class in classestps"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?classestps/Compte.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Compte.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>
++++
////////////////////////////////////////////

endif::impression[]



endif::todoprof[]

