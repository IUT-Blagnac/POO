:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 10
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Avoir fait le TP sur l'héritage de formes graphiques.
| {objtd}	| Générer un programme de Test pour une classe déjà écrite.
| {duree}	| *1 séance* de 1,5h sur machine.
| {depot}	| Programme de test écrit + Cylindre.java de la dernière partie.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Écrire un programme de test pour des classes déjà écrites.
*	Même si le processus standard serait inverse : écrire les tests PUIS écrire la classe.
====

[IMPORTANT]
====

Lire le début avec eux pour accélérer et en venir vite aux tests :

*	les principes de tests
*	tests {junit}
*	lire le premier tests avec eux
*	bien expliquer : Situation test, calcul des résultats attendus, tests proprement dit
====

[IMPORTANT]
====
A Suivre :

La dernière partie est optionnelle.

On peut avancer vite par copier/coller.
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

L'objectif de ce TP est de produire le programme de test {junit} de la classe Cylindre développée dans un TP précédent.

Rappel de la hiérarchie de classes utilisée :

[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp7.1.png[]
=====

== Mise en place de l'environnement

Récupérer depuis le serveur les fichiers : 

.	Le fichier TestCylindre.java : *le fichier à modifier* durant le TP.
.	Le fichier de la classe à tester : Cylindre.java.
.	Les fichiers déjà écrits : FormeGraphique.java, Cercle.java nécessaires pour compiler Cylindre.java.
. 	Les fichiers :

* SciTE.properties : il paramètre Scite pour compiler/exécuter en utilisant la librairie {junit} contenue dans le fichier .jar.
* junit.jar : il contient la librairie {junit} pour les tests.

.	Ensuite seulement lancer Scite et ouvrir TestCylindre.java.

== Principe des tests

Dans ce module (et aussi en S1), de nombreux programmes de tests automatiques {junit} vous ont été proposés pour développer vos classes.

Les tests automatiques permettent : de tester une unité "seule" : une classe en Java. On cherche à valider le code écrit pour la classe.

Les tests unitaires :

*	font une évaluation partielle : une classe,
*	ne garantissent pas le fonctionnement de l’intégralité du programme mais d'une classe seulement,
*	réalisent des tests d'assertions à vérifier sur différentes situations critiques couvrant l'ensemble des situations possibles,

**	assertion : vérifier que, compte tenu de ce qu'on attend, la classe testée produit des objets dans un état attendu.
**	assertion : 

***	vérifier qu'une condition soit vraie ou fausse,
***	vérifier la valeur retournée par un observateur,
***	vérifier qu'une exception attendue se produise bien,

*	tests unitaires == suite de tests indépendants,
*	attention : possibilité de bug dans les tests !!

La mise en place de programmes de test peut être réalisée pour atteindre plusieurs objectifs, par exemple :

.	Maintenance logicielle : 

*	évolution des programmes au cours du temps => empêcher l'apparition de nouveaux bugs,
*	nécessité de tester après chaque modification => tests unitaires répétés à chaque modification de classe.

.	Concevoir/Développer par les tests :

*	spécifier une classe,
*	puis commencer par écrire les tests,
*	puis écriture de la classe,
*	puis écriture de méthodes de la classe erronées qui font échouer le test : test du test.

Le couple programmeATester (classe à tester)  / programmeDeTest (classe de test) que l'on maintient dans le temps en équilibre peut s’intégrer dans les processus industriels d’intégration continue, de Tiers Maintenance Applicative (TMA) ou de contribution logicielle (par exemple libre).

== Tests {junit}

=== {junit}  c'est quoi
{junit} c'est : un *environnement* pour programmer des tests unitaires qui propose un ensemble de classes, méthodes, macros, etc facilitant leur écriture. De tels environnements existent aussi dans d’autres langages C++, C, C#, ...

{junit} permet :

*	d’écrire les tests,
*	d’automatiser en partie leur lancement,
*	de récupérer tous les tests échoués,
*	tous les tests sont "joués" (réalisés) en une fois !

===	Tests unitaires simples de classes

[NOTE]
=====
La méthodologie de test appliquée ici reste partielle. 

L'objectif est de comprendre le principe.
=====

Le test unitaire d'une classe consiste a minima à tester l'état attendu des objets après application :

.	de chaque constructeur dont les cas de préconditions attendues,
.	de chaque transformateur dont les cas de préconditions attendues,


Le test unitaire d'une classe consistera donc a minima à écrire une méthode de test (ou plusieurs) par constructeur/transformateur dans laquelle :

.	on met  un objet à tester dans une situation/état particulier,

*	des lignes de codes pour créer un objet et y appliquer si besoin des méthodes transformateur pour se mettre dans la situation désirée,

.	vérifier ensuite que l'objet est bien dans l'état attendu,

*	appliquer chaque accesseur pour vérifier que la valeur retournée est bien celle attendue. On teste à la fois un constructeur/transformateur et les accesseurs.

== Écrire le test unitaire de la classe Cylindre

=== Démarrage et test des constructeurs

Ouvrir le fichier TestCylindre.java
Il contient le code de la première méthode de test du constructeur par défaut :

Le code :

[source,java]
----
public class TestCylindre extends TestCase {  // <1>

	public void testConstructeurParDefaut() { // <2>
		
		int xDeTest, yDeTest; // <3>
		double hauteurDeTest, rayonDeTest;
		double surfaceDeTest, volumeDeTest;
		Cylindre c;
		
		// Initialisations
		
		xDeTest = 0;  // <4>
		yDeTest = 0;
		hauteurDeTest = 0;
		rayonDeTest = 0;
		
		// Situation testée
		
		c = new Cylindre();  // <5>
		
		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 0;	// <6>
		volumeDeTest = 0;

		// Tests
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX()); // <7>
		TestCase.assertEquals("Echec testY", yDeTest, c.getOrigineY());
		TestCase.assertEquals("Echec test hauteur", hauteurDeTest, c.getHauteur());
		TestCase.assertEquals("Echec test rayon", rayonDeTest, c.getRayon());
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());
	}
	
	public static void main(String argv[]) {
		TestSuite suite = new TestSuite("Tests complets"); // <8>
		suite.addTestSuite(TestCylindre.class);
		junit.textui.TestRunner.run(suite);
	}
----
<1> héritage de TestCase obligatoire
<2>	l'identificateur d'une méthode de test DOIT TOUJOURS débuter par +test+
<3>	variables locales pour réaliser les tests
<4> initialisation de quelques variables pour les tests
<5> mise en place de la situation à tester (ici utilisation du constructeur par défaut)
<6> définition de l'état attendu de l'objet SANS appel des méthodes de l'objet. Par exemple faire les calculs que devrait applique un observateur
<7> la méthode statique assertEquals prend en paramètre : le message affiché si échec, la valeur attendue, la valeur actuelle
<8> la méthode +main()+ lance l’exécution de toutes les méthodes de test (toutes les méthodes dont le nom est +test...+) et affiche le rapport.

[NOTE]
=====
Lors de son exécution, la méthode statique +assertEquals(mess, val1, val2)+ : vérifie si +val1.equals(val2)+ (+==+ pour les valeurs de type de base)

*	si oui : la méthode de test continue normalement,
*	si non : le message +mess+ est affiché et la méthode de test est interrompue (mais le +main()+ continue les autres tests).
=====

*Questions* :


.	*Lancer l'exécution : le test doit fonctionner.*
.	*Modifier le constructeur par défaut de Cylindre pour positionner la hauteur à 1 => le test doit échouer. Revenir à la bonne version du constructeur.*
.	*Écrire sur ce même modèle la méthode de test du constructeur paramétré de Cylindre en donnant à x, y, rayon et hauteur des valeurs différentes les unes des autres.*
+
Rappels des calculs de surface/volume : voir tp précédent.

[IMPORTANT]
=====
Lors du test de double, des problèmes de précision et d'arrondis peuvent apparaître.

On peut utiliser une version différent de assertEquals prenant un quatrième paramètre : le delta de valeur attendue.

Exemple pour tester à 0,001 prés : +TestCase.assertEquals("...", volumeDeTest, c.volume(), 0.001);+
=====

=== Tests unitaires des transformateurs

Pour tester les transformateurs, il faudra :

*	créer un objet cylindre,
*	lui appliquer le transformateur,
*	vérifier son état.

*Question : Écrire les méthodes de test des transformateurs : setOrigineX, setOrigineY, setHauteur, setRayon. On utilisera le constructeur paramétré à chaque fois en donnant à x, y, rayon et hauteur des valeurs différentes les unes des autres.*

Conserver toujours la structure des méthodes de test :

.	Initialisations : initialiser les variables utilisées pour la situation testée.
.	Situation testée : appliquer les opérations permettant d'atteindre l'état que l'on veut vérifier (en général créer un(des) objet(s) et appliquer des transformateurs).
.	Calcul des résultats attendus : calculer les valeurs que l'on attend lors des tests qui suivent *SANS utiliser l'objet créé en 2* ni tout autre objet de la classe. Le but est de "calculer" le résultat attendu "hors" de la classe testée.
.	Tests : suite d'assertions vérifiant si l'objet créé en 2 est bien dans l'état calculé en 3 (en général une suite d'assertions vérifiant que les observateurs renvoient les bonnes valeurs).

== Test de votre programme Cylindre.java

*Question* Maintenant que le test unitaire est écrit : récupérer vos code sources de Cercle.java et Cylindre.java du TP précédent et testez-les. Si erreur => faire la mise au point.

== Pour aller plus loin : utilisation des tests pour la maintenance

=== Ajout de méthode à la classe Cylindre

*Questions* :

.	Reprendre les versions livrées de Cercle.java et Cylindre.java
.	Modifier la classe Cylindre.java

..	Ajouter une méthode +double surfaceCylindreSeul ()+ calculant la surface du cylindre sans les deux disques (formule : 2 x &Pi; x R x H)
..	Modifier la méthode +double surface()+ pour qu'elle utilise maintenant +double surfaceCylindreSeul ()+ dans son calcul.

.	La modification de la classe => la modification des tests

..	Modifier chaque méthode de test pour ajouter la vérification de la valeur retournée par +double surfaceCylindreSeul ()+
.	Lancer le test et corriger la classe jusqu'à succès.
.	Bien noter que l'on teste les deux méthodes mises à jour : +double surfaceCylindreSeul ()+ ET +double surface()+.

=== Tester la classe de quelqu'un d'autre

Un programmeur à écrit une autre version de la classe Cylindre (cf. fichier CylindreErronnee.java).

*Question* : tester cette classe (copier/coller du code dans Cylindre.java) et débogguez la classe. NE PAS modifier le test qui est juste a priori. Indiquer en commentaire dans Cylindre.java les erreurs trouvées.

ifdef::prof[]


== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution TestCylindre complète (avec surfaceCylindreSeul())
======
[source,java]
----
import junit.framework.TestCase;
import junit.framework.TestSuite;

public class TestCylindre extends TestCase {

	public void testConstructeurParDefaut() {
		
		int xDeTest, yDeTest;
		double hauteurDeTest, rayonDeTest;
		double surfaceDeTest, volumeDeTest, surfaceCylSeul;
		Cylindre c;
		
		// Initialisations
		
		xDeTest = 0;
		yDeTest = 0;
		hauteurDeTest = 0;
		rayonDeTest = 0;
		
		// Situation testée
		
		c = new Cylindre();
		
		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 0;
		volumeDeTest = 0;
		surfaceCylSeul = 0;

		// Tests
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX());
		TestCase.assertEquals("Echec testY", yDeTest, c.getOrigineY());
		TestCase.assertEquals("Echec test hauteur", hauteurDeTest, c.getHauteur());
		TestCase.assertEquals("Echec test rayon", rayonDeTest, c.getRayon());
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());
		TestCase.assertEquals("Echec test surface cylindre seul", surfaceCylSeul, c.surfaceCylindreSeul());
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());
	}
	
	public void testConstructeurParametre() {
		
		int xDeTest, yDeTest;
		double hauteurDeTest, rayonDeTest;
		double surfaceDeTest, volumeDeTest, surfaceCylSeul;
		Cylindre c;
		
		// Initialisations
		
		xDeTest = 100;
		yDeTest = 200;
		hauteurDeTest = 300;
		rayonDeTest = 400;
		
		// Situation testée
		
		c = new Cylindre(xDeTest, yDeTest, rayonDeTest, hauteurDeTest);
		
		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 2 * Math.PI * rayonDeTest * hauteurDeTest
				+ 2 * Math.PI * rayonDeTest * rayonDeTest;
		surfaceCylSeul = 2 * Math.PI * rayonDeTest * hauteurDeTest;
		volumeDeTest =  Math.PI * rayonDeTest * rayonDeTest * hauteurDeTest;

		// Tests
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX());
		TestCase.assertEquals("Echec testY", yDeTest, c.getOrigineY());
		TestCase.assertEquals("Echec test hauteur", hauteurDeTest, c.getHauteur());
		TestCase.assertEquals("Echec test rayon", rayonDeTest, c.getRayon());
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());
		TestCase.assertEquals("Echec test surface cylindre seul", surfaceCylSeul, c.surfaceCylindreSeul());
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());
	}
	
	public void testSetOrigineX() {
		
		int xDeTest, yDeTest;
		double hauteurDeTest, rayonDeTest;
		double surfaceDeTest, volumeDeTest, surfaceCylSeul;
		Cylindre c;
		
		// Initialisations
		
		xDeTest = 100;
		yDeTest = 200;
		hauteurDeTest = 300;
		rayonDeTest = 400;
		
		// Situation testée
		
		c = new Cylindre(xDeTest, yDeTest, rayonDeTest, hauteurDeTest);
		
		xDeTest = xDeTest + 100;
		c.setOrigineX(xDeTest);

		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 2 * Math.PI * rayonDeTest * hauteurDeTest
				+ 2 * Math.PI * rayonDeTest * rayonDeTest;
		surfaceCylSeul = 2 * Math.PI * rayonDeTest * hauteurDeTest;
		volumeDeTest =  Math.PI * rayonDeTest * rayonDeTest * hauteurDeTest;

		// Tests
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX());
		TestCase.assertEquals("Echec testY", yDeTest, c.getOrigineY());
		TestCase.assertEquals("Echec test hauteur", hauteurDeTest, c.getHauteur());
		TestCase.assertEquals("Echec test rayon", rayonDeTest, c.getRayon());
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());
		TestCase.assertEquals("Echec test surface cylindre seul", surfaceCylSeul, c.surfaceCylindreSeul());
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());
	}

	public void testSetOrigineY() {
		
		int xDeTest, yDeTest;
		double hauteurDeTest, rayonDeTest;
		double surfaceDeTest, volumeDeTest, surfaceCylSeul;
		Cylindre c;
		
		// Initialisations
		
		xDeTest = 100;
		yDeTest = 200;
		hauteurDeTest = 300;
		rayonDeTest = 400;
		
		// Situation testée
		
		c = new Cylindre(xDeTest, yDeTest, rayonDeTest, hauteurDeTest);
		
		yDeTest = yDeTest + 100;
		c.setOrigineY(yDeTest);

		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 2 * Math.PI * rayonDeTest * hauteurDeTest
				+ 2 * Math.PI * rayonDeTest * rayonDeTest;
		surfaceCylSeul = 2 * Math.PI * rayonDeTest * hauteurDeTest;
		volumeDeTest =  Math.PI * rayonDeTest * rayonDeTest * hauteurDeTest;

		// Tests
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX());
		TestCase.assertEquals("Echec testY", yDeTest, c.getOrigineY());
		TestCase.assertEquals("Echec test hauteur", hauteurDeTest, c.getHauteur());
		TestCase.assertEquals("Echec test rayon", rayonDeTest, c.getRayon());
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());
		TestCase.assertEquals("Echec test surface cylindre seul", surfaceCylSeul, c.surfaceCylindreSeul());
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());
	}

	public void testSetHauteur() {
		
		int xDeTest, yDeTest;
		double hauteurDeTest, rayonDeTest;
		double surfaceDeTest, volumeDeTest, surfaceCylSeul;
		Cylindre c;
		
		// Initialisations
		
		xDeTest = 100;
		yDeTest = 200;
		hauteurDeTest = 300;
		rayonDeTest = 400;
		
		// Situation testée
		
		c = new Cylindre(xDeTest, yDeTest, rayonDeTest, hauteurDeTest);
		
		hauteurDeTest = hauteurDeTest + 500;
		c.setHauteur(hauteurDeTest);

		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 2 * Math.PI * rayonDeTest * hauteurDeTest
				+ 2 * Math.PI * rayonDeTest * rayonDeTest;
		surfaceCylSeul = 2 * Math.PI * rayonDeTest * hauteurDeTest;
		volumeDeTest =  Math.PI * rayonDeTest * rayonDeTest * hauteurDeTest;

		// Tests
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX());
		TestCase.assertEquals("Echec testY", yDeTest, c.getOrigineY());
		TestCase.assertEquals("Echec test hauteur", hauteurDeTest, c.getHauteur());
		TestCase.assertEquals("Echec test rayon", rayonDeTest, c.getRayon());
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());
		TestCase.assertEquals("Echec test surface cylindre seul", surfaceCylSeul, c.surfaceCylindreSeul());
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());
	}
	
	public void testSetRayon() {
		
		int xDeTest, yDeTest;
		double hauteurDeTest, rayonDeTest;
		double surfaceDeTest, volumeDeTest, surfaceCylSeul;
		Cylindre c;
		
		// Initialisations
		
		xDeTest = 100;
		yDeTest = 200;
		hauteurDeTest = 300;
		rayonDeTest = 400;
		
		// Situation testée
		
		c = new Cylindre(xDeTest, yDeTest, rayonDeTest, hauteurDeTest);
		
		rayonDeTest = rayonDeTest + 500;
		c.setRayon(rayonDeTest);

		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 2 * Math.PI * rayonDeTest * hauteurDeTest
				+ 2 * Math.PI * rayonDeTest * rayonDeTest;
		surfaceCylSeul = 2 * Math.PI * rayonDeTest * hauteurDeTest;
		volumeDeTest =  Math.PI * rayonDeTest * rayonDeTest * hauteurDeTest;

		// Tests
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX());
		TestCase.assertEquals("Echec testY", yDeTest, c.getOrigineY());
		TestCase.assertEquals("Echec test hauteur", hauteurDeTest, c.getHauteur());
		TestCase.assertEquals("Echec test rayon", rayonDeTest, c.getRayon());
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());
		TestCase.assertEquals("Echec test surface cylindre seul", surfaceCylSeul, c.surfaceCylindreSeul());
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());
	}
	
	public static void main(String argv[]) {
		TestSuite suite = new TestSuite("Tests complets");
		suite.addTestSuite(TestCylindre.class);
		junit.textui.TestRunner.run(suite);
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution classe erronée
======
[source,java]
----
public class Cylindre extends Cercle {

	private double hauteur;
	
	public Cylindre() {
		super();
		this.hauteur = 0;
	}
	public Cylindre(int pX, int pY, double pRayon, double pHauteur) {
		super(pX, pY, pHauteur);  // ERREUR : pHauteur -> pRayon
		this.hauteur = pRayon ;  // ERREUR : pRayon -> pHauteur
	}

	public double getHauteur() {
		return hauteur;
	}

	public void setHauteur (double pHauteur) {
		hauteur = pHauteur;
	}

	public double getRayon() { // ERREUR : redéfinition erronée
		return hauteur;
	}
	
	public double surface() {
		return this.surfaceCylindreSeul() +     // ERREUR + à la place de *
				+ 2 * Math.PI * this.getRayon() + this.getRayon(); 
				// ERREUR : + this.getRayon() => * this.getRayon()
	}

	public double volume() {
		return Math.PI * this.getRayon() * this.getRayon() * this.hauteur;
	}
	
	public void afficher() { 
		super.afficher();
		System.out.println("Cylindre : hauteur " + this.hauteur);
	}
	
	public double surfaceCylindreSeul () {
		return 2 * Math.PI * this.getRayon() * this.hauteur;
	}
}
----
======

endif::prof[]

endif::todoprof[]
