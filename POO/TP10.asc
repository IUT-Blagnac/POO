:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 10
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Avoir fait le TP sur l'héritage de formes graphiques.
| {objtd}	| Générer un programme de Test pour une classe déjà écrite.
| {duree}	| *1 séance* de 1,5h sur machine.
| {depot}	| Programme de test écrit + classe Cube.java demandée.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Écrire un programme de test pour des classes déjà écrites.
*	Même si le processus standard serait inverse : écrire les tests PUIS écrire la classe.
====

[IMPORTANT]
====

Lire le début avec eux pour accélérer et en venir vite aux tests :

*	les principes de tests
*	tests {junit}
*	lire le premier tests avec eux
*	bien expliquer : Situation test, calcul des résultats attendus, tests proprement dit
====

[IMPORTANT]
====
A Suivre :

La dernière partie est optionnelle.

On peut avancer vite par copier/coller.
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

L'objectif de ce TP est de produire le programme de test {junit} de la classe Cube dont seul l'exécutable vous est donné.

Hiérarchie de classes de Cube :

[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp7.1.png[]
=====

== Mise en place de l'environnement

Récupérer depuis le serveur les fichiers : 

.	Le fichier TestCube.java : *le fichier à modifier* durant le TP.
.	Le fichier de la classe à tester : Cube.class.
.	Les fichiers des classes mères : Carre.class, Rectangle.class, FormeGraphique.class.
. 	Les fichiers :

* SciTE.properties : il paramètre Scite pour compiler/exécuter en utilisant la librairie {junit} contenue dans le fichier .jar. ainsi que le formatter de code
* junit.jar : il contient la librairie {junit} pour les tests.

.	Ensuite seulement lancer Scite et ouvrir TestCube.java.

Les fichiers livrés contiennent aussi 4 répertoires :

*	cukeOK : contient Cube.class ok de départ.
*	cubeErrone1|2|3 : des versions *volontairement* erronées de Cube.class pour faire planter votre test de la classe Cube (copier/coller dans votre répertoire de travail).


[NOTE]
=====
On ne vous livre pas le code source des classes ... exprès.

En toute rigueur, on devrait écrire le programme de test sans la classe à tester. Un autre programmeur écrirait ce source et nous donnerait ensuite son code à tester ...

Ici, on simule cela.
=====


== Principe des tests

Dans ce module (et aussi en S1), de nombreux programmes de tests automatiques {junit} vous ont été proposés pour développer vos classes.

Les tests automatiques permettent : de tester une unité "seule" : une classe en Java. On cherche à valider le code écrit pour la classe.

Les tests unitaires :

*	font une évaluation partielle : une classe,
*	ne garantissent pas le fonctionnement de l’intégralité du programme mais d'une classe seulement,
*	réalisent des tests d'assertions à vérifier sur différentes situations critiques couvrant l'ensemble des situations possibles,

**	assertion : vérifier que, compte tenu de ce qu'on attend, la classe testée produit des objets dans un état attendu.
**	assertion : 

***	vérifier qu'une condition soit vraie ou fausse,
***	vérifier la valeur retournée par un observateur,
***	vérifier qu'une exception attendue se produise bien,

*	tests unitaires == suite de tests indépendants. Un test ~= une méthode == { assertions à vérifier }
*	attention : possibilité de bug dans les tests !!

La mise en place de programmes de test peut être réalisée pour atteindre plusieurs objectifs, par exemple :

.	Maintenance logicielle : 

*	évolution des programmes au cours du temps => empêcher l'apparition de nouveaux bugs,
*	nécessité de tester après chaque modification => tests unitaires répétés à chaque modification de classe.

.	Concevoir/Développer par les tests :

*	spécifier une classe,
*	puis commencer par écrire les tests,
*	puis écriture de la classe,
*	puis écriture de méthodes de la classe erronées qui font échouer le test : test du test.

Le couple programmeATester (classe à tester)  / programmeDeTest (classe de test) que l'on maintient dans le temps en équilibre peut s’intégrer dans les processus industriels d’intégration continue, de Tiers Maintenance Applicative (TMA) ou de contribution logicielle (par exemple libre).

== Tests {junit}

=== {junit}  c'est quoi
{junit} c'est : un *environnement* pour programmer des tests unitaires qui propose un ensemble de classes, méthodes, macros, etc facilitant leur écriture. De tels environnements existent aussi dans d’autres langages C++, C, C#, ...

{junit} permet :

*	d’écrire les tests,
*	d’automatiser en partie leur lancement,
*	de récupérer tous les tests échoués,
*	tous les tests sont "joués" (réalisés) en une fois !

===	Tests unitaires simples de classes

[NOTE]
=====
La méthodologie de test appliquée ici reste partielle. 

L'objectif est de comprendre le principe.
=====

Le test unitaire d'une classe consiste a minima à tester l'état attendu des objets après application :

.	de chaque constructeur dont les cas de préconditions attendues,
.	de chaque transformateur dont les cas de préconditions attendues,


Le test unitaire d'une classe consistera donc a minima à écrire une méthode de test (ou plusieurs) par constructeur/transformateur dans laquelle :

.	on met  un objet à tester dans une situation/état particulier,

*	des lignes de codes pour créer un objet et y appliquer si besoin des méthodes transformateur pour se mettre dans la situation désirée,

.	vérifier ensuite que l'objet est bien dans l'état attendu,

*	appliquer chaque accesseur pour vérifier que la valeur retournée est bien celle attendue. On teste à la fois un constructeur/transformateur et les accesseurs.

== Écrire le test unitaire de la classe Cube

=== Démarrage et test des constructeurs

Ouvrir le fichier TestCube.java
Il contient le code de la première méthode de test du constructeur par défaut :

Le code :

[source,java]
----

import junit.framework.TestCase;
import junit.framework.TestSuite;


public class TestCube extends TestCase { // <1>

	public void testConstructeurParDefaut() { // <2>
		
		int xDeTest, yDeTest;  // <3>
		int coteDeTest;        // <3>
		double surfaceDeTest, volumeDeTest; // <3>
		Cube c;
		
		// Initialisations
		
		xDeTest = 0;    // <4>
		yDeTest = 0;    // <4>
		coteDeTest = 0; // <4>
		
		// Situation testée
		
		c = new Cube ();  // <5>
		// autres instructions éventuelles
		
		// Calcul des résultats attendus
		// Les autres variables ne changent pas
		
		surfaceDeTest = 0;  // <6>
		volumeDeTest = 0;   // <6>

		// Assertions : les "vrais tests" (toute la méthode forme un seul test (arrêt première assertion fausse))
		
		TestCase.assertEquals("Echec test X", xDeTest, c.getOrigineX());           // <7>
		TestCase.assertEquals("Echec test Y", yDeTest, c.getOrigineY());            // <7>
		TestCase.assertEquals("Echec test coté", coteDeTest, c.getCote());         // <7>
		TestCase.assertEquals("Echec test surface", surfaceDeTest, c.surface());   // <7>
		TestCase.assertEquals("Echec test volume", volumeDeTest, c.volume());      // <7>
		
		TestCase.assertEquals("Echec test largeur", coteDeTest, c.getLargeur());   // <7>
		TestCase.assertEquals("Echec test longueur", coteDeTest, c.getLongueur());  // <7>
	}	
	
	public static void main(String[] argv) {   // <8>
		TestSuite suite = new TestSuite("Tests complets"); // <8>
		suite.addTestSuite(TestCube.class); // <8>
		junit.textui.TestRunner.run(suite); // <8>
	}
}
----
<1> héritage de TestCase obligatoire
<2>	l'identificateur d'une méthode de test DOIT TOUJOURS débuter par +test+
<3>	variables locales pour réaliser les tests
<4> initialisation de quelques variables pour les tests
<5> mise en place de la situation à tester (ici utilisation du constructeur par défaut), on peut utiliser des méthodes, ...
<6> définition de l'état attendu de l'objet SANS appel des méthodes de l'objet. Par exemple faire les calculs que devrait applique un observateur (calcul de surface, ...)
<7> la méthode statique assertEquals prend en paramètre : le message affiché si échec, la valeur attendue, la valeur actuelle
<8> la méthode +main()+, même si elle reste "mystérieuse" en l'état, lance l’exécution de toutes les méthodes de test (toutes les méthodes dont le nom est +test...+) et affiche le rapport.

[NOTE]
=====
Lors de son exécution, la méthode statique +assertEquals(mess, val1, val2)+ : vérifie si +val1.equals(val2)+ (+==+ pour les valeurs de type de base)

*	si oui : la méthode de test continue normalement,
*	si non : le message +mess+ est affiché et la méthode de test est interrompue (mais le +main()+ continue les autres tests).
=====

*Questions* :


.	*Lancer l'exécution : le test actuel TestCube doit fonctionner.*
.	*Copier/coller un des Cube.class erroné => le test doit échouer. Revenir à la bonne version de Cube.class pour la suite.*
.	*Écrire sur ce même modèle la méthode de test du constructeur paramétré de Cube en donnant à x, y et côté des valeurs différentes les unes des autres.*
+
Rappels des calculs de surface/volume : vous vous en rappelez ...

[IMPORTANT]
=====
Lors du test de double, des problèmes de précision et d'arrondis peuvent apparaître.

On peut, si besoin, utiliser une version différent de assertEquals prenant un quatrième paramètre : le delta de valeur attendue.

Exemple pour tester à 0,001 prés : +TestCase.assertEquals("...", volumeDeTest, c.volume(), 0.001);+
=====

=== Tests unitaires des transformateurs

Pour tester les transformateurs, il faudra :

*	créer un objet Cube,
*	lui appliquer le transformateur,
*	vérifier son état après.

*Question : Écrire les méthodes de test des transformateurs : setOrigineX, setOrigineY, setCote, setLargeur, setLongueur. On utilisera le constructeur paramétré à chaque fois en donnant à x, y, et côté  des valeurs différentes les unes des autres. On vérifiera à chaque test que TOUS les accesseurs donnent la bonne valeur (pas de perturbation interne à l'objet)*

Conserver toujours la structure des méthodes de test :

.	Initialisations : initialiser les variables utilisées pour la situation testée.
.	Situation testée : appliquer les opérations permettant d'atteindre l'état que l'on veut vérifier (en général créer un(des) objet(s) et appliquer des transformateurs).
.	Calcul des résultats attendus : calculer les valeurs que l'on attend lors des tests qui suivent *SANS utiliser l'objet créé en 2* ni tout autre objet de la classe. Le but est de "calculer" le résultat attendu "hors" de la classe testée.
.	Tests : suite d'assertions vérifiant si l'objet créé en 2 est bien dans l'état calculé en 3 (en général une suite d'assertions vérifiant que TOUS les observateurs renvoient les bonnes valeurs).

== Comme si on avait écrit les tests avant ...

*Question* Ecrire la classe Cube.java héritant de Carre. Tester, si erreur => faire la mise au point.

== Pour aller plus loin : utilisation des tests pour la maintenance : Ajout de méthode à la classe Cube

On se met en situation de maintenance : la classe Cube est écrite depuis plusieurs années et on demande de rajouter des méthodes. Il faudra donc :

*	Ajouter les méthodes demandées (TODO)
*	Modifier les tests en conséquence (TODO)
*	Rejouer l'ensemble des tests pour garantir le fonctionnement de toute la classe : un run suffit ...

*Questions* :

.	Modifier la classe Cube.java

..	Ajouter une méthode +double surfaceSurLaHauteur ()+ calculant la surface du Cube sans les faces planes avant et arrière (4 côtés seulement) 
..	Ajouter une méthode +double diagonaleCube ()+ calculant la longueur de la diagonale du cube

***	Voir +public static double Math.sqrt(double val)+ : calcul de la racine carrée d'une valeur.

..	Les utilisateurs parlent de "hauteur" d'un Cube, autant que du "côté" d'un cube. Ajouter 2 méthodes qui modifient le côté du Cube :

...	+void setHauteur (int pfHauteur)+ : qui fait de +pfHauteur+ le côté du Cube.
...	+int getHauteur ()+ : renvoie la valeur de la hauteur (le côté donc ...)

.	La modification de la classe => la modification des tests. Intégrer les accesseurs transformateurs définis dans les tests :

..	Modifier chaque méthode de test pour ajouter la vérification de la valeur retournée par les accesseurs ajoutés : +double surfaceSurLaHauteur ()+, +double diagonaleCube ()+ et +int getHauteur ()+
..	Ajouter une méthode de test pour tester +void setHauteur (int pfHauteur)+
.	Lancer le test et corriger la classe Cube.java jusqu'à succès.

[IMPORTANT]
=====
Bien noter que l'on teste méthodes ajoutées.

En modifiant et rejouant TOUS les tests, on teste la stabilité de la classe entière (même si ici on s'y attendait ...).
=====



ifdef::prof[]


== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution TestCube complète (avec méthodes ajoutées)
======
[source,java]
----
include::src/TP10/TestCube.java[] 
----
======


[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Classes Erronées Distribuées
======
[source,java]
----
include::src/TP10/Cube_V1.java[] 


include::src/TP10/Cube_V2.java[] 


include::src/TP10/Cube_V3.java[] 
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Cube
======
[source,java]
----
include::src/TP10/Cube_V0_OK.java[]  
----
======


endif::prof[]

endif::todoprof[]
