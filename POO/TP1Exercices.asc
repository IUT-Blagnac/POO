:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 1 - Exercices
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'entête -----------
ifndef::slides[]

ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD1. S1, notion de type, variables simples, tableaux.
| {objtd}	| *Apprendre à utiliser un debugger - Comprendre le fonctionnement d'un programme*.
| {duree}	| *2 séance* de 1,5h sur machine
| {depot}	| Construire un fichier (txt, word) contenant les question (copier/coller) et les réponses.
|======================
====
endif::prof[]
endif::slides[]

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

- Faire du pas à pas tout le temps.
- Si ils ont du mal : faire un exercice avec eux.
- Si pb pour comprendre les boucles, décomposer les for en 3 lignes (affectation/test/incrémentation)
- Le sujet est peut être long (première année). *Il faudrait traiter les exercices sur les objets*.

- Faire la première partie avec eux pas trop vite : manipulations Eclipse
- Si ce n'est pas le cas, leur faire bouger le panel Variables de Eclipse en mode debug à droite du code et agrandir pour voir un maximum de code et de variables

* On peut même déplacer ce panel à droite pour avoir un seul panel qui prend toute la hauteur de la fenêtre.

- Leur faire bien arrêter les programmes (icône "carré rouge") en fin de pas à pas.


- Leur faire remarquer :

* les variables qui apparaissent au fur et à mesure des initialisations,
* les tableaux qui ont des valeurs "(id=...)" -> numéro d'objet unique (identifiant)
* les objets qui ont des valeurs "(id=...)" -> numéro d'objet unique (identifiant)
====
endif::todoprof[]

ifndef::todoprof[]

== Compte rendu attendu

Construire un fichier (txt, word) contenant :

- les question (copier/coller)
- et vos réponses.

== Programmes avec variables de type de base

=== Programme à tracer pas à pas

. Dans le programme suivant :
* Poser un point d'arrêt sur la ligne <1>.
* Exécuter pas à pas ce programme.
. Donner la valeur de chaque variable en fin d'exécution (CR).

[source,java]
----
public static void main(String argv[]) {
	int i, j ;
	double d, e;
	i = 1;  //  <1>
	j = i + 1 ;
	d = 0;
	e = 10.5;
	if (e > i)
		d = e ;  //  <2>
		j = (int) (d - e) ;  // <3>
}
----

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. i : 1
. j : 0
. d : 10.5
. e : 10.5
====
endif::prof[]

=== Correction du programme

. Reprendre le programme précédent et remplacer i=1; par i=100 en <1>.
. Exécuter pas à pas ce programme.
. Donner la valeur de chaque variable en fin d'exécution (CR).
. La valeur de d a t-elle été modifiée en <2> (CR) ?
. La valeur de j a t-elle été modifiée en <3> (CR) ?
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. i : 100
. j : -10
. d : 0.0
. e : 10.5

+j+ a t-elle été modifiée car hors du if (pas d'accolades)
====
endif::prof[]

. Modifier le programme pour que d et j ne soient modifiées en <1> et <2> uniquement si la condition (e > i) est vraie (structure du si).
* d vaudra 0.0 à la fin, et j vaudra 101
. Noter que l'indentation du programme était ... trompeuse.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source,java]
----
if (e > i)
{
	d = e ; 
	j = (int) (d - e) ; 
}
----
====
endif::prof[]

== Programmes avec variables de type tableau

. Dans le programme suivant :
* Poser un point d'arrêt sur la ligne <1>.
* Exécuter pas à pas ce programme et indiquer ce qui est affiché (CR).
* Quelles sont les valeurs de i en <2>, <3>, <4> ?

[source,java]
-------
public static void main(String argv[]) {
	int tab [],  i, som; 
	int tab3 [] = {1, 2, 3};  // <1>
	
	tab = new int [5];
	for (i = 0; i < tab.length; i++) {
		tab[i] = 20+i;
	}
	// <2>
	for (i = 0; i < tab.length; i++) {
		System.out.println (tab[i]);
	}
	// <3>
	som = 0;
	for (i = 0; i < tab3.length; i++) {
		som = som + tab3[i];
	}
	// <4>
	System.out.println (som);
}
-------

[IMPORTANT]
.ATTENTION
=====
A noter : le debugger affiche en face des variables tableaux "(id=..)" : c'est l'identifiant d'objet.
Noter aussi que la séparation entre la pile et le tas n'est pas indiquée clairement. Mais les variables du sous-programme qui s'exécute sont dans la pile, les tableaux sont dans le tas.
=====

[IMPORTANT]
.ATTENTION
=====
Penser dans le debugger à "dérouler" le tableau. Icône triangle à côté de la variable tableau.
+
image:images/TP1VariablesTableaux.png[]
=====

== Je compte, tu comptes, le for compte ...

. Reprendre le programme suivant indenté de façon particulière pour bien comprendre le fonctionnement.
. Poser un point d'arrêt sur la ligne <1>.
. Exécuter pas à pas ce programme et à chaque point <2> à <8>, indiquer dans le CR :

* les valeurs des cases du tableau tab,
* la valeur finale de l'indice utilisé par le for
** Exemple : en 2 : tab : [20, 21, 22, 23, 24], i vaut 5

. Des bugs peuvent être présents : les corriger lorsque de besoin pour que le programme fonctionne.

[source,java]
-------
public static void main(String argv[]) {
	int tab [] ;
	int i, j, k, l, m, n, o, p ;  // <1>
	
	tab = new int [5];
	i = 1;
	for (i = 0; 
		 i < tab.length;
		 i++)
	{
		tab[i] = 20+i;
	}
	// <2>
	for (j = 0; 
		 j <= tab.length-1;
		 j++)
	{
		tab[j] = 50+j;
	}
	// <3>
	for (k = 1; 
		 k <= tab.length; 
		 k++)
	{
		tab[k-1] = 100+k;
	}
	// <4>
	for (l = 0;
		 l < tab.length;
		 j++)
	{
		tab[l] = 200+l;
	}
	// <5>
	for (m = 0; 
		 m <= tab.length; 
		 m++)
	{
		tab[m] = 400+m;
	}
	// <6>
	for (n = 0; 
		 n < tab.length;
		 n=n+2)
	{
		tab[n] = 500+n;
	}
	// <7>
	for (o = 0;
		 o < tab.length;
		 o=o+3)
	{
		tab[o] = 600+o;
	}
	// <8>
}
-------

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source,java]
----
<2> : tab : [20, 21, 22, 23, 24], i vaut 5
<3> : tab : [50, 51, 52, 53, 54], j vaut 5
<4> : tab : [101, 102, 103, 104, 105], k vaut 6
<5> : bug j++ -> l++ | tab : [200, 201, 202, 203, 204], l vaut 5
<6> : bug m <= tab.length -> m < tab.length; | tab : [400, 401, 402, 403, 404], m vaut 5
<7> : tab : [500, 401, 502, 403, 504], n vaut 6
<8> : tab : [600, 401, 502, 603, 504], o vaut 6
----
====
endif::prof[]

== Passage de paramètres : variables de type simple

=== Exemple simple

. Reprendre le code du début du tp (cf. ci-dessous);

[source,java]
-------
public static double plusPlus (double a, int d) {
	double res;
	
	res = a + d + 1;
	return res;
}
public static void main(String argv[]) {
	double ageDebut;
	int anneesEtudes;
	double ageFinEtudes;
	
	ageDebut = 23;
	anneesEtudes = 5 ; 
	ageFinEtudes = ClasseEssai.plusPlus (ageDebut, anneesEtudes); // <1>
	System.out.println ("Votre age en fin de parcours d'études : " + ageFinEtudes); // <2>
}
-------

. Exécuter pas à pas à partir du début du main jusqu'à <1>
. A cet endroit quelles sont les valeurs de ageDebut et anneesEtudes ?
. Rentrer dans l'exécution de ClasseEssai.test() -> "Step Into".
. A l'entrée dans le sous-programme :

* Quelles sont les valeurs de a et d ? 
* Pourquoi ?

. Exécuter pas à pas jusqu'à revenir en <1>
. Quelle valeur est affectée à ageFinEtudes ?

=== Des variables de même identificateur dans des sous-programmes différents - Portée des variables.

. Modifier le programme ci-dessus pour changer dans ClasseEssai.test() :

* l'identificateur a par ageDebut 
* l'identificateur d par anneesEtudes 
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source,java]
-------
public static double plusPlus (double ageDebut, int anneesEtudes) {
	double res;
	
	res = ageDebut + anneesEtudes + 1;
	return res;
}
-------
====
endif::prof[]

. Ré exécuter pas à pas comme ci-dessus. Cela doit fonctionner.
. Pour autant les variables déclarées dans test() et main() sont indépendantes :

* dans test ajouter les deux lignes suivantes juste avant le return (après le calcul)

** ageDebut = 0;
** anneesEtudes = 0;
+
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source,java]
-------
public static double plusPlus (double ageDebut, int anneesEtudes) {
	double res;

	res = ageDebut + anneesEtudes + 1;

	ageDebut = 0;
	anneesEtudes = 0;

	return res;
}
-------
====
endif::prof[]

* Ré exécuter pas à pas comme ci-dessus. 
* Quelles sont les valeurs de ageDebut et anneesEtudes dans le main() après retour du sous-programme test() ? (en <2> par exemple).
ifdef::prof[]
+
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
ageDebut -> 23.0
anneesEtudes -> 5
====
endif::prof[]

== Passage de paramètres : tableaux

Reprendre le programme suivant.

[source,java]
-------
public class ClasseEssai {
	public static void afficheTab (int[] t) { 
		int i; 
		
		for (i=0; i<t.length; i++) {
			System.out.println(t[i]); 
		} 
	}
	public static int somTab (int[] t) {
		int i, som;
		som = 0;
		
		for (i=0; i<t.length; i++) {
			som = som+t[i]; 
		}
		return som;
	}
	public static void changeTab (int[] t) {
		int i ;
		
		for (i=0; i<t.length; i++) {
			t[i] = t[i] * 100; 
		}
	}
	
	public static void main(String argv[]) {
		int tab [],  i, som; 
		int tab3 [] = {1, 2, 3}; // <1>
		
		tab = new int [5]; 
		for (i = 0; i < tab.length; i++) {
			tab[i] = 20+i;
		}
		ClasseEssai.afficheTab(tab); // <2>
		System.out.println ( ClasseEssai.somTab(tab) ); // <3>
		System.out.println ( ClasseEssai.somTab(tab3) ); // <4>
		ClasseEssai.changeTab(tab); // <5>
		ClasseEssai.afficheTab(tab); // <6>
	}
}
-------

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire et donner les informations suivantes dans le CR :
.. En <2> : quel est l'identifiant de tableau contenu dans tab ?
.. Entrer dans l'exécution de afficheTab(). Quel est l'identifiant de tableau contenu dans t ?
.. Quelles valeurs affiche à l'écran afficheTab() ?
.. Continuer jusqu'en <3>
.. En <3> : quel est l'identifiant de tableau contenu dans tab ?
.. Entrer dans l'exécution de somTab(). Quel est l'identifiant de tableau contenu dans t ?
.. Qu'affiche au final la ligne <3> ?
.. Continuer jusqu'en <4>
.. En <4> : quel est l'identifiant de tableau contenu dans tab3 ?
.. Entrer dans l'exécution de somTab(). Quel est l'identifiant de tableau contenu dans t ?
.. Qu'affiche au final la ligne <4> ?
.. Continuer jusqu'en <5>
.. En <5> : quel est l'identifiant de tableau contenu dans tab ?
.. Entrer dans l'exécution de changeTab(). Quel est l'identifiant de tableau contenu dans t ?
.. Continuer jusqu'en <6>
.. Inspectez les valeurs contenues dans le tableau tab. Est ce normal ?
.. Que va afficher l'exécution de la ligne <6> ?

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
 <2> afficheTab() -> 20 - 21 - 22 - 23 - 24
 <3> 110
 <4> 6
 <6> 2000 - 2100 - 2200 - 2300 - 2400
====
endif::prof[]

== Manipulations d'objets

=== Un premier cas simple 

Reprendre le code source suivant complet. Indiquer dans le CR ce que ce programme affiche et prenez le temps de comprendre l'implantation mémoire.

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire le programme et indiquer dans le compte rendu ce qu'affiche ce programme.
. Prenez le temps de comprendre la structure créée par les objets et que l'on visualise par le debugger.

* En particulier :
** le lien créé en <2> entre "anakin" et "shmi"
** le lien créé en <3> entre "padme" et "anakin"
** le lien créé en <4> entre "anakin" et "padme"

[IMPORTANT]
.Attention
=====
Notez que le debugger affiche les objets sous forme "arborescente". De ce fait :

* Un même objet peut se "voir" à plusieurs endroits.
* On les reconnaît car ils ont le même id 
** Cas de "Shmi" dont l'id (et la description) se retrouve en descendant de "Anakin"
** Cas de "Anakin" dont l'id (et la description) se retrouve en conjoint de "Padme"
** Cas de "Padme" dont l'id (et la description) se retrouve en conjoint de "Anakin"

Notez que les numéros d'objets affichés sont différents des "id" affichés par le debugger. Ils sont néanmoins équivalent (identifiant unique).

Notez aussi que la valeur null est affichée en 0.
=====

[source,java]
-------
public class ClasseEssai {

	public static void main(String[] arguments) throws Exception {
		
		Personne shmi, anakin, padme ;
		
		shmi = new Personne("Shmi","Skywalker","feminin",null,null); // <1>
		anakin = new Personne("Anakin","Skywalker","masculin",shmi,null); // <2>
		padme = new Personne("Padme","Amidala","feminin",null,anakin);  // <3>
		anakin.setConjointDe (padme) ; // <4>

		System.out.println(shmi);
		System.out.println(anakin);
		System.out.println(padme);
	}
}

//Type Personne
class Personne {
	private String nom ;
	private String prenom ;
	private String sexe ;
	private Personne descendantDe ;
	private Personne conjointDe ;

	// Constructeur
	// usage:
	// Personne parent, conjoint ;
	// Personne p = new Personne("prenom","nom","feminin",parent,conjoint);
	Personne(String valeurInitialePrenom, String valeurInitialeNom, String valeurInitialeSexe, Personne valeurInitialeDescendantDe, Personne valeurInitialeConjointDe){
		nom = valeurInitialeNom ;
		prenom = valeurInitialePrenom ;
		sexe = valeurInitialeSexe ;
		descendantDe = valeurInitialeDescendantDe ;
		conjointDe = valeurInitialeConjointDe ;
	}

	public void setConjointDe (Personne p) {
		this.conjointDe = p;
	}

	public String toString() { // Appelée lorsqu'on fait System.out.println(unePersonne);
		String resultat = "" ;
		resultat = resultat + "\nPersonne: " + System.identityHashCode(this) + "\n" ;
		resultat = resultat + "  Nom: " + nom + "\n" ;
		resultat = resultat + "  Prenom: " + prenom + "\n" ;
		resultat = resultat + "  Sexe: " + sexe + "\n" ;
		resultat = resultat + "  Conjoint de: " + System.identityHashCode(conjointDe) + "\n" ;
		resultat = resultat + "  Descendant de: " + System.identityHashCode(descendantDe) ;
		return resultat ;
	}
}
-------

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
 Personne: 1901116749
  Nom: Skywalker
  Prenom: Shmi
  Sexe: feminin
  Conjoint de: 0
  Descendant de: 0
 Personne: 1807500377
  Nom: Skywalker
  Prenom: Anakin
  Sexe: masculin
  Conjoint de: 355165777
  Descendant de: 1901116749
 Personne: 355165777
  Nom: Amidala
  Prenom: Padme
  Sexe: feminin
  Conjoint de: 1807500377
  Descendant de: 0
====
endif::prof[]

=== Exercice : en vraie grandeur : visualiser un TP déjà fait

Reprendre le code source suivant complet. Indiquer dans le CR ce que ce programme affiche et prenez le temps de comprendre l'implantation mémoire.

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire le programme et indiquer dans le compte rendu ce qu'affiche ce programme.
. Prenez le temps de comprendre la structure créée par les objets et le tableau et que l'on visualise par le debugger.
. Comprendre les lignes <2>, <3>, <4>

[source,java]
-------
public class ClasseEssai {

	public static void main(String[] arguments) throws Exception {
		Personne[] familleSkywalker ;
		int i;
		
		familleSkywalker = ClasseEssai.init(); 
		for (i=0; i<familleSkywalker.length; i++)
			System.out.println(familleSkywalker[i]); 
	}

	public static Personne[] init() {
		Personne[] famille ;
		famille = new Personne[15];

		Personne shmi = new Personne("Shmi","Skywalker","feminin",null,null);
		famille [0] = shmi;
		Personne anakin = new Personne("Anakin","Skywalker","masculin",shmi,null);
		famille [1] = anakin;
		Personne padme = new Personne("Padme","Amidala","feminin",null,anakin);
		anakin.setConjointDe (padme) ;
		famille [2] = padme;
		Personne leia = new Personne("Leia","Organa","feminin",anakin,null);
		famille [3] = leia;
		Personne han = new Personne("Han","Solo","masculin",null,leia);
		leia.setConjointDe (han) ;
		famille [4] = han;
		Personne luke = new Personne("Luke","Skywalker","masculin",anakin,null);
		famille [5] = luke;
		Personne mara = new Personne("Mara","Jade","feminin",null,luke);
		luke.setConjointDe(mara);
		famille [6] = mara;
		Personne ben = new Personne("Ben","Skywalker","masculin",luke,null);
		famille [7] = ben;
		Personne jacen = new Personne("Jacen","Solo","masculin",leia,null);
		famille [8] = jacen;
		Personne jaina = new Personne("Jaina","Solo","feminin",leia,null);
		famille [9] = jaina;
		Personne anakinsolo = new Personne("Anakin","Solo","masculin",leia,null);
		famille [10] = anakinsolo ;
		Personne nat = new Personne("Nat","Skywalker","masculin",ben,null);
		famille [11] = nat;
		Personne kol = new Personne("Kol","Skywalker","masculin",ben,null);
		famille [12] = kol;
		
		famille [13] = new Personne("Morrigan","Corde","feminin",null,kol); // <2>
		kol.setConjointDe(famille[13]); // <3>
		famille [14] = new Personne("Cade","Skywalker","masculin",kol,null); // <4>
		
		return famille ;
	}
}

//Type Personne
class Personne {
	private String nom ;
	private String prenom ;
	private String sexe ;
	private Personne descendantDe ;
	private Personne conjointDe ;

	// Constructeur
	// usage:
	// Personne parent, conjoint ;
	// Personne p = new Personne("prenom","nom","feminin",parent,conjoint);
	Personne(String valeurInitialePrenom, String valeurInitialeNom, String valeurInitialeSexe, Personne valeurInitialeDescendantDe, Personne valeurInitialeConjointDe){
		nom = valeurInitialeNom ;
		prenom = valeurInitialePrenom ;
		sexe = valeurInitialeSexe ;
		descendantDe = valeurInitialeDescendantDe ;
		conjointDe = valeurInitialeConjointDe ;
	}

	public void setConjointDe (Personne p) {
		this.conjointDe = p;
	}

	public String toString(){
		String resultat = "" ;
		resultat = resultat + "\nPersonne: " + System.identityHashCode(this) + "\n" ;
		resultat = resultat + "  Nom: " + nom + "\n" ;
		resultat = resultat + "  Prenom: " + prenom + "\n" ;
		resultat = resultat + "  Sexe: " + sexe + "\n" ;
		resultat = resultat + "  Conjoint de: " + System.identityHashCode(conjointDe) + "\n" ;
		resultat = resultat + "  Descendant de: " + System.identityHashCode(descendantDe) ;
		return resultat ;
	}
}
-------

=== Objet et passage de paramètres

Reprendre le code source suivant complet. Indiquer dans le CR ce que ce programme affiche et prenez le temps de comprendre l'implantation mémoire.

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire le programme et indiquer dans le compte rendu ce qu'affiche ce programme.
. Prenez le temps de comprendre : relever le numéro d'objet :

* de schmi en <2>
* de p en <3>
* de this en <4>

[source,java]
-------
public class ClasseEssai {

	public static void main(String[] arguments) throws Exception {
		
		Personne shmi, anakin, padme ;
		
		shmi = new Personne("Shmi","Skywalker","feminin",null,null); // <1>
		System.out.println(shmi);
		
		ClasseEssai.testChangeObjet(shmi) ; // <2>
		System.out.println(shmi);
	}
	
	public static void testChangeObjet (Personne p) {
		p.setNom ("Nouveau nom", "Autre prénom"); // <3>
	}
}

//Type Personne
class Personne {
	private String nom ;
	private String prenom ;
	private String sexe ;
	private Personne descendantDe ;
	private Personne conjointDe ;

	// Constructeur
	// usage:
	// Personne parent, conjoint ;
	// Personne p = new Personne("prenom","nom","feminin",parent,conjoint);
	Personne(String valeurInitialePrenom, String valeurInitialeNom, String valeurInitialeSexe, Personne valeurInitialeDescendantDe, Personne valeurInitialeConjointDe){
		nom = valeurInitialeNom ;
		prenom = valeurInitialePrenom ;
		sexe = valeurInitialeSexe ;
		descendantDe = valeurInitialeDescendantDe ;
		conjointDe = valeurInitialeConjointDe ;
	}

	public void setNom (String n, String p) {
		this.nom = n; // <4>
		this.prenom = p;
	}
	
	public void setConjointDe (Personne p) {
		this.conjointDe = p;
	}

	public String toString() { // Appelée lorsqu'on fait System.out.println(unePersonne);
		String resultat = "" ;
		resultat = resultat + "Personne: " + System.identityHashCode(this) + "\n" ;
		resultat = resultat + "  Nom: " + nom + "\n" ;
		resultat = resultat + "  Prenom: " + prenom + "\n" ;
		resultat = resultat + "  Sexe: " + sexe + "\n" ;
		resultat = resultat + "  Conjoint de: " + System.identityHashCode(conjointDe) + "\n" ;
		resultat = resultat + "  Descendant de: " + System.identityHashCode(descendantDe) ;
		return resultat ;
	}
}
-------

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
 Personne: 1807500377
  Nom: Skywalker
  Prenom: Shmi
  Sexe: feminin
  Conjoint de: 0
  Descendant de: 0

 Personne: 1807500377
  Nom: Nouveau nom
  Prenom: Autre prénom
  Sexe: feminin
  Conjoint de: 0
  Descendant de: 0
====
endif::prof[]

== Algorithmes à comprendre

=== Exercice : algorithme de recherche de valeur

Reprendre le code source suivant. La fonction estPresent() est censée rechercher si oui (true) ou non (false), la valeur val existe dans le tableau t.

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire le programme et indiquer dans le compte rendu :

* Dans quel cas (unique) estPresent() renvoie true ?  (valeurs tu tableau et valeur recherchée)
* Quel bug se cache dans estPresent() compte tenu de l'objectif fixé plus haut ?
* Corriger la fonction estPresent() pour qu'elle s'arrête le "plus tôt possible" (trouver 20 en moins de 10 tours de boucle). 

[source,java]
-------
public class ClasseEssai {
	public static boolean estPresent (int[] t, int val) { 
		int i;
		boolean trouve ;
		
		trouve = false;
		
		for (i=0; i<t.length; i++) {
			if (t[i] == val) {
				trouve = true;
			} else {
				trouve = false;
			}
		}
		return trouve;
	}
		
	public static void main(String argv[]) {
		int tab [];
		boolean resultat;
		
		tab = new int[10];   //  <1>
		tab[0]= 0;    tab[1]=100;   tab[2]=20;   tab[3]=90;   tab[4] = 30;
		tab[5]= 80;   tab[6]=40;    tab[7]=70;   tab[8]=50;   tab[9] = 60; 
		
		resultat = ClasseEssai.estPresent(tab, -999); 
		if (resultat) {
			System.out.println("Bug ...");
		}else {
			System.out.println("-999 n'a pas été trouvé");
		}

		if (ClasseEssai.estPresent(tab, 20)) {
			System.out.println("20 a été trouvé");
		}else {
			System.out.println("Bug ...");
		}
	}
}
-------

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Problème du else dans la fonction.
[source,java]
-------
public static boolean estPresent (int[] t, int val) { 
	int i;
	boolean trouve ;
	
	trouve = false;
	i=0
	while (i < t.length && ! trouve) {
		if (t[i] == val) {
			trouve = true;
		}
		i++;
	}
	return trouve;
}
-------
====
endif::prof[]

=== Exercice : un cas connu

Par une (ou plusieurs) exécution pas à pas, trouver ce que fait le sous-programme mystère() ... quel serait le nom approprié et l'algorithme utilisé ?

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire le programme.

[source,java]
-------
public class ClasseEssai {
	public static void mystere (int[] tab) {
		int a, i ;
		boolean c = true ;
		while (c) {
			c = false ;
			for (i = 0; i < (tab.length - 1); i++) {
				if (tab[i] > tab[i+1]) {
					a = tab[i];
					tab[i] = tab[i+1];
					tab[i+1] = a;
					c = true ;
				}
			}
		}
	}
	public static void main(String argv[]) {
		int tab [], i;
		int [] tab2 = { 5, 10, 11, 12, 20, 23 };
		
		tab = new int[10];   //  <1>
		tab[0]= 0;    tab[1]=100;   tab[2]=20;   tab[3]=90;   tab[4] = 30;
		tab[5]= 80;   tab[6]=40;    tab[7]=70;   tab[8]=50;   tab[9] = 60; 

		ClasseEssai.mystere (tab2);
		for (i=0; i<tab2.length; i++) {
			System.out.println(tab2[i]);
		}
		ClasseEssai.mystere (tab);
		for (i=0; i<tab.length; i++) {
			System.out.println(tab[i]);
		}
	}
}
-------

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Tri bulle (non optimisé).
====
endif::prof[]

=== Exercice : nouveau mais simple

Par une (ou plusieurs) exécution pas à pas, trouver ce que fait le sous-programme mystère2() ?

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire le programme.

[source,java]
-------
public class ClasseEssai {
	public static int  mystere2 (int x, int y) {
		int z;
		int s;
		int r;
		
		if (x < y) {
			z=x;
			x=y;
			y=z;
		}
		r = y;
		s=0;
		while (x-y > 0) {
			s = x-y;
			if (s < y) {
				x = y;
				y = s;
				r = s;
			} else {
				x = s;
				r = y;
			}
		}
		return r;
	}
	public static void main(String argv[]) {
		
		int val1, val2, res ;
		
		val1 = 2 ; // <1>
		val2 = 5 ;
		res = ClasseEssai.mystere2 (val1, val2);
		System.out.println( "Pour " + val1 + " et " + val2 + ": " + res );
		val1 = 5 ; // <1>
		val2 = 2 ;
		res = ClasseEssai.mystere2 (val1, val2);
		System.out.println( "Pour " + val1 + " et " + val2 + ": " + res );
		val1 = 10 ; // <1>
		val2 = 5 ;
		res = ClasseEssai.mystere2 (val1, val2);
		System.out.println( "Pour " + val1 + " et " + val2 + ": " + res );
		val1 = 36 ; // <1>
		val2 = 24 ;
		res = ClasseEssai.mystere2 (val1, val2);
		System.out.println( "Pour " + val1 + " et " + val2 + ": " + res );
	}
}
-------

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
PGCD (val1, val2) par soustractions successives.
====
endif::prof[]

=== Exercice : un cas plus dur

Par une (ou plusieurs) exécution pas à pas, trouver ce que fait le sous-programme mystère3() ?

. Mettre un point d'arrêt en <1>
. Exécuter pas à pas plusieurs fois si nécessaire le programme.
. Regarder le panel "Debug" de Eclipse...

[source,java]
-------
public class ClasseEssai {
	public static int  mystere3 (int x) {
		int r;
		
		r = 0;
		if (x == 0 || x == 1) {
			r = 1;
		} else {
			r = x * mystere3 (x-1);
		}
		return r;				
	}
	public static void main(String argv[]) {
		
		int val, res ;
		
		val = 2; // <1>
		res = ClasseEssai.mystere3 (val);
		System.out.println( "Pour " + val + " : " + res );
		val = 5;
		res = ClasseEssai.mystere3 (val);
		System.out.println( "Pour " + val + " : " + res );
		val = 10;
		res = ClasseEssai.mystere3 (val);
		System.out.println( "Pour " + val + " : " + res );

	
	}
}
-------

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Factorielle : n!
====
endif::prof[]
  
== Avant de partir

. Déposer le compte rendu
. N'oubliez-pas de vous déconnecter

endif::todoprof[]