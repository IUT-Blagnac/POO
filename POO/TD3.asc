:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 3
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 1 : approche objet. TD2 objets. S1.
| {objtd}	| *Ecrire une classe simple en 2 versions - Encapsulation*.
| {duree}	| *1 séance* de 1,5h
|======================

// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

. Objectif :

* Ecrire une classe simple (que des attributs simples)
* En donner une 2° version en changeant l'implémentation et pas l'interface.
* Montrer ce qu'est l'encapsulation et les avantages de l'encapsulation (on y reviendra souvent).
** Attributs : private,
** Méthodes : public,

. Déroulement a priori :

* 15' pour lire un peu la doc ou expliquer et comprendre
* 30' : V1 sur feuille pré-remplie
** Correction possible au tableau
* 20' : V2 sur feuille pré-remplie auparavant (correctif en couleur)
* 15' : Intérêts encapsulation.
====
endif::todoprof[]

ifndef::todoprof[]

== Classe à développer

[options="header"]
|=======
| Diagramme UML de l'interface de la classe Compte | Diagramme UML complet de la classe Compte
| image:images/classeCompteInterface.png[] | image:images/classeCompte.png[]
|=======

== Quelques explications

Pour les méthodes :

. +Compte()+ : Constructeur non paramétré, appelé aussi constructeur "par défaut" : initialise un compte avec des dépenses à 0 euros et 0 opérations. Numéro compte : "Pas de numéro", propriétaire : "Pas de propriétaire".
. +Compte(String pNumCompte, String pNomProp)+ : Constructeur paramétré : initialise un compte avec des dépenses à 0 euros et 0 opérations. Numéro compte et propriétaires sont passés en paramètre
. +Compte(String pNumCompte, String pNomProp)+ : Constructeur paramétré : initialise un compte avec des dépenses à 0 euros et 0 opérations. Numéro compte et propriétaires sont passés en paramètre
. +String getNumCompte()+ : permet de connaître le numéro de compte.
. +String getProprietaire()+ : permet de connaître (renvoyer) le nom du propriétaire.
. +double soldeCompte()+ : comme son nom l'indique : la somme restante sur le compte.
. +void setProprietaire(String pNomProp)+ : modifie le propriétaire du compte.
. +void retirer(double pSomme)+ : permet de retirer pSomme du compte. Elle lève une exception +CompteException+ si pSomme < 0.
. +void deposer(double pSomme)+ : permet de déposer pSomme du compte. Elle lève une exception +CompteException+ si pSomme < 0.
. +void afficher()+ : affiche à l'écran this.toString() (redondante) *Spécial pour les TPS uniquement*
. +String toString()+ : Permet d'obtenir la représentation String d'un compte. Construit une chaine contenant le numéro de compte, le propriétaire, le total des débits, le total des crédits, le nombre d'opérations réalisées.
+
" Num. : aaa - Prop. : bbb - Debit xxx E / Credit yyy E / NbOps zzz"


== Version 1

. Écrire la classe (le corps des méthodes) avec les attributs définis dans la page associée.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Version 1
======
[source, java]
-----
public class Compte 
{
	private String proprietaire;
	private String numCompte;
	private double debits, credits;
	private int nbDebits, nbCredits;
	public Compte() {
		this.numCompte = "Pas de numéro";
		this.proprietaire = "Pas de propriétaire";
		this.debits = 0;   this.credits = 0;
		this.nbCredits = 0;  this.nbDebits = 0;
	}
	public Compte(String pNumCompte, String pNomProp) {
		this.numCompte = pNumCompte;
		this.proprietaire = pNomProp;
		this.debits = 0;  this.credits = 0;
		this.nbCredits = 0;  this.nbDebits = 0;
	}
	public String getNumCompte() {
		return this.numCompte;
	}
	public String getProprietaire() {
		return this.proprietaire;
	}
	public double soldeCompte() {
		return this.credits - this.debits;
	}
	public void setProprietaire(String pNomProp) {
		this.proprietaire = pNomProp;
	}
	public void retirer(double pSomme) throws CompteException {
		if (pSomme < 0) {
			throw new CompteException(
					"Somme <0 sur retrait " + this.numCompte);
		}	// Ou throw new CompteException();
		this.debits = this.debits + pSomme;
		this.nbDebits++;
	}
	public void deposer(double pSomme) throws CompteException {
		if (pSomme < 0) {
			throw new CompteException(
					"Somme <0  sur dépot " + this.numCompte);
		}	// Ou throw new CompteException();
		this.credits = this.credits + pSomme;
		this.nbCredits++;
	}
	public void afficher() {
		System.out.println(this.toString());
	}
	public String toString() {
		return "  Num. : " + this.numCompte + " - Prop. : " + this.proprietaire
				+ " - Debit " + this.debits + " E / Credit " + this.credits
				+ " E / NbOps " + (this.nbCredits + this.nbDebits);
	}
}
-----
======
endif::prof[]


== Usage Version 1

. Ecrire un petit programme permettant de créer un +Compte+ avec numéro et propriétaire, déposer 1000 €, retirer 500 €, changer le propriétaire, l'afficher, afficher le solde.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Usage Version 1
======
[source, java]
-----
	Compte c;
	c = new Compte ("0101", "Jean")
	try {
		c.deposer(1000);
		c.retirer(500);
	} catch (CompteException e) {
		System.out.println("Anormal ...");
	}
	c.setProprietaire ("Marcel");
	c.afficher ();
	System.out.println (c.soldeCompte());
-----
======
endif::prof[]

== Version 2

Modifier d'une autre couleur le code précédent pour obtenir une nouvelle version de la classe en suivant les changements suivants :

. Les débits et crédits restent stockés, mais on ajoute un attribut solde valant à tout moment le solde du compte. Ainsi le solde n'est pas à recalculer dans soldeCompte().
. le détail du nombre d'opérations n'est plus conservé en détail, seul le nombre total d'opérations est conservé.

[source, java]
-----
package tps.banque;
import tps.banque.exception.CompteException;
public class Compte {
	// Nom du propriétaire
	private String proprietaire;
	// Numero de Compte
	private String numCompte;
	// Attributs debit et credit : additionner depots et retraits
	private double debit, credit;
	private double soldeCourant ;
	// Nb Opérations : compter depots et retraits
	private int nbOperations;
	// ...
}
-----

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Version 2
======
[source, java]
-----
public class Compte 
{
	private String proprietaire;
	private String numCompte;
	private double debit, credit;
	private double soldeCourant ;
	private int nbOperations;
	public Compte() {
		this.numCompte = "Pas de numéro";
		this.proprietaire = "Pas de propriétaire";
		this.debits = 0;   this.credits = 0;
		this.nbOperations = 0;  this.soldeCourant = 0; // NEW
		// ENLEVE : this.nbCredits = 0;  this.nbDebits = 0;
	}
	public Compte(String pNumCompte, String pNomProp) {
		this.numCompte = pNumCompte;
		this.proprietaire = pNomProp;
		this.debits = 0;  this.credits = 0;
		this.nbOperations = 0;  this.soldeCourant = 0; // NEW
		// ENLEVE : this.nbCredits = 0;  this.nbDebits = 0;
	}
	public String getNumCompte() {
		return this.numCompte;
	}
	public String getProprietaire() {
		return this.proprietaire;
	}
	public double soldeCompte() {
		return this.soldeCourant; // NEW
		// ENLEVE : return this.credits - this.debits;
	}
	public void setProprietaire(String pNomProp) {
		this.proprietaire = pNomProp;
	}
	public void retirer(double pSomme) throws CompteException {
		if (pSomme < 0) {
			throw new CompteException(
					"Somme <0 sur retrait " + this.numCompte);
		}	// Ou throw new CompteException();
		this.debits = this.debits + pSomme;
		this.soldeCourant = this.credits - this.debits; // NEW
		this.nbOperations++; // NEW // ENLEVE : this.nbDebits++;
	}
	public void deposer(double pSomme) throws CompteException {
		if (pSomme < 0) {
			throw new CompteException(
					"Somme <0  sur dépot " + this.numCompte);
		}	// Ou throw new CompteException();
		this.credits = this.credits + pSomme;
		this.soldeCourant = this.credits - this.debits; // NEW
		this.nbOperations++; // NEW // ENLEVE : this.nbCredits++;
	}
	public void afficher() {
		System.out.println(this.toString());
	}
	public String toString() {
		return "  Num. : " + this.numCompte + " - Prop. : " + this.proprietaire
				+ " - Debit " + this.debits + " E / Credit " + this.credits
				+ " E / NbOps " + (this.nbOperations); // MODIFIE
	}
}
-----
======
endif::prof[]

== Usage Version 2

Que pouvez-vous dire du code d'utilisation de la version précédente ? Fonctionnerait-il sans problème avec cette nouvelle version de classe ?

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Usage Version 2
======
Rien à changer : le code fonctionne avec la nouvelle classe.

Ce code est *Client* de la classe et n'utilise que *son interface*.
======
endif::prof[]

== Conclusion

C'est cela que l'on appelle l'encapsulation : Tant que l'interface de la classe est respectée par l'implémenteur et le client/utilisateur :

* l'implémentation est complètement indépendante de l'utilisation,
* l'utilisation est complètement indépendante de l'implémentation.

Le mécanisme utilisé est :

* *les attributs sont TOUJOURS privés*
* *l'interface (la liste des méthodes publiques) reste stable : identique en nombre de méthodes et signatures.*

ifdef::prof[]

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Exemples contradictoires
======
Si la classe était définie sans attributs private :

[source, java]
-----
package tps.banque;
import tps.banque.exception.CompteException;
public class Compte {
	String proprietaire;
	String numCompte;
	double debit, credit;
	// Nb Opérations : compter depots et retraits
	int nbDebits, nbCredits;
	// ...
}
-----

Alors on peut écrire le code suivant :

[source, java]
-----
	Compte c ;
	c = new Compte("0101", "Jean"); // OK
	c.setProprietaire ("Marcel");
	c.nbDebits = c.nbDebits + 1; // On oublie d'enregistrer un débit
	c.credit = c.credits - 100; // on crédite d'une valeur < 0
	c.afficher();
-----

Cet exemple montre que  :

* Sans attributs private, on PEUT faire n'importe quoi ;-).
* Le type +Compte+ n'est pas "stable" ou "cohérent". Le programmeur peut rendre le compte "faux" : ce n'est plus la réalité. Tous tests possibles de la classe +Compte+ n'y changeront rien ...
* Si on modifie la classe +Compte+ comme nous l'avons fait en implémentation 2 ... le code ne fonctionne plus (+c.nbDebits = c.nbDebits + 1;+).

CQFD ...

======

endif::prof[]

///////////////////////////////////////
== Pour répondre aux questions.

[source, java]
-----
package tps.banque;
import tps.banque.exception.CompteException;
public class Compte {
	// Nom du propriétaire
	private String proprietaire;
	// Numero de Compte
	private String numCompte;
	// Attributs debit et credit : additionner depots et retraits
	private double debits, credits;
	// Nb Opérations : compter depots et retraits
	private int nbDebits, nbCredits;

	public Compte() {








	}
	public Compte(String pNumCompte, String pNomProp) {








	}
	public String getNumCompte() {


	}
	public String getProprietaire() {


	}
	public double soldeCompte() {


	}
	public void setProprietaire(String pNomProp) {


	}
	public void retirer(double pSomme) throws CompteException {








	}
	public void deposer(double pSomme) throws CompteException {








	}
	public void afficher() {


	}
	public String toString() {






	}
}
-----
///////////////////////////////////////


endif::todoprof[]

