include::lib/globals.asc[]
:tdnum: TD 1
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]


[TIP]
=====
Une grande partie des informations données ici s'appliquent au langage *Java*.
=====

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| S1, notion de type, variables simples, tableaux.
| {objtd}	| *Comprendre l'implantation mémoire des données*.
| {duree}	| *1 séance* de 1,5h
| {depot}	| -
|======================

== Comprendre l'implantation mémoire des données

=== Principe de stockage des données en mémoire : les variables

Une variable permet d'associer

- un identificateur
- un type
- un emplacement mémoire qui contient une valeur

[TIP]
====
Quel que soit le langage, on parle pour une "variable" (sens dépendant du contexte) de :

- *r-value* : rigth value, expression qui a une valeur qui "n'a pas d'adresse", tout ce qui peut se mettre à droite d'une affectation (=). Ex : la valeur +10+.
- *l-value* : left value, expression qui permet d'accéder à un emplacement mémoire, tout ce qui peut se mettre à gauche d'une affectation (=). *Contre exemple* : la valeur +10+.
====

Une variable permet, en utilisant l'identificateur :

- d'accéder à la valeur -> aspect l-value
- de modifier le contenu de l'emplacement mémoire avec une valeur du type attendu -> aspect une r-value

=== Application : l-value ? r-valeur ?

Dans le code suivant, indiquer ci-après quand est ce que l'on s'intéresse à une r-value ou à une l-value

[source,java]
----
public static void main(String argv[]) {
	int i, j, k ;
	double d, e, f;
	i = 1; // <1>
	j = i + 10 ; // <2><3>
	k = j ; 
	e = 10.5; 
	if (e < i) { // <4><5>
		f = j + k ;
		k = (int) (f - e) ;
	}	
}
----
<1> i ?
<2> j ?
<3> i ? 
<4> e ?
<5> i ?

ifdef::prof[]
[IMPORTANT]
.Solution
====

. i : l-value
. j : l-value
. i : r-value
. e : r-value
. i : r-value
====
endif::prof[]

=== Importance du type

Le type d'une variable définit :

* l'ensemble des valeurs possibles que peut contenir la variable 
** +int+ : codage en complément à 2 sur 4 octets
** +double+ : codage en flottant 2 sur 8 octets
** +boolean+ : sur un octet, valeurs possibles +true+ et +false+
* les opérations possibles sur les valeurs
** +int+ : pass:[+,-,/,*,%, ++, --] entre +int+
** +double+ : pass:[+,-,/,*] entre +double+
** +boolean+ : &&, ||, ! entre +boolean+

=== Emplacement mémoire

Quel que soit le langage, au runtime, un programme dispose de mémoire allouée par le système d'exploitation :

* un segment de mémoire pour stocker le code (segment de code),
* un segment de mémoire pour stocker les données (segment de données) découpé en trois parties : i) un sous-segment pour la pile, ii) un sous-segment pour le tas, iii) un sous-segment permanent : données globales, données statiques des fonctions.

Un programme Java ne s'exécute pas directement sur le système d'exploitation, mais dans la Machine Virtuelle Java (JVM). 

Un programme Java ne "dispose" que de deux segments de code :

* un sous-segment pour la *pile* – variables automatiques,
** il est utilisé lors des appels de sous-programmes pour stocker :
*** les paramètres de l'en-tête,
*** les variables locales (où quelles soient définies dans le corps du sous-programme),
*** fait partie de ce qu'on appelle contexte de la fonction cf. système,
** sa gestion est *"automatique"* : allocation pour les variables lors du début de la fonction et libération à la fin de la fonction
** *durée de vie* des espaces alloués : le temps d'exécution du sous-programme.
* un sous-segment pour le *tas* – mémoire gérée par le programmeur,
** il est utilisé lors des appels à l'opérateur +new+ (tableaux et objets)
** sa gestion est *assurée par le programmeur* : allocation (+new+) et libération de la mémoire
*** responsabilité au programmeur de faire les allocations *lorsque de besoin*
*** responsabilité au programmeur de libérer la mémoire lorsque elle n'est plus nécessaire (c'est automatique en Java vous verrez ... mais cf. Langage C).
** *durée de vie* des espaces alloués : entre le +new+ et la libération, indépendamment du sous-programme qui fait le +new+.

Représentation graphique : pour schématiser la représentation mémoire, il faut imaginer deux espaces séparés, l'un de l'autre : la pile, le tas.

Exemple :

[source,java]
---
public static void main(String argv[]) {
	int i, j, k ;
	double d, e, f;
	i = 1; 
	j = i + 10 ; 
	k = j ; 
	e = 10.5; 
	// <1>
	if (e < i) { 
		f = j + k ;
		k = (int) (f - e) ;
	}	
}
---

État de la pile ci-après lorsque le programme arrive en <1>

image:images/td1Exemple1.png[heigh=250, width=650]

== Implantation mémoire des tableaux

=== Exemple de déclaration de tableau en java

[source,java]
-------
	int tab [],  i; // <1>
	int [] tab2,  t; // <2>
	int tab3 [] = {1, 2, 3}; // <3> 
-------
<1> Déclare : +tab+ : tableau ([]) d'entiers (int), et +i+ entier (int)
<2> Déclare : +tab2+ : tableau d'entiers (int []) et +t+ tableau d'entiers (int []) 
<3> Déclare : +tab3+ : tableau ([]) d'entiers (int), crée un tableau de 3 éléments de valeurs 1, 2, 3

Différence entre les déclarations :

- déclarations 1 et 2, les tableaux d'entiers n'existent pas encore ...,
- déclaration 3 : crée un tableau de 3 entiers avec les valeurs 1, 2, 3

*A noter* : le type tableau "n'existe pas", mais seul le type "tableau de ..." (quelque chose) existe.
Une déclaration de tableau *est toujours liée à un type* : tableau d'un type particulier (int, float, Personne, Pile, Etudiant, ...).

*A noter* : ces 3 variables tableau de entiers, en tant que variables déclarées dans un sous-programme, sont créées/stockées, dans la pile d'exécution (comme les variables simples des exemples ci-avant).

=== Un tableau Java : en fait une *référence*

Que contient une variable de type tableau (de type de base) :

- pas les éléments du tableau, sinon la réservation mémoire de +tab+ et +tab2+ ci-avant serait impossible,
- mais une *référence* vers un tableau qui lui contient les éléments, le tableau est dans le *tas*

[IMPORTANT]
.Définition : référence de tableau java
=====
Une *référence de tableau* en Java permet de *désigner* un tableau :

- appelé aussi "handle" ou "poignée",
- c'est un numéro d’objet : OId (Object Identifier) alloué par le système (JVM),
- donne une identité (unique) au tableau et permet d'y accéder,
- plusieurs variables tableau peuvent référencer le même tableau (chacun a la "poignée")
=====

*A noter* : Une référence de tableau est un numéro unique mais *n'est pas* une adresse mémoire. Sa valeur ne permet pas d'accéder à la RAM pour accéder au tableau.

Pour obtenir la valeur d'une référence de tableau  :
[source,java]
-------
System.identityHashCode(tab);
-------

=== Représentation mémoire des tableaux

Les variables tableau déclarées sont automatiques => appartiennent à la pile.

[source,java]
-------
	int tab [],  i; 
	int [] tab2,  t; 
	int tab3 [] = {1, 2, 3}; 
-------

image:images/td1Exemple2.png[heigh=250, width=650]


=== L'opérateur +new+ pour les tableaux

Utiliser l'opérateur +new+ pour créer un tableau :

* Il faut donner à l'opérateur :
** le type des éléments du tableau à créer
** le nombre d'éléments voulu entre [ et ] (nombre >=+0+). Sic : un tableau de longueur +0+ est possible.
* Permet de créer un tableau :
** réserve la mémoire nécessaire : le nombre d'octets du type indiqué&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;nombre des éléments
** initialise chaque élément du tableau alloué à une valeur par défaut (+0+ pour les nombres, +false+ pour les booleans, +null+ pour les objets et les tableaux).
** *renvoie la référence* du tableau créé dans le tas.

Exemple : (on ajoute à la suite du code de déclaration précédent) :
[source,java]
-------
	tab = new int [10]; // <1>
	for (int i = 0; i < tab.length; i++) {
		tab[i] = 20+i; // <2>
	}
-------
<1> Crée un tableau de 10 int (4 octets, soit ~40 octets) et renvoie la référence du tableau créé qui est stockée dans +tab+
<2> On utilise le tableau ... au travers de sa référence contenue dans +tab+

Représentation mémoire :

image:images/td1Exemple3.png[heigh=250, width=650]

=== Type tableau : valeurs et opérations 

Pour une variable +tab+ déclarée comme tableau de type de base (+int+, +double+, ...) :

* valeurs possibles : un référence vers un tableau du type déclaré
* opérations possibles : 
** affecter une valeur de référence du tableau de type déclaré,
*** affecter une référence renvoyée par un new (ex : +tab = new int[10]+),
*** affecter une référence contenue dans une autre variable (ex : +tab2 = tab+),
** accéder à un élément par [] contenant une expression de type +int+ donnant un indice valide (+0+ \<= indice < +tab.length+),
** accéder à la longueur du tableau donnée lors de sa création par l'attribut (en lecture seule) +length+ : +tab.length+

Sur un élément de tableau, les valeurs et opérations possibles dépendent ... du type déclaré des éléments du tableau.

NB : d'autres opérations existent mais ne sont pas liées intrinsèquement au type (passage de paramètre, ...) mais au langage.

=== Typage et expressions

Dans l'expression +tab[i]+, 2 types sont en jeu :

- +tab+ : déclaré comme +int[]+ ... donc tableau d'entiers ... donc REFERENCE de tableau d'entiers,
- +tab[i]+ : de type +int+ qui est interprété comme "le ième élément du tableau dont la référence est dans +tab+".

----------
tab  [i]
---|      tableau d'entiers (référence vers)
-------|  entier
----------

*L'expression* +tab[i]+ ne doit jamais être interprétée comme un tableau ... mais comme un *int*.

=== Application : représentation mémoire des tableaux

Donner le résultat affiché et la représentation mémoire (pile/tas) à la fin du programme suivant :

[source,java]
-------
public static void main(String argv[]) {
	int tab [],  i; 
	int [] tab2,  t;
	int tab3 [] = {1, 2, 3};
	tab = new int [10];
	for (i = 0; i < tab.length; i++) {
		tab[i] = 20+i;
	}
	tab2 = tab;
	t = tab3;
	for (i = 0; i < tab2.length; i++) {
		System.out.println (tab2[i]);
	}
	for (i = 0; i < t.length; i++) {
		System.out.println (t[i]);
	}
}
-------

 Réponse, affiche : ....

 Représentation mémoire à mettre à jour :

image:images/td1Exemple3.png[heigh=250, width=650]

ifdef::prof[]
[IMPORTANT]
.Solution
====
Affiche : 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 puis 1, 2, 3

Représentation mémoire :

image:images/td1Exemple4SOL.png[heigh=250, width=650]

====
endif::prof[]

== Les objets Java

=== Un objet Java : en fait une référence

Les objets sont issus d'une classe et sont créés par l'opérateur +new+ avec appel d'un *constructeur*.

Une *variable déclarée de type objet* ne contient pas l'objet ... mais ... une *référence* vers l'objet réellement créé dans le tas.

+null+ : une valeur particulière de référence (objet ou tableau) qui veut dire "pas d'objet", "aucun objet référencé".

[TIP]
.Attention
=====
+null+ *n'est pas* "rien" ou "indéfini". A distinguer d'une variable "may not have been initialized".
=====

[IMPORTANT]
.Définition : référence d'objet java
=====
Une *référence d'objet* en Java permet de *désigner* un objet :

- appelé aussi "handle" ou "poignée",
- c'est un numéro d’objet : OId (Object Identifier) alloué par le système (JVM),
- donne une identité (unique) à l'objet et permet d'y accéder,
- plusieurs variables objet peuvent référencer le même objet (chacun a la "poignée")
=====

*A noter* : Une référence d'objet est un numéro unique mais *n'est pas* une adresse mémoire. Sa valeur ne permet pas d'accéder à la RAM pour accéder à l'objet.

Pour obtenir la valeur d'une référence d'objet :
[source,java]
-------
System.identityHashCode(pers);
-------

=== Représentation mémoire des objets

Les variables objet déclarées sont automatiques ⇒ appartiennent à la pile.

[source,java]
-------
class Personne {
	// ... 
	public static void main(String argv[]) {
		Personne pers1, pers2; // <1>
		// ...
	}
}
-------

Représentation mémoire *en position <1>* :

image:images/td1exemple20.png[heigh=250, width=650]

=== L'opérateur +new+ pour les objets

Utiliser l'opérateur +new+ pour créer un objet :

* L'appel à l'opérateur +new+ pour créer un objet se fait en donnant (Ex : +new Personne ("Joseph", null, 75)+) :
** un nom de classe 
** des paramètres éventuels entre parenthèses, () sinon.
* Permet de créer un objet :
** réserve la mémoire nécessaire : le nombre d'octets pour stocker les attributs définis par la classe
** initialise chaque attribut (+0+ pour les nombres, +false+ pour les booleans, +null+ pour les objets et les tableaux).
** applique le constructeur spécifié par les paramètres
** *renvoie la référence* de l'objet créé dans le tas.

[source,java]
-------
class Personne {
	private String nom ;
	private Personne pere ;
	private int age ;
	public Personne (String nomPers, Personne perePers, int agePers) {
		this.nom = nomPers;
		pere = perePers; // this optionnel
		this.age = agePers;
	}
	public static void main(String argv[]) {
		Personne pers1, pers2;
		pers1 = new Personne ("Joseph", null, 75); // <1>
		pers2 = new Personne ("André", pers1, 27); // <2>
	}
}
-------
<1> Crée un objet Personne et renvoie la référence stockée dans +pers1+
<2> Crée un objet Personne et renvoie la référence stockée dans +pers2+

Représentation mémoire *en position <1>* :

image:images/td1exemple21.png[heigh=250, width=650]

Représentation mémoire *en position <2>* :

image:images/td1exemple22.png[heigh=250, width=650]

[TIP]
=====
A noter :

- la valeur +null+ de l'attribut +pere+ de l'objet "pers1" (référencé par pers1)
- la valeur de l'attribut +pere+ de l'objet "pers2" (référencé par pers2)
- les chaînes de caractères sont aussi des objets (référence + attributs en mémoire)
=====

=== Type objet : valeurs et opérations 

Pour une variable déclarée comme objet (ex : +Personne pers;+) :

* valeurs possibles : un référence vers un objet du type déclaré (+pers => Personne+)
* opérations possibles : 
** affecter une valeur de référence objet du type déclaré,
*** affecter une référence renvoyée par un new (ex : +pers = new Personne("Joseph", null, 75);+),
*** affecter une référence contenue dans une autre variable (ex : +pers2 = pers;+),
** appeler une méthode sur l'objet (ex : +pers.setPere(pers2);+)

NB : d'autres opérations existent mais ne sont pas liées intrinsèquement au type (passage de paramètre, ...) mais au langage.

=== Application : représentation mémoire des objets

Soit le programme suivant :

[source,java]
-------
class Personne {
	private String nom ;
	private Personne pere ;
	private int age ;
	public Personne (String nomPers, Personne perePers, int agePers) {
		this.nom = nomPers;
		pere = perePers; // this optionnel
		this.age = agePers;
	}
	public static void main(String argv[]) {
		Personne pers1, pers2;
		Personne pers3;
		pers1 = new Personne ("Joseph", null, 75); 
		pers2 = new Personne ("André", pers1, 27); 
		pers3 = pers1; // <1>
		pers2 = pers1; // <2>
	}
}
-------

Quel est le résultat en terme de contenu des variables et en terme de création/ou pas d'objets en mémoire des instructions <1> et <2> ci-dessus ?

image:images/td1exemple24.png[heigh=250, width=650]


ifdef::prof[]
[IMPORTANT]
.Solution
====

* L'opération <1> Affecte la valeur de référence contenu dans +pers1+ à +pers3+ (par exemple ci-dessus : "1A168").
** En conséquence : pas d'objet créé en mémoire, simple recopie de référence.
* L'opération <2> Affecte la valeur de référence contenu dans +pers2+ à +pers1+ (par exemple ci-dessus : "1A168").
** En conséquence, dans l'état du programme :
*** la référence contenu auparavant dans +pers2+ est perdue
*** il n'y A PAS d'"écrasement" d'objet, seulement une copie de références
*** et l'objet référencé auparavant par +pers2+ ? Il sera perdu et la mémoire automatiquement, récupérée ... (on y reviendra).

image:images/td1exemple25.png[heigh=250, width=650]
====
endif::prof[]

== Appel de sous-programme - Passage des paramètres 

=== Règle de passage des paramètre

Lors d'un appel de sous-programme, les opération suivantes sont réalisées par le système (~JVM) :

- à partir des déclarations, les paramètres et les variables locales du sous-programmes sont implantés dans la pile,
- la valeur de chaque paramètre effectif est copiée dans le paramètre formel correspondant,
- le corps du sous-programme est exécuté,
- à la fin du sous-programme, la valeur éventuellement retournée par le sous-programme remplace l'appel et l'évaluation de l'appelant continue.

=== Exemple 1

[source,java]
-------
public MaClasse {
	public static void test  (int[] t, int i) { 
		int j; 
		System.out.println(i);
		for (j=0; j<t.length; j++) {
			System.out.println(t[j]); 
		} 
	}
	public static void main(String argv[]) {
		int tab [],  i; 
		int tab3 [] = {1, 2, 3};
		tab = new int [10];
		for (i = 0; i < tab.length; i++) {
			tab[i] = 20+i;
		}
		MaClasse.test(tab, 150); // <1>
		MaClasse.test(tab3, tab[9]*100); // <2>
	}
}
-------

Qu'affiche ce programme ?

 Réponse, affiche :  ...

ifdef::prof[]
[IMPORTANT]
.Solution
====
Affiche : 150, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29

puis 2900, 1, 2, 3
====
endif::prof[]

Représentation mémoire correspondante au début du sous-programme +test()+ *en position <1>* (+MaClasse.test(tab, 150)+) :

image:images/td1Exemple5.png[heigh=250, width=650]

Représentation mémoire correspondante au début du sous-programme +test()+ *en position <2>* (+MaClasse.test(tab3, tab[9]*100)+) :

image:images/td1Exemple6.png[heigh=250, width=650]


=== Exemple 2

[source,java]
-------
public class MaClasse {
	public static int somTab (int[] t) {
		int j, som;
		som = 0;
		for (j=0; j<t.length; j++) {
			som = som+t[j]; 
		}
		return som;
	}
	public static void main(String argv[]) {
		int tab [],  i; 
		int tab3 [] = {1, 2, 3};
		tab = new int [10];
		for (i = 0; i < tab.length; i++) {
			tab[i] = 20+i;
		}
		System.out.println(MaClasse.somTab(tab)); // <1>
		System.out.println(MaClasse.somTab(tab3)); // <2>
	}
}
-------

Qu'affiche ce programme ?

 Réponse, affiche : 

ifdef::prof[]
[IMPORTANT]
.Solution
====
Affiche : 245 puis 6
====
endif::prof[]

Dans le schéma suivant, donner la représentation mémoire correspondante au début du sous-programme +somTab()+ *en position <1>* (+MaClasse.somTab(tab)+) :

image:images/td1exemple7Eleve.png[heigh=250, width=650]

ifdef::prof[]
[IMPORTANT]
.Solution
====
image:images/td1exemple7Sol1.png[heigh=250, width=650]
====
endif::prof[]

Dans le schéma suivant, donner la représentation mémoire correspondante au début du sous-programme +somTab()+ *en position <2>* (+MaClasse.somTab(tab3)+) :

image:images/td1exemple7Eleve.png[heigh=250, width=650]


ifdef::prof[]
[IMPORTANT]
.Solution
====
image:images/td1exemple7Sol2.png[heigh=250, width=650]
====
endif::prof[]

=== Exemple 3

Soir le programme suivant :

[source,java]
-------
public class Personne {
	private String nom ;
	private Personne pere ;
	private int age ;
	public Personne (String nomPers, Personne perePers, int agePers) {
		this.nom = nomPers;
		pere = perePers; // this optionnel
		this.age = agePers;
	}
	public String getNom () {
		return this.nom;
	}
	public void setPere (Personne p) {
		this.pere = p;
	}
	public static void main(String argv[]) {
		Personne pers1, pers2;
		
		pers1 = new Personne ("Joseph", null, 75); 
		pers2 = new Personne ("André", pers1, 27);
		pers2.setPere (pers1); // <1> // Même si c'est inutile ici car va refaire le même lien.
		System.out.println(pers1.getNom()); // <2>
		System.out.println(pers2.getNom()); // <3>
	}
}
-------

Donner la représentation mémoire correspondante au début du sous-programme +setPere()+ *en position <1>* (+pers2.setPere (pers1);+) :

image:images/td1exemple30.png[heigh=250, width=650]

ifdef::prof[]
[IMPORTANT]
.Solution
====
image:images/td1exemple31.png[heigh=250, width=650]
====
[NOTE]
====
*A noter* : la *pseudo-variable* +this+ qui référence le "receveur" de message : la référence de l'objet à gauche du . dans l'appel +pers2.setPere (pers1)+.

Elle est créée "automatiquement" et elle fait le lien entre le code et l'objet sur lequel il s'applique, toujours par référence.
====
endif::prof[]

Donner la représentation mémoire correspondante au début du sous-programme +getNom()+ *en position <2>* (+pers1.getNom();+) :

image:images/td1exemple30.png[heigh=250, width=650]

ifdef::prof[]
[IMPORTANT]
.Solution
====
image:images/td1exemple32.png[heigh=250, width=650]
====
endif::prof[]

Donner la représentation mémoire correspondante au début du sous-programme +getNom()+ *en position <3>* (+pers2.getNom();+) :

image:images/td1exemple30.png[heigh=250, width=650]

ifdef::prof[]
[IMPORTANT]
.Solution
====
image:images/td1exemple33.png[heigh=250, width=650]
====
endif::prof[]

/////////////////////////////
[source,java]
-------
public class Personne {
	private String nom ;
	private Personne pere ;
	private int age ;
	public Personne (String nomPers, Personne perePers, int agePers) {
		this.nom = nomPers;
		pere = perePers; // this optionnel
		this.age = agePers;
	}
	public String getNom () {
		return this.nom;
	}
	public String toString () {
		return this.nom + " ("+ this.age + ") -> " + (this.pere == null ? "Orphelin" : this.pere.getNom());
	}
	public void setPere (Personne p) {
		this.pere = p;
	}
	public static void main(String argv[]) {
		Personne pers1, pers2;

		pers1 = new Personne ("Joseph", null, 75); // <1>
		pers2 = new Personne ("André", pers1, 27); // <2>
		System.out.println(pers2.getNom()); // <3>
		System.out.println(pers2.toString()); // <4>
		System.out.println(pers1.toString());
	}
}
-------
/////////////////////////////