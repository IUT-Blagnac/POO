= SDA - Contrôle du 27 Janvier 2014
:Author:  DUT/INFO/M1103
:doctitle: SDA - Contrôle du 27 Janvier 2014
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:

ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

.Barème indicatif
**************
 Question 1 (2 Points) 
 Question 2 (2 Points) 
 Question 3 (3 Points) 
 Question 4 (3 Points)  (*)
 Question 5 (2 Points) 
 Question 6 (2 Points)  (*)
 Question 7 (3 Points)  (*)
 Question 8 (3 Points)  (*)
 
Les questions marquées (*) sont indépendantes les unes des autres.

**************

----

                            ===== Durée 1h =====
		     
		     Feuille manuscrite recto autorisée
		     
		            ==================

----

En fin de soldes, un magasin souhaite réaliser l'inventaire de son stock.

Les articles qu'il vend sont répertoriés avec :

. un nom d'article
. un numéro d'article
. une catégorie d'article
. une quantité d'articles

== Question 1 (Barème : 2 Points)

Ecrire en *Java* la définition des champs d'un enregistrement Article.
ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Version corrigée
=====
[source,java]
----
class Article {
    private String nom ;
    private int numero ;
    private int categorie ;
    private int quantite ;
}
----
=====
endif::prof[]

== Question 2 (Barème : 2 Points)

Les employés souhaitent pouvoir créer un article :

--
- en ne fournissant que son nom et son numéro (catégorie et quantité sont alors égales à 1)

- en fournissant la valeur de tous ses champs
--

. Ecrire en *Java* la définition des 2 constructeurs d'Article demandés.
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Version corrigée
=====
[source,java]
----
    Article(String pNom, int pNumero){
        nom = pNom ;
        numero = pNumero ;
        categorie = 1 ;
        quantite = 1 ;
    }
    Article(String pNom, int pNumero, int pCategorie, int pQuantite){
        nom = pNom ;
        numero = pNumero ;
        categorie = pCategorie ;
        quantite = pQuantite ;
    }
----
=====
endif::prof[]

== Question 3 (Barème : 3 Points)

Les employés souhaitent pouvoir disposer des opérations suivantes permettant de vendre ou de reprendre un seul Article :

+enStock() : Article -> booleen+::
retourne VRAI si sa quantité est supérieure à 0

+vendre() : Article -> entier+::
retourne le nombre d'articles restants

+reprendre() : Article -> entier+::
retourne le nombre d'articles restants

. Fournir les préconditions de ces actions
. Ecrire en *java* les 3 opérations +enStock()+, +vendre()+ et +reprendre()+ du type Abstrait Article.


ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Version corrigée
=====
[source,java]
----
    boolean enStock(){
        return(quantite > 0);
    }
    int vendre() throws Exception{
        if (! enStock()) { throws Exception("vente impossible"); }
        quantite = quantite - 1 ;
        return(quantite);
    }
    int reprendre(){
        quantite = quantite + 1 ;
        return(quantite);
    }
----
=====
endif::prof[]

== Question 4 (***) (Barème : 3 Points)

On souhaite écrire en *java* une classe Magasin 

et un gentil étudiant (dont je tairais le nom) 
a fourni l'algorithme suivant :

----
DEBUT
 fini <- FAUX
 TANTQUE NON fini FAIRE
  Afficher (ecran) "Nom et Numéro de l'article ?"
  Saisir (clavier) nom, numero
  tabStock[indice] <- new Article(nom,numero)
  indice <- indice + 1
  Afficher (ecran) "Encore ? (O/N)"
  Saisir (clavier) reponse
  SI (reponse = "N") OU (reponse = "n") ALORS fini <- VRAI FINSI
 FINTANTQUE 
FIN
----

[NOTE]
====
Le tableau +tabStock[]+ est de taille 1000
====

. Fournir le glossaire de l'algorithme précédent
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Glossaire
=====
----
 tabStock : tableau de 1000 articles
 fini : booleen
 indice : entier
 nom : chaine
 numero : entier
 reponse : chaine
----
=====
endif::prof[]

. Corriger les 2 erreurs d'inattention de l'étudiant qui a fourni l'algorithme 
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Erreurs
=====
----
 indice <- 0
 TANTQUE (NON fini) ET (indice < 1000) FAIRE
----
=====
endif::prof[]

. Ecrire la classe *java* Magasin
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Magasin.java
=====
[source,java]
----
import java.util.Scanner;

class Magasin {
  public static void main(String[] arguments){
    Article[] tabStock = new Article[1000];
    Scanner lecteur = new Scanner(System.in);
    boolean fini = false ;
    int indice = 0 ;
    while ((! fini) && ( indice < 1000)) {
        System.out.println("Nom et Numéro de l'article ?");
        String nom = lecteur.next();
        int numero = lecteur.nextInt();
        tabStock[indice] = new Article(nom,numero);
        indice = indice + 1 ;
        System.out.println("Encore ? (O/N)");
        String reponse = lecteur.next();
        if ( reponse.equals("N") || reponse.equals("n")) { fini = true ; }
    }
  }
}
----
=====
endif::prof[]

----
.
.
.
.
.
.
.
----


== Question 5 (Barème : 2 Points)

Après quelques jours d'utilisation 

les employés souhaitent disposer
des opérations supplémentaires suivantes :

--
+vendre() : Article X Entier -> entier+::
met à jour et retourne le nombre d'articles restants après retrait du nombre fourni

+reprendre() : Article X Entier -> entier+::
met à jour et retourne le nombre d'articles restants après ajout du nombre fourni
--

. Fournir les préconditions de ces actions

. Ecrire en *Java* les 2 opérations supplémentaires du type Abstrait Article.
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Version corrigée
=====
[source,java]
----
    int vendre(int combien) throws Exception{
        if (quantite >= combien) { throws Exception("stock insuffisant"); }
        quantite = quantite - combien ;
        return(quantite);
    }
    int reprendre(int combien){
        quantite = quantite + combien ;
        return(quantite);
    }
----
=====
endif::prof[]


== Question 6  (***) (Barème : 2 Points)

Le responsable du magasin souhaite lors de l'inventaire
de son stock cumuler le nombre d'articles par catégorie.

. En supposant que le tableau tabStock[] ait été préalablement rempli,
fournir le code *java* de la fonction +stockCategories(tabStock)+ qui retourne un tableau
d'entiers contenant le nombre total d'articles de chaque catégorie et
le nombre total d'articles toutes catégories confondues à l'indice 0.


[NOTE]
====
Le magasin vends exactement 4 catégories d'articles

Les numéros de catégorie sont 1,2,3 et 4

Exemple: 
----
 SI stockCategories() retourne [6,2,0,1,3] 
 ALORS
 le magasin dispose 
  d'un total de 6 articles, 
 dont 2 de catégorie 1,
  0 de catégorie 2, 
  1 de catégorie 3 
  et 3 de catégorie 4.
----
====

ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.stockCategories()
=====
[source,java]
----
  public static int[] stockCategories(Article[] tab){
    int[] resultat = new int[5] ;
    for (int indice = 0; indice < tab.length; indice = indice + 1){
        resultat[0] = resultat[0] + tab[indice].quantite ;
        resultat[tab[indice].categorie] = resultat[tab[indice].categorie] + tab[indice].quantite ;
    }
    return(resultat);
  }
----
=====
endif::prof[]

----
.
.
.
.
.
.
.
.
.
.
.
----

== Question 7  (***) (Barème : 3 Points)

Le responsable du magasin souhaite obtenir l'affichage suivant de son stock :

----
 Catégorie 1 : souris, clavier
 Catégorie 2 : 
 Catégorie 3 : cleUSB
 Catégorie 4 : tablette, tour, portable
----



En supposant que le tableau +tabStock[]+ ait été préalablement rempli
et que la classe Pile (d'entiers) vue en TD/TP soit disponible

A partir de l'algorithme suivant :

----
DEBUT
POUR indice de 0 à nbArticles FAIRE
 article <- tabStock[indice]
 SI article.categorie = 1 ALORS pileCategorie1.empiler(article.nom) FINSI
 SI article.categorie = 2 ALORS pileCategorie2.empiler(article.nom) FINSI
 SI article.categorie = 3 ALORS pileCategorie4.empiler(article.nom) FINSI
 SI article.categorie = 4 ALORS pileCategorie4.empiler(article.nom) FINSI
FINPOUR
/* Affichage */
FIN
----

. Compléter la partie Affichage de l'algorithme
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Affichage
=====
[source,java]
----
 chaine = ""
 chaine = chaine ++ "Categorie 1 : "
 TANTQUE NON pileCategorie1.estVide() FAIRE
   article = pileCategorie1.depiler()
   chaine = chaine ++ article.nom
   SI NON pileCategorie1.estVide() ALORS chaine = chaine ++ ", "
 FINTANTQUE
 
 // idem pour les catégories 2, 3 et 4
----
=====
endif::prof[]

. Fournir le code *java* de la procédure +nomsParCategories(tabStock)+ qui affiche à l'écran l'état demandé.


== Question 8  (***) (Barème : 3 Points)

En supposant que les 4 piles +pileCategorie[1234]+ ont été remplies,

. Ecrire une fonction +nomsArticlesTries()+ qui retourne une chaîne de caractères contenant la liste des noms d'articles du stock triée par ordre alphabétique croissant à partir des 4 piles fournies en paramètre.
+
.Exemple :
----
nomsArticlesTries(pileCategorie1,pileCategorie2,pileCategorie3,pileCategorie4) 
-> "clavier + cleUSB + portable + souris + tablette + tour"
----

. Fournir la signature d'une fonction +nomsArticlesTries()+ qui prend un tableau de piles en paramètres

. Fournir le code *java* de cette nouvelle fonction +nomsArticlesTries()+ qui prend un tableau de piles en paramètres

ifdef::prof[]
== Annexe

[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Fichiers
=====
link:Article.java[]

link:Magasin.java[]

link:CTRL.txt[]
=====
endif::prof[]
