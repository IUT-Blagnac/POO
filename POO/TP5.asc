:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 5
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true


:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD3 : Encapsulation/Création de classes, CM2/TP4 : ArrayList<E>, TP2 : classe Compte et AgenceBancaire.
| {objtd}	| Programmer une classe.
| {duree}	| *2 séances* de 1,5h sur machine.
| {depot}	| Code source à déposer : Classe AgenceBancaire + réponses au questions éventuelles en commentaire en début de fichier.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* But du TP : Créer la classe AgenceBancaire en utilisant ArrayList<E>.

Ils peuvent utiliser leur programme développé en fin de TP précèdent si ils veulent (menu pour un opérateur de l'agence bancaire). La version donnée ici est une correction.
====

[IMPORTANT]
====
Au départ :

Bien démarrer en expliquant le sujet + *l'installation des fichiers et autres en local*. Ce dernier point est important car c'est là qu'ils perdront du temps.

A priori : Ça compile dès le départ

ATTENTION : les bouchons des méthodes à écrire sont à enlever (return ""; return 0; return null; ...). Bien le leur préciser.

En 3 heures ça devrait passer.

====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

Le but de ce TP est de construire la classe +AgenceBancaire+.

La documentation de la classe est connue : cf. documentation en ligne.

Pour l'implémentation, *on choisit de stocker les comptes de l'agence dans une +ArrayList<Compte>+*.

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

[NOTE]
======
La documentation de la classe ArrayList<E> est accessible depuis {docjava} et se trouve ici : {docjavaArrayList}.
======


[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp4-AG-Compte.png[]
=====

Il vous faudra écrire une partie des méthodes de la classe.

Pour les tests :

* un programme d'utilisation vous est fourni (menu pour un opérateur de l'agence bancaire).
* un programme de test {junit} est aussi fourni.

== Mise en place de l'environnement

Récupérer l'archive fournie et la dézipper. Vous obtiendrez dans un seul et même répertoire de travail :

. Le fichier AgenceBancaire.java : *le fichier à compléter* durant le TP.
. Le fichier ClasseApplicationAgenceBancaire.java : pour les tests (menu pour un opérateur de l'agence bancaire). A ne pas modifier mais à lancer pour tester. 
. Le fichier TestAgenceBancaire.java : fichier {junit} de test des développements que vous ferez dans AgenceBancaire.java. A modifier ponctuellement pour les tests.
. Le répertoire tps qui contient le package tps (Compte, classes d'exceptions, ...) SAUF la classe AgenceBancaire bien sur ...
. Le fichier SciTE.properties : il paramètre Scite pour compiler/exécuter en utilisant la librairie {junit} contenue dans le fichier .jar. De plus l'option de formatage de code est disponible (indentation du code).
. Le fichier junit.jar : il contient la librairie {junit} pour les tests.

Ensuite seulement lancer Scite et ouvrir les 3 fichiers .java.

== Implémentation de la classe AgenceBancaire

=== Analyse de l'implémentation

Reprendre le code fourni.

==== Les attributs

Vous trouverez dans le fichier la déclaration suivante :

* deux attributs de type String pour le nom et la localisation de l'agence bancaire
* un attribut +alCptes+ qui est l'+ArrayList<Compte>+ qui contient les différents comptes de l'agence.

[source,java]
----
public class AgenceBancaire {
	// Attributs
	private String nom, loc;
	private ArrayList<Compte> alCptes;
----

==== Le code déjà écrit

Il vous est proposé une classe AgenceBancaire avec les en-têtes des méthodes et constructeur et les commentaires associés.

Sont déjà écrites, à étudier :

. +public Compte[] getComptesDe(String pNomProprietaire)+
. +public void afficher()+
. +public String toString()+

=== Implémentation à réaliser

Les méthodes à écrire comportent un +return xx;+ lorsque nécessaire :

*	Ceci permet de pouvoir compiler à chaque étape sans plus de code.
*	Cela s'appelle un "bouchon", qui renvoie une mauvaise valeur ici en l'occurrence. 
*	*Ne pas oublier d'enlever ces instructions inutiles (et fausses)*.

Implémenter les méthodes dans l'ordre :

. +public AgenceBancaire(String pNomAgence, String pLocAgence)+ : le constructeur, en 3 lignes.
+
[NOTE]
=====
On commence TOUJOURS par le constructeur car c'est la première opération réalisée sur un objet nouvellement créé : début de la vie d'un objet.
====
+
[IMPORTANT]
=====
Le rôle du constructeur est TOUJOURS d'initialiser TOUS les attributs de l'objet.
====
+
. +public String getNomAgence()+ : simple ... (1 ligne).
. +public String getLocAgence()+ : simple aussi (1 ligne).
. +public int getNbComptes()+ (1 ligne).


A ce stade, écrire dans l'ordre :

. *La méthode +private int trouveCompte(String pNC)+, méthode privée utilisée plusieurs fois par la suite*. Elle permet de retrouver le rang d'un compte à partir de son numéro de compte.

* Attention ici à la comparaison effectuée pour la recherche.
* On optimisera la boucle de recherche (sortie dès que solution trouvée). Et on expliquera pourquoi on trouvera 0 objet compte ou 1 seul pour un numéro de compte donné (et non pas plusieurs). Cf. documentation de la classe +AgenceBancaire+.

. +public Compte getCompte(String pNumCompte)+ : facile à écrire maintenant.
. +public void addCompte(Compte pCompteAAjouter) throws ABCompteNullException, ABCompteDejaExistantException+

* Faire attention à TOUS les cas d'erreur.
* Réutiliser +trouveCompte()+.

. +public void removeCompte(String pNumCompte) throws ABCompteInexistantException+

* Faire attention aux cas d'erreurs.
* Réutiliser +trouveCompte()+.
* Lire la documentation de ArrayList<E> : il existe plusieurs *surcharges* de la méthode +remove()+ dont l'une d'elle doit vous aider à régler la suppression "facilement".

=== Tests de la classe

Testez votre classe :

.	L'application menu pour un opérateur de l'agence bancaire doit fonctionner avec votre classe.
+
[NOTE]
=====
C'est l'application la plus simple à utiliser pour les  premiers tests : ajouts, puis recherches, puis suppressions, puis recherches à nouveau ...
====
+
.	Elle doit passer avec succès (complet) les tests {junit}.
+
[NOTE]
=====
On réalise les tests "d'un coup" car :

* 	+getCompte()+ ne peut être testée sans +addCompte()+ (seul un cas particulier peut être testé).
*	De même +addCompte()+ ne peut être testée sans +getCompte()+ (seul un cas particulier peut être testé).
*	Enfin +removeCompte()+ ne peut être testée sans les 2 précédentes.
====

== Pour aller plus loin ... 

=== La Méthode toString() et sa réécriture.

La méthode toString() est écrite dans la classe +AgenceBancaire+. 

* Pour voir le résultat produit, dans un main(), essayer le code suivant :
+
[source,java]
----
AgenceBancaire monAg ;
Compte c;
monAg = new AgenceBancaire("Caisse Ep", "Pibrac");

System.out.println (monAg);

try {
	c = new Compte ("0101", "prop1");
	monAg.addCompte(c);
	c = new Compte ("0202", "prop2");
	monAg.addCompte(c);
	c = new Compte ("0303", "prop2");
	monAg.addCompte(c);
} catch (ABCompteNullException e) {
	System.out.println (e.getMessage());
} catch (ABCompteDejaExistantException e) {
	System.out.println (e.getMessage());
}
-----
+
*	Modifier +AgenceBancaire+ et mettez en commentaire la déclaration de la méthode toString().
*	Relancez le test. Qu'est ce qui s'affiche ? Conclusion que l'on peut tirer pour tout objet Java quelle que soit sa classe ?
*	Pourquoi à votre avais le code suivant :
+
[source,java]
----
String s = new String ("Bonjour");
System.out.println (s);
-----
+
va afficher "Bonjour" et non pas "String@45792589" ? Qu'est ce qui a été écrit dans le code de la classe String ?

=== Reprogrammer +public Compte[] getComptesDe(String pNomProprietaire)+.

. Reprogrammer la méthode  +public Compte[] getComptesDe(String pNomProprietaire)+ selon la spécification suivante :

* L'algorithme suivi sera le suivant :
** Parcourir +alCptes+ pour compter le nombre comptes à renvoyer pour le propriétaire recherché. Conserver les indices du premier et dernier compte trouvé.
** Créer un tableau de Compte pour le résultat de la taille nécessaire.
** Remplir le tableau à partir de +alCptes+ en optimisant le parcours au vu de la recherche effectuée.
** Au final, tous les tests (en particulier {junit}) doivent fonctionner.

. Calculer le coup moyen de calcul des 2 versions programmées (existante et la votre) :

* Compter un coût de 1 pour l'accès à un compte d'une l'ArrayList ou d'un tableau (en lecture ou en modification).
* Compter que dans la version initiale, l'ArrayList sera recopiée en interne une fois (recopie de 10 éléments).
* Prendre en compte les éléments suivants :
** Un propriétaire possède en moyenne 12 comptes dans une agence.
** Une agence gère en moyenne 36000 comptes.


ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Agence Bancaire
======
[source,java]
----
package tps.banque;

import java.util.ArrayList;

import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;

/************************************************************
 * La classe AgenceBancaire permet de gérer une agence bancaire comme un ensemble de Comptes.<BR>
 * Une AgenceBancaire a un nom, une localisation (ville) et gère un ensemble de Comptes.<BR>
 * Exemple : agence "Agence Caisse Epargne" à "Pibrac".<BR>
 * Chaque Compte de l'AgenceBancaire a un numéro unique (vérification faite lors de l'ajout d'un Compte).<BR>
 * 
 * @author André Péninou.
 * @version 7.02
 *****************************/

public class AgenceBancaire {
	// Attributs
	private String nom, loc;
	private ArrayList<Compte> alCptes;

	/**
	 * Constructeur paramétré.<BR>
	 * Permet de créer une AgenceBancaire en donnant son nom et sa ville.<BR>
	 * L'AgenceBancaire est initialisée avec 0 comptes.<BR>
	 * 
	 * @param pNomAgence
	 *            Le nom de l'AgenceBancaire.
	 * @param pLocAgence
	 *            La ville de localisation de l'AgenceBancaire.
	 */

	public AgenceBancaire(String pNomAgence, String pLocAgence) {
		this.nom = pNomAgence;
		this.loc = pLocAgence;
		this.alCptes = new ArrayList<Compte>();
	}

	/**
	 * Permet de connaître le nom de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nom de l'AgenceBancaire.
	 */

	public String getNomAgence() {
		return this.nom;
	}

	/**
	 * Permet de connaître la localisation de l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return La ville de localisation de l'AgenceBancaire.
	 */

	public String getLocAgence() {
		return this.loc;
	}

	/**
	 * Permet de connaître le nombre de Comptes existant dans l'AgenceBancaire.<BR>
	 * <BR>
	 * 
	 * @return Le nombre de comptes de l'AgenceBancaire.
	 */

	public int getNbComptes() {
		return this.alCptes.size();
	}

	/**
	 * Permet de retrouver un Compte de l'AgenceBancaire à partir de son numéro de
	 * compte (unique).<BR>
	 * Renvoie null si le Compte de numéro de compte pNumCompte n'est pas
	 * trouvé.<BR>
	 * <BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte recherché.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Le Compte de numéro pNumCompte, null si le compte n'est pas
	 *         trouvé.
	 */

	public Compte getCompte(String pNumCompte) {
		// A titre d'exemple : utilise une méthode privée définie en fin de
		// classe
		int rang = this.trouveCompte(pNumCompte);
		if (rang != -1) {
			return this.alCptes.get(rang);
		}
		return null;
	}

	/**
	 * Permet de retrouver les Comptes de l'AgenceBancaire correspondant à un nom de
	 * propriétaire donné.<BR>
	 * Renvoie un tableau du nombre de Comptes ayant pour propriétaire
	 * pNomProprietaire (et contenant les dits Comptes...).<BR>
	 * Si aucun Compte n'est trouvé, renvoie un tableau de longueur 0.<BR>
	 * <BR>
	 * 
	 * @param pNomProprietaire
	 *            Le nom du propriétaire de Compte dont on veut les Comptes.
	 * @see AgenceBancaire#addCompte(Compte)
	 * @return Un tableau des Comptes ayant pour propriétaire pNomProprietaire,
	 *         un tableau de longueur 0 si aucun compte n'est trouvé.
	 */

	public Compte[] getComptesDe(String pNomProprietaire) {
		/*
		 * Méthode : créer une ArrayList de Compte temporaire : alTemp. 
		 * Parcourir this.alCptes.
		 * 	Si un compe appartient au proprietaire 
		 * 		=> le garder dans alTemp.
		 * Si alTemp non vide : recopier tous les comptes de alTemp dans
		 * un nouveau tableau qui sera renvoyé 
		 * Sinon créer un tableau de 0 éléments.
		 */

		Compte t[], cTemp;
		ArrayList<Compte> alTemp; // ArrayList de Compte temporaire
		int nbC, nbCTemp, i;

		t = null;

		// Recherche des comptes de pNomProprietaire dans l'AgenceBancaire
		alTemp = new ArrayList<Compte>();
		nbC = this.alCptes.size();
		for (i = 0; i < nbC; i++) {
			cTemp = alCptes.get(i);
			if (cTemp.getProprietaire().equals(pNomProprietaire)) {
				alTemp.add(cTemp);
			}
		}

		// Si on a trouvé des comptes ...
		if (alTemp.size() != 0) {
			// ... on crée un tableau et on les recopie
			nbCTemp = alTemp.size();
			t = new Compte[nbCTemp];
			for (i = 0; i < nbCTemp; i++) {
				t[i] = alTemp.get(i);
			}
			/*
			 * Ou bien directement, sans les lignes ci-dessus :
			 *		t = alTemp.toArray(new Compte[0]); 
			 * cf. doc ArrayList / T[] toArray(T[])
			 */
		} else {
			// ... pas de compte dans un tableau vide
			t = new Compte[0];
		}
		return t;
	}

	/*	Autre solution possible : sans ArrayList temporaire
	 	public Compte[] getComptesDe (String pNomProprietaire)
		{
			Compte t[], cTemp;
			int nbC, nbCCourants, i, j;
			
			t=null;
			
			// On compte les comptes de pNomProprietaire
			nbC = 0;
			nbCCourants = this.vCpt.size();
			for (i=0; i<nbCCourants; i++)
			{
				cTemp = alCptes.get(i);
				if (cTemp.getProprietaire().equals(pNomProprietaire)) {
					nbC++;
				}
			}
			
			// Si on a trouvé des comptes ...
			if (nbC != 0)
			{
				// ...  on crée un tableau et on les recherche à nouveau
				// pour les recopier
				t = new Compte[nbC];
				j=0;
				nbCCourants = this.alCptes.size();
				for (i=0; i<nbCCourants; i++)
				{
					cTemp = alCptes.get(i);
					if (cTemp.getProprietaire().equals(pNomProprietaire)) {
						t[j++] = cTemp;
					}
				}
			}
			else {
				t=new Compte[0];
			}
	
			return t;
		}
	 */

	/**
	 * Permet d'afficher une AgenceBancaire -<B> SPECIAL TP.</B><BR>
	 * <BR>
	 * Affiche le nom de l'AgenceBancaire, sa localisation, le nombre de Comptes,
	 * chaque Compte avec son solde.<BR>
	 * <BR>
	 * <B>ATTENTION : Méthode spéciale pour les TP.</B><BR>
	 * <BR>
	 */

	public void afficher() {
		int i, nbC;
		Compte cTemp;

		System.out.println();
		System.out.println("Nom : " + this.nom + " (" + this.loc + ")");
		System.out.println("" + this.alCptes.size() + " Comptes :");
		nbC = this.alCptes.size();
		for (i = 0; i < nbC; i++) {
			cTemp = alCptes.get(i);
			cTemp.afficher();
			System.out.println("   Solde : " + cTemp.soldeCompte());
		}
		System.out.println();
	}

	/**
	 * Permet d'obtenir la représentation String d'une AgenceBancaire.<BR>
	 * <BR>
	 * Donne le nom de l'AgenceBancaire, la localisation, le nombre de Comptes.<BR>
	 * <BR>
	 */

	public String toString() {
		return "Nom Agence : " + this.nom + " (" + this.loc + ") : "+this.alCptes.size()+" cptes";
	}
	
	/**
	 * Permet d'ajouter un Compte à l'AgenceBancaire.<BR>
	 * Le Compte pCompteAAjouter est ajouté à l'AgenceBancaire s'il n'existe pas déjà un Compte
	 * ayant le même numéro de compte que pCompteAAjouter 
	 * (identique en numéro de compte à pCompteAAjouter.getNumCompte()).<BR>
	 * Si on appelle la méthode avec null en paramètre, la méthode lève une exception.<BR>
	 * 
	 * @param pCompteAAjouter
	 *            Le Compte à ajouter à l'AgenceBancaire.
	 * @throws ABCompteNullException  lorsque pCompteAAjouter == null	
	 * @throws ABCompteDejaExistantException  lorsque un compte de numéro pCompteAAjouter.getNumCompte() existe déjà dans l'AgenceBancaire.
	 * @see AgenceBancaire#removeCompte(String)
	 */

	public void addCompte(Compte pCompteAAjouter) throws ABCompteNullException, ABCompteDejaExistantException {
		int rang; 
		
		// Si null => refusé
		if (pCompteAAjouter == null) {
			throw new ABCompteNullException("Erreur ajout Compte 'null' dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		}

		// On cherche un Compte de même numéro
		rang = this.trouveCompte(pCompteAAjouter.getNumCompte());

		// Si trouvé
		if (rang != -1) {
			// => refusé
			throw new ABCompteDejaExistantException(
					"Erreur ajout Compte déja existant ("
					+ pCompteAAjouter.getNumCompte() + ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		} else {
			// sinon ... on ajoute le Compte
			this.alCptes.add(pCompteAAjouter);

		}
	}

	/**
	 * Permet de supprimer un Compte de l'AgenceBancaire, à partir de son numéro.<BR>
	 * Le Compte (unique) de numéro pNumCompte est retiré de l'AgenceBancaire s'il est
	 * trouvé.<BR>
	 * Une exception est levée si le compte n'est pas trouvé.<BR>
	 * 
	 * @param pNumCompte
	 *            Le numéro du Compte à supprimer de l'AgenceBancaire.
	 * @throws ABCompteInexistantException	Lorsque aucun compte de numéro pNumCompte ne peut être trouvé.
	 * @see AgenceBancaire#addCompte(Compte)
	 */
	public void removeCompte(String pNumCompte) throws ABCompteInexistantException{
		int rang;

		// On cherche un Compte de même numéro
		rang = this.trouveCompte(pNumCompte);

		// Si pas trouvé ...
		if (rang == -1) {
			// ... erreur
			throw new ABCompteInexistantException(
					"Erreur suppression Compte inexistant ("
					+ pNumCompte+ ") dans l'agence " 
					+ this.nom + " (" + this.loc + ")");
		} else {
			// ... on enlève ce Compte
			this.alCptes.remove(rang);
		}
	}


	/**
	 * Méthode privée de recherche d'un compte.
	 * Cherche le rang d'un compte dans alCptes ayant pour numéro de compte pNC.
	 * Renvoie -1 si aucun compte n'est trouvé.
	 *
	 * @param      pNC  numéro dui compte recherché
	 * @return     le rang de l'objet compte de numéro pNC ou -1 si non trouvé. 
	 */
	private int trouveCompte(String pNC) {
		Compte cTemp;
		int i, nbC;
		int rang; 
		// On parcours l'ArrayList de l'AgenceBancaire
		nbC = this.alCptes.size();
		rang = -1;
		for (i = 0; i < nbC && rang == -1; i++) {
			cTemp = alCptes.get(i);
			// Si un Compte a le même numéro que pNC
			if (cTemp.getNumCompte().equals(pNC)) {
				// ... on garde son rang
				rang = i;
			}
		}
		return rang;
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution exo "pour aller plusloin"
======

toString() :

*	toString() standard affiche : AgenceBancaire@45454545
*	Tout objet Java a en standard une méthode toString() qui affiche : NomClasse@refobjet
*	Dans String, la méthode toString() est réécrite pour ne pas affciher String@454545 par défaut mais plutôt le contenu de la chaine.


Calculs :

. Version initiale :

* parcours : 36000
* copie dans ArrayList : 12
* recopie de l'ArrayList : 10
* recopie dans tableau : 12 (accès ArrayList) + 12 (accès tableau)
* Total : *36046*

. Version deux :

* parcours de recherche : 36000
* parcours d'extraction : 36000 + 12 (accès tableau)
* Total : *72012*


[source,java]
----
public Compte[] getComptesDe (String pNomProprietaire)
{
	Compte t[], cTemp;
	int nbC, nbCCourants, i, j;
	
	t=null;
	
	// On compte les comptes de pNomProprietaire
	nbC = 0;
	nbCCourants = this.vCpt.size();
	for (i=0; i<nbCCourants; i++)
	{
		cTemp = alCptes.get(i);
		if (cTemp.getProprietaire().equals(pNomProprietaire)) {
			nbC++;
		}
	}
	
	// Si on a trouvé des comptes ...
	if (nbC != 0)
	{
		// ...  on crée un tableau et on les recherche à nouveau
		// pour les recopier
		t = new Compte[nbC];
		j=0;
		nbCCourants = this.alCptes.size();
		for (i=0; i<nbCCourants; i++)
		{
			cTemp = alCptes.get(i);
			if (cTemp.getProprietaire().equals(pNomProprietaire)) {
				t[j++] = cTemp;
			}
		}
	}
	else {
		t=new Compte[0];
	}

	return t;
}
----
======

endif::prof[]

endif::todoprof[]
