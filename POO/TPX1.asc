:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP ??????????????
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| -
| {objtd}	| Générer la documentation de classes pour les clients de la classe (API).
| {duree}	| *1 séance* de 1,5h sur machine.
| {depot}	| A déposer : code source de CompteDepot et CompteSecurise commentées et documentation générée par javadoc pour toutes les classes (un seul fichier .zip).
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Documenter des classes, ici quelques classes de la hiérarchie de comptes.
====

[IMPORTANT]
====
Expliquer au départ les principes de documentation :

*	Doc avant l'élément documenté
*	Tags possible
*	Principe de la doc : 

**	A destination : d'un programmeur
**	A destination d'un client qui n'a pas à connaître l'implémentation mais "l'usage" de la classe.
====

[IMPORTANT]
====
A Suivre :

TODOTODOTODOTODO
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

Le but de ce TP est de documenter des classes à destination de *programmeurs* pour deux usages distincts :

*	Développement de classes *clientes* de vos classes.
*	Développement de classes qui *héritent* de vos classes.

Le but de ce TP est de générer la documentation des classes du TP précédent sur la hiérarchie de comptes : 
*	la documentation générée automatiquement par javadoc (structure de la documentation),
*	la documentation détaillée (réelle) pour les classes CompteDepot et CompteSecurise (les plus avancés pourront faire les autres classes).

Rappel de la hiérarchie de classes du TP précédent :

[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp8.1.png[]
=====

== Mise en place de l'environnement

TODOTODOTODOTODO.

== Principes de documentation des classes

javadoc est un outil développé par Sun Microsystems permettant de générer une documentation d'API en format HTML depuis les commentaires présents dans un code source en Java.

=== Utilitaire javadoc

L’utilitaire javadoc permet de générer automatiquement la documentation d’un ensemble de classes java à partir des fichiers sources (.java).

La documentation produite pour une classe est destinée aux futurs clients et sous-classes de cette classe. On y retrouvera donc les propriétés public et protected, de classe et d’instances (d’objets). Les propriétés privées et le code des méthodes, c’est-à-dire l’implémentation, ne se trouveront pas a priori dans la documentation (mais c'est possible).

La génération de la documentation se fait, à partir des fichiers sources, en recherchant deux types d’informations pour générer la documentation :
*	les déclarations java « pures » (le code java) pour trouver les informations « syntaxiques basiques » à mettre dans la documentation : identificateurs des classes, héritage, propriétés déclarées publiques, identificateurs de méthodes, identificateurs des paramètres formels, ...
*	des commentaires ayant un format et un emplacement spécifiques, ajoutés par le programmeur, et qui viendront donner les éléments d’explication qui seront ajoutés à la documentation.

==== Utiliser la commande javadoc

Ouvrir une fenêtre de commande :

*	se positionner dans votre répertoire de travail contenant les fichiers .java
*	positionner le +path+ permettant d'accéder à l'utilitaire javadoc qui se trouve dans le répertoire bin de la distribution du jdk : commande
+
 path=%path%;"c:\Programmes\Java\jdkxxx\bin"

Quelques options de la commande javadoc :

 javadoc    -version  -author  -link URLDOC  -d  rep    c1.java  [c2.java …]

Cette commande, permet de générer la documentation :

*	+c1.java  [c2.java …]+ : pour la classe c1.java, et autres si précisées (*.java possible), les classes doivent exister dans le répertoire courant,
*	+-d  rep+ : optionnel, la documentation est générée dans le répertoire rep (+-d+ : directory),
*	+-link URLDOC+ : optionnel, provoque le lien (liens hypertextes) de la documentation générée vers une autre documentation située à URLDOC. L'URL peut être une URL classique ou bien un fichier local. Exemple : http://java.sun.com/javase/6/docs/api/. Cela fera que les noms de classes connues dans l'API Java (String, ...) se présenteront comme des liens hypertextes vers la documentation indiquée.
*	+-author+ : optionnel, provoque la génération des informations sur l'auteur si disponibles,
*	+-version+ : optionnel, provoque la génération des informations de version si disponibles,

==== Travail à faire

*Question :* Sans ajouter de commentaire aux classes écrites :

*	*reprendre la classe +Compte+ du serveur (documentée),*
*	*générer la documentation de toutes vos classes du TP (hiérarchie de Compte + autres classes),*
*	*consulter la documentation pour comprendre ce qui est généré.*

=== Insertion de commentaires pour générer le complément de documentation

Des commentaires spécifiques sont utilisés par javadoc lors de la génération. Ils ont la forme :

[source,java]
----
 /**
  //…
*/
----
	
L'élément important est ici le début du commentaire : /**

Ces éléments de commentaire sont insérés *avant* l'élément syntaxique qu'ils décrivent : avant la clause de déclaration de classe, avant la déclaration d'une méthode, ...

L’élément de commentaire contient (principalement) :
*	une première ligne se terminant par un point ("."). C'est le résumé qui apparaît dans le tableau résumé de la documentation (cf. description des méthodes).
*	du texte composant le commentaire détaillé,
*	des balises html de mise en forme (<BR>, <B> … </B>, <code> … </code>, …),
*	des  balises spéciales propres à javadoc et commençant pas le caractère @ : les « tags ».

Exemple :


[source,java]
----
/**
 * Permet d'effectuer un retrait sur un Compte.<BR>
 * <BR>
 * Effectue un retrait (débit) de pSomme Euros sur le Compte.<BR> 
 * Spécial TP : tout retrait est accepté, même si le solde est négatif !<BR>
 * <BR>
 * @param		pSomme			Le montant retiré sur le Compte.
 * @see         Compte#deposer(double)
 */
public void retirer (double pSomme) {
    this.debit = this.debit + pSomme;
}
----

Voir la classe Compte.java.


=== Travail à faire

*Question : Commenter les classes CompteDepot et CompteSecurise. Observer la documentation générée (sur toutes les classes).*


=== Liste (non exhaustive) de tags reconnus par javadoc 

Balise	Rôle	Applicable à
@author	@author   text
Précise l'auteur de la source. Si plusieurs auteurs, mettre plusieurs balises.
Ex : @author		A. Péninou	Classe, Méthode.
@deprecated	@deprecated   text
Quand cette balise est mise dans le commentaire de tête, TOUT ce qui suit est considéré comme Deprecated (Méthode,...). Sinon le préciser seulement au niveau désiré.
Deprecated == à ne plus utiliser à partir d’une version donnée, susceptible de disparaître dans les versions ultérieures.	Classe, Interface, Méthode, Attribut.
@exception
@throws	@throws  class-name  description 
@exception class-name  description 
Documente une exception lancée par une méthode. @throws est un synonyme pour @exception disponible depuis Javadoc 1.2.	Méthode.
@param	@param  parameter-name description
Définit un paramètre de méthode. Requis pour chaque paramètre. Donne le nom + explication succincte.
Ex : @param     pNomProp     Le nom du propriétaire.	Constructeur, Méthode.
@return	@return  description
Documente la valeur de retour. Ce tag ne doit pas être employé pour des constructeurs ni des méthodes définies comme void.
Ex : @return   true si ok, false sinon	Méthode.
@see	@see  reference
Créer un paragraphe "Voir aussi". Etablir un lien hypertexte sur un autre élément en rapport avec la partie traitée. L’élément en rapport peut être dans la classe ou dans une autre classe.
Ex : @see         Compte#deposer(double)	Package, Classe, Méthode, Constructeur, Interface, Attribut.
@since	@since  since-text 
Précise à quelle version de la SDK/JDK une méthode à été ajoutée à la classe. Date de création de l'entité.	Package, Classe, Méthode, Constructeur, Interface, Attribut.
@version	@version  version-text
Version en cours de l'élément.
Ex : @version		2.3.1.15.12	Classe, Méthode, et Interface.

ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions
======
[source,java]
----
----
======

endif::prof[]

endif::todoprof[]
