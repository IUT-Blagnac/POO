:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 12
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Maîtriser l'héritage. Cours : polymorphisme. Cours : notion d'interface. 
| {objtd}	| Implémenter une interface Java.
| {duree}	| *1 séance* de 1,5h sur machine.
| {depot}	| A déposer : code source classe de test, réponse aux questions en commentaire dans le code, classe Outils, classes modifiées.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Implémenter une interface dans des classes connues.
====

[IMPORTANT]
====
Faire avec eux le début : 

. 
====

[IMPORTANT]
====
Déroulement prévu :

*	
====

[IMPORTANT]
====
A Suivre :


====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

L’objectif de ce TP est d’implémenter une interface simple pour en tester les effets. Le but est de pouvoir afficher à l’écran "n’importe quel objet sans se soucier de son type réel".

== Mise en place de l'environnement

Récupérer les fichiers suivants dans votre répertoire de travail : 

*	la classe Outils,
*	la classe Principal contenant le main à lancer pour ce TP,
*	les classes Compte et Vehicule.

==	Implémenter une interface

=== Le problème à résoudre

*Questions :*

.	Étudiez les classes livrées :

..	La classe Outils dispose d’une méthode statique +testAffichage()+ qui devra de prendre en paramètre soit un Compte soit un Vehicule et appliquer à ce paramètre la méthode +afficher()+. En tout cas : on compte sur vous pour faire en sorte qu’elle marche ....
..	La classe Principal contient  le +main()+, qui déclare un objet Compte puis un objet Vehicule et appelle la méthode +testAffichage()+ précédente avec en paramètre successivement ces deux objets.

.	Compléter le type du paramètre dans l’en-tête de la méthode +testAffichage()+. Rencontrez-vous des problèmes ? Pourquoi ?

=== Rendre les objets Compte "affichables"

*Questions :*

.	Récupérer l’interface Displayable. Étudier cette interface.
.	Déclarer que lca classe Compte implémente l’interface Displayable : +class Compte implements Displayable { ...+
.	Compilez. Quelle est la remarque immédiate du compilateur ?
.	Il faut "implémenter" l'interface, c'est-à-dire écrire la méthode +displayObject()+ dans la classe Compte (utiliser la méthode locale +afficher()+).
.	Dans la classe Outils, définir la méthode statique +testAffichage ()+ précédente comme prenant en paramètre un objet Displayable et faites lui afficher ce paramètre (appliquer au paramètre la méthode qui va bien pour les objets Displayable). Compiler cette classe. Ca marche ?
.	Dans la méthode +main()+, déclarer un objet Compte et appeler la méthode +testAffichage ()+ précédente avec en paramètre ce Compte. Cela fonctionne-t-il ?

=== Rendre les objets Vehicule "affichables"

*Questions :*

.	Déclarer que Vehicule implémente l’interface Displayable. 
.	Dans la méthode +main()+, déclarer un objet Vehicule et appeler la méthode +testAffichage ()+ précédente avec en paramètre ce Vehicule. Cela fonctionne-t-il ? Pourquoi ?
.	Dans la classe Outils, modifier la méthode +testAffichage ()+ pour appeler sur l’objet en paramètre la méthode +getKilometrage ()+ sur son paramètre (sans utiliser de casting). Même question pour +getNumCompte()+. Compiler. Est-ce possible ? Pourquoi ?

=== Rendre d'autres objets "affichables"

*Questions :*

.	Reprendre la classe Personne. Modifier cette classe pour implémenter Displayable et tester l’appel de la  méthode +testAffichage ()+.
.	Reprendre les classes CompteDepot et CompteSecurise. On souhaite faire la même chose que pour Personne (tester les appels de la méthode +testAffichage ()+ avec des paramètres CompteDepot et CompteSecurise). Que faut-il faire ? Que n’est-il pas nécessaire de faire ? Réfléchir un peu ...

[IMPORTANT]
.A BIEN REMARQUER
======
*Remarquez que, depuis un petit moment, la classe Outils est déjà définie et compilée, et vos objets lui sont passés en paramètres sans souci ...*

*Il n’avait pas été "prévu" de "recevoir a priori" des objets Compte, Vehicule, Personne, CompteDepot, CompteSecurise ... en paramètre, MAIS l'interface Displayable donne à chacun de ces objets le comportement attendu (+displayObject()+).*
======

== Optionnel : des tableaux "d'objets implémentant une interface"

*Questions :*

.	Dans la classe Outils, définir une méthode *testAffichageTableau()+ prenant en paramètre un tableau d’objets Displayable, et permettant d’afficher tous les objets de ce tableau.
.	Dans la méthode +main()+, créer un tableau d’objets Compte, un tableau d’objets Vehicule, et appeler la méthode +testAffichageTableau ()+ successivement avec ces deux paramètres.

ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions
======
[source,java]
----
Pas de sol particulière : ils n'ont que de la documentation à produire.
----
======

endif::prof[]

endif::todoprof[]
