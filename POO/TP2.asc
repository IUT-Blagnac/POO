:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 2
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true




:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
ifndef::slides[]

ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| CM1 sur les objets, TD2 sur la manipulation d'objets.
| {objtd}	| Utiliser des objets - Lire une documentation.
| {duree}	| *2 séances* de 1,5h sur machine.
| {depot}	| Code source à déposer : essais de comptes, essais d'AgenceBancaire, application de gestion d'AgenceBancaire, jeu de Devinette.
|======================
====
endif::prof[]
endif::slides[]

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

- But du TP : Manipuler des objets sans disposer du code source. Lire une documentation (param, return, throws, ...).
- Idée de déroulement :

* Séance 1 : les comptes et les tests AgenceBancaire
* Séance 2 : l'appli sur l'agence.

- Les try catch ont été vus en S1. Les aider sans doute en leur donnant la structure de base.
+
[source,java]
----
	try {
		cUn.deposer(1);
		cDeux.deposer(1000);
	} catch (CompteException e) {
		System.out.println(e); ou System.out.println(e.getMesage()); 
	}
----
+
- Les aider au tableau au début si ca coince.

		
Au départ :

- Attention au dézippage du fichier au bon endroit -> dans le répertoire de travail.
- Faire avec eux le préambule pour installer les fichiers et démarrer le premier fichier .java à construire.
- Il faut obtenir l'arborescence :
* Rép de travail
** *ClasseEssaiCompte.java*
** tps
*** banque
**** Compte.class
**** AgenceBancaire.class
**** exception
***** CompteException.class
***** ...
*** jeux
**** Devinette.class
**** ...


====
endif::todoprof[]

ifndef::todoprof[]

[[Preambule]]
== Préambule

A faire :


. Depuis webetud, récupérer le fichier zip du tp.
. Le dézipper dans le répertoire où vous comptez travailler.
. Ce zip contient les packages de travail pour les tps. Il comporte en fait plusieurs packages de classes : +tps.jeux+, +tps.jeux.exception+, +tps.banque+, ...
** Regarder le contenu du répertoire (des fichiers .class structurés en répertoires).

. La documentation des classes se trouve sur le serveur webetud.
. Pour utiliser ces classes dans vos programmes: 
+
+import  tps.-_nomPackage[.nomPackage ...]_._NomDeClasse_;+. Exemple : +import  tps.jeux.Devinette;+

Pour chaque exercice, créer un programme Java +ClasseEssaiXXXXX.java+ comportant une méthode main(). "XXXXX" sera le nom de la classe testée à chaque exercice (Compte, ...).

On utilisera le début de code suivant :

[source,java]
----
// Imports pour tous les exercices
// Tous ne sont pas toujours utiles ...
import tps.banque.AgenceBancaire;
import tps.banque.Compte;
import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;
import tps.banque.exception.CompteException;

public class ClasseEssaiCompte
{
	public static void main (String argv[]) 
	{
		Compte cUn ;
		// ...
	}
}
----

== Exercice : les comptes

[NOTE]
======
Lire chaque section en entier avant de commencer.
======


Nous allons utiliser une classe +tps.banque.Compte+ qui permet de gérer des comptes simples comptabilisant des débits et des crédits successifs. 

=== Classe Compte

Étudier en détail la documentation de la classe +Compte+ (cf. webetud). En particulier, étudier si les méthodes sont des observateurs/accesseurs/getters ou des modifieurs/transformateurs/setters.

Repérer les méthodes générant des exceptions.

Attention : cette classe +Compte+ diffère de celle vue en S1.

.Diagramme UML de l'interface de la classe Compte
[caption="Figure : "]
image:images/classeCompteInterface.png[]

=== Essais classe Compte

Ecrire le programme réalisant les actions suivantes en le testant pas à pas à chaque demande d'affichage (compilation/run) :

.	Créer un programme Java +ClasseEssaiCompte.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
.	Déclarer deux variables +cUn+ et +cDeux+ "de type +Compte+" : références vers un +Compte+.
.	Appliquer la méthode +afficher()+ à +cUn+. Que se passe-t-il ?
.	Créer un +Compte+ à l'aide de +cUn+ au nom de "Jean". Créer un autre +Compte+ à l'aide de +cDeux+ au nom de "Marie".
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+. Conclusion …
+
[source,java]
----
System.out.println(System.identityHashCode(cUn));
System.out.println(System.identityHashCode(cDeux));
----
+
.	Essayer la syntaxe suivante :
+
[source,java]
----
System.out.println(cUn);
----
+
Quel est le résultat ? (voir l'aide sur toString()).
+
.	Déposer 1€ sur +cUn+. Déposer 1000€ sur +cDeux+. Le code suivant pourra vous aider
+
[source,java]
----
try {
	cUn.deposer( ... );
	cDeux.deposer( ... );
} catch (CompteException e) {
	System.out.println(e);
}
----
+
.	Afficher +cUn+ et +cDeux+ pour voir les soldes. 
.	Retirer  1€ de +cUn+. Retirer 1000€ de +cDeux+.
.	Afficher +cUn+ et +cDeux+ pour voir les soldes.
.	Essayer de retirer +-100+ euros du compte +cUn+. Que se passe-t-il ?
.	Essayer de déposer +-100+ euros sur le compte +cDeux+. Que se passe-t-il ?
.	*Affecter* la variable +cUn+ à la variable +cDeux+ (+cDeux = cUn;+).
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+. Conclusion …
.	Déposer 1000€ sur +cUn+. Afficher +cUn+ et +cDeux+.
.	Déposer 2000€ sur l’objet +Compte+ *ayant pour propriétaire "Marie"* que vous avez créé au début de cet exercice. Y arrivez-vous ?
.	Affecter à +cUn+ la valeur +null+.
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(cUn);
----
+
Quel est le résultat ?
+
.	Appliquer la méthode +afficher()+ à +cUn+. Que se passe-t-il ? Expliquer.

/////////////////////
.	Créer un programme Java +ClasseEssaiCompte.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
.	Déclarer une variable +c+ de type +Compte+ : une référence vers un +Compte+. Ajouter l'import nécessaire pour la classe +Compte+ (package +tps.banque+).
.	Appliquer la méthode +afficher()+ à +c+. Que se passe-t-il ?
.	Créer un +Compte+ avec un numéro de compte"010101" et un propriétaire "Lepoisson Benoit" à l'aide de +c+.
.	Appliquer la méthode +afficher()+ à c. Que se passe-t-il ?
.	Utiliser toutes méthodes disponibles sur la classe +Compte+. Pour retirer() et deposer(), ajouter l'import nécessaire pour la classe +CompteException+ (package +tps.banque.exception+)
.	Appliquer la méthode +afficher()+ à +c+.
.	Essayer de retirer +-100+ euros du compte +c+. Que se passe-t-il ?
.	Essayer de déposer +-100+ euros du compte +c+. Que se passe-t-il ?
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(c);
----
+
Quel est le résultat ? (voir l'aide sur toString()).
+
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(System.identityHashCode(c));
----
+
Quel est le résultat ?
+
.	Affecter à +c+ la valeur +null+.
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(System.identityHashCode(c));
----
+
Quel est le résultat ?
+
.	Appliquer la méthode +afficher()+ à +c+. Que se passe-t-il ? Expliquer.
/////////////////////


/////////////////////
=== Références d'objets

.	Déclarer deux variables +cUn+ et +cDeux+ "de type +Compte+" : références vers un +Compte+.
.	Créer un +Compte+ à l'aide de +cUn+ au nom de "Jean". Créer un autre +Compte+ à l'aide de +cDeux+ au nom de "Marie".
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+ (cf. <<Partie1,Partie 1>>). Conclusion …
.	Déposer 1€ sur +cUn+. Déposer 1000€ sur +cDeux+.
.	Afficher +cUn+ et +cDeux+ pour voir les soldes. 
.	Retirer  1€ de +cUn+. Retirer 1000€ de +cDeux+.
.	Afficher +cUn+ et +cDeux+ pour voir les soldes.
.	Affecter +cUn+ à +cDeux+ (+cDeux = cUn;+).
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+ (cf. <<Partie1,Partie 1>>). Conclusion …
.	Déposer 1000€ sur +cUn+. Afficher +cUn+ et +cDeux+.
.	Déposer 2000€ sur l’objet +Compte+ ayant pour propriétaire "Marie" que vous avez créé au début de cette partie. Y arrivez-vous ?


/////////////////////

/////////////////////
=== Références d'objets
.	Déclarer deux variables +cUn+ et +cDeux+ "de type +Compte+" : références vers un +Compte+.
.	Créer un +Compte+ à l'aide de +cUn+. Déposer 1000 € sur +cUn+. Afficher +cUn+ (méthode +afficher()+).
.	Affecter +cUn+ à +cDeux+ (+cDeux = cUn;+).
.	Afficher +cDeux+. Conclusion …
.	Déposer 2000€ sur +cUn+.
.	Afficher +cUn+ et +cDeux+. Conclusion …
.	Déposer 3000€ sur +cDeux+.
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+ (cf. <<Partie1,Partie 1>>). Conclusion …
.	Déposer 4000€ sur +cUn+ PUIS affecter la valeur +null+ à +cUn+.
.	Afficher +cDeux+. Conclusion …
/////////////////////


== Exercice : l'agence bancaire

[NOTE]
======
Lire chaque section en entier avant de commencer.
======

=== Classe AgenceBancaire

Étudier en détail la documentation de la classe +tps.banque.AgenceBancaire+ (cf. webetud). En particulier, étudier si les méthodes sont des observateurs/accesseurs/getters ou des modifieurs/transformateurs/setters.

Repérer les méthodes générant des exceptions.

.Diagramme UML de l'interface de la classe AgenceBancaire
[caption="Figure : "]
image:images/classeAgenceBancaireInterface.png[]


=== Premiers essais

Ecrire le programme réalisant les actions suivantes en le testant pas à pas (compilation/run) :

.	Créer un programme Java +ClasseEssaiAgenceBancaire.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
.	Déclarer une variable +monAg+ de type +AgenceBancaire+ : une référence vers une +AgenceBancaire+.
.	Créer un objet +AgenceBancaire+ à l'aide de +monAg+.
.	Afficher +monAg+.
.	Afficher le nombre de comptes de +monAg+.
.	Créer un objet +Compte+ de numéro "0101" et propriétaire "prop1" à l'aide d'une variable de type +Compte+. Créer deux autres comptes (numéros "0202" et "0303") avec un même propriétaire "prop2". 
.	Ajouter ces 3 comptes créés à l'AgenceBancaire +monAg+. Le code suivant pourra vous aider :
+
[source,java]
----
try {
	c = new Compte ( ... );
	monAg.addCompte(  ... );
} catch (ABCompteNullException e) {
	System.out.println (e.getMessage());
} catch (ABCompteDejaExistantException e) {
	System.out.println (e.getMessage());
}
----
+
.	Afficher +monAg+.
.	Rechercher à partir de +monAg+ le compte "0101" et l'afficher.
.	Déposer 1000€ sur ce compte.
.	Rechercher à nouveau à partir de +monAg+ le compte "0101" et l'afficher (copier/coller du code précédent). Bilan ?
.	Rechercher à partir de +monAg+ le compte "9999" et l'afficher.
.	Rechercher à partir de +monAg+ les comptes du propriétaire "prop2" et les afficher.
.	Déposer 2000 € sur le compte de numéro "0202" et 3000 € sur le compte "0303".
.	Rechercher à nouveau à partir de +monAg+ les comptes du propriétaire "prop2" et les afficher (copier/coller du code précédent). Bilan ??
.	Rechercher à partir de +monAg+ les comptes du propriétaire "ABSENT" et les afficher.
.	Essayer d'ajouter le compte de référence +null+ à +monAg+. Résultat ?
+
[source,java]
----
try {
	c = null;
	monAg.addCompte(c);
} catch (ABCompteNullException e) {
	System.out.println (e.getMessage());
} catch (ABCompteDejaExistantException e) {
	System.out.println (e.getMessage());
}
----
+
.	Essayer de supprimer le compte "0202" de +monAg+ AG.
.	Essayer de supprimer le compte "9999" de +monAg+ AG.
.	Créer un objet +Compte+ de numéro "0101" et propriétaire "prop99" à l'aide d'une variable de type +Compte+ et l'ajouter à l'AgenceBancaire +monAg+.

== Programme utilisateur pour une agence bancaire

=== Objectif

L'objectif est d'écrire un programme permettant de gérer les comptes d'une +AgenceBancaire+. L'application permettra :

* de créer/supprimer des objets Compte(s) de l'AgenceBancaire,
* de voir un compte de l'AgenceBancaire, de voir les comptes d'un propriétaire de l'AgenceBancaire,
* de débiter/créditer les compte(s) de l'AgenceBancaire,
* de lister tous les comptes de l'AgenceBancaire,
* de quitter l'application.

Pour commencer, vous pouvez reprendre le début de code suivant contenant :

* la méthode main(),
* une méthode pour afficher le menu de l'application,
* une méthode de "temporisation" attendant la frappe de n'importe quel caractère.

[source,java]
----
import java.util.Locale;
import java.util.Scanner;

import tps.banque.Compte;
import tps.banque.AgenceBancaire;
import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;
import tps.banque.exception.CompteException;

public class ClasseEssaiAgenceBancaire {
	
	/**
	 * Affichage du menu de l'application
	 * @param ag	AgenceBancaire pour récupérer le nom et la localisation
	 */
	public static void afficherMenu(AgenceBancaire ag) {
		System.out.println("Menu de " + ag.getNomAgence() + " (" + ag.getLocAgence() + ")");
		System.out.println("c - Créer un nouveau compte dans l'agence");
		System.out.println("s - Supprimer un compte de l'agence (par son numéro)");
		System.out.println("l - Liste des comptes de l'agence");
		System.out.println("v - Voir un compte (par son numéro)");
		System.out.println("p - voir les comptes d'un Propriétaire (par son nom)");
		System.out.println("d - Déposer de l'argent sur un compte");
		System.out.println("r - Retirer de l'argent sur un compte");
		System.out.println("q - Quitter");
		System.out.print("Choix -> ");
	}
	
	/**
	 * Temporisation : Affiche un message et attend la frappe de n'importe quel caractère.
	 */
	public static void tempo () {
		Scanner lect ;
		String s;
		
		lect = new Scanner (System.in );
		
		System.out.print("Tapper un car + return pour continuer ... ");
		s = lect.next(); // Inutile à stocker mais ... 
	}

	public static void main(String argv[]) {
		
		String choix;

		boolean continuer ;
		Scanner lect;
		AgenceBancaire monAg ;
		
		lect = new Scanner ( System.in );
		lect.useLocale(Locale.US);
		
		monAg = new AgenceBancaire("Caisse Ep", "Pibrac");
		
		continuer = true;
		while (continuer) {
			ClasseEssaiAgenceBancaire.afficherMenu(monAg);
			choix = lect.next();
			choix = choix.toLowerCase();
			switch (choix) {
				case "q" :
					System.out.println("ByeBye");
					ClasseEssaiAgenceBancaire.tempo();
					continuer = false;
					break;
				
				// A CONTINUER ICI
				
				default :
					System.out.println("Erreur de saisie ...");
					ClasseEssaiAgenceBancaire.tempo();
					break;
			}
		}
		
	}

}
----

=== Développement de l'application

. A vous maintenant de rajouter et traiter les +case+ qui manquent. Traiter une par une dans l'ordre chaque option du menu et tester à chaque fois.
. Pour l'option  +"p - voir les comptes d'un Propriétaire (par son nom)"+, programmer une méthode statique :
+
+public static void comptesDUnPropretaire (AgenceBancaire ag)+
+
réalisant le traitement associé.

. Pour l'option  +"d - Déposer de l'argent sur un compte"+, programmer une méthode statique :
+
+public static void deposerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant)+
+
réalisant le traitement associé.

. Pour l'option  +"r - Retirer de l'argent sur un compte"+, programmer une méthode statique :
+
+public static void retirerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant)+
+
réalisant le traitement associé.

[NOTE]
======
Concernant les entrées sorties : voir aide sur le serveur webetud -> classe Scanner.
======


Exemple d'exécution possible :

-----
Menu de Caisse Ep (Pibrac)
c - Créer un nouveau compte dans l'agence
s - Supprimer un compte de l'agence (par son numéro)
l - Liste des comptes de l'agence
v - Voir un compte (par son numéro)
p - voir les comptes d'un Propriétaire (par son nom)
d - Déposer de l'argent sur un compte
r - Retirer de l'argent sur un compte
q - Quitter
Choix -> c

Num compte -> 1212
Propriétaire -> Prop12

Ajout effectué
Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> c

Num compte -> 1212
Propriétaire -> PropAutre

Numéro de compte existant
Erreur ajout Compte déja existant (1212) dans l'agence Caisse Ep(Pibrac)

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> d

Num compte -> 1212
Montant à déposer -> 456

Solde avant dépôt: 0.0
Montant déposé, solde : 456.0

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> d

Num compte -> 1212
Montant à déposer -> -89

Solde avant dépôt: 456.0
Erreur de dépot, solde inchangé : 456.0
Erreur de somme négative lors d'un dépot sur 1212

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> s

Num compte -> 4545

Numéro de compte inexistant
Erreur suppression Compte inexistant (4545) dans l'agence Caisse Ep(Pibrac)

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> s

Num compte -> 1212
Suppression effectuée

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
-----

== Exercice : Je devine, tu devines, la devinette ... sait

[NOTE]
======
Lire chaque section en entier avant de commencer.
======

=== Principe du jeu

Nous allons développer un programme de jeu de Devinette travaillé en TD. Au jeu de la "devinette" :

* On suppose une valeur entière à trouver, tirée au sort par le programme, entre une borne basse (10<>20) et haute (40<>50).
* L'utilisateur chercher la valeur par essais successifs, la machine répondant à chaque coup si le nombre recherché est supérieur ou inférieur au nombre soumis.
* Le jeu s'arrête quand la valeur est trouvée.

Exemple d'exécution :
-----
Coup : (13-49) : 33 // <1>
Plus Haut ... Coup : (13-49) : 40 // <2>
Plus Haut ... Coup : (13-49) : 49 // <3>
Plus Bas ... Coup : (13-49) : 48
Plus Bas ... Coup : (13-49) : 41
Plus Haut ... Coup : (13-49) : 47
Plus Bas ... Coup : (13-49) : 44
Plus Haut ... Coup : (13-49) : 46
Bravo, en 8 coups.
-----
<1> Saisie utilisateur de 33
<2> Saisie utilisateur de 40
<3> ...

=== Questions

. Créer un programme Java +ClasseEssaiDevinette.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
. Étudier en détail la documentation de la classe +tps.jeux.Devinette+. En particulier, étudier si les méthodes sont des observateurs/accesseurs ou des modifieurs/transformateurs. Repérer les méthodes générant des exceptions.
. Imaginer comment construire un programme permettant de jouer à un jeu de devinette en utilisant un objet instance de la classe +Devinette+.
. Essayer, à la fin du jeu précédent, une fois la partie finie (gagnée), de jouer encore un coup (+soumettreCoup()+). Que se passe-t-il ?
. Modifier le programme pour jouer successivement 3 parties de devinette. A partir du code main() déjà écrit, on pourra construire une méthode
+
+static jouerPartie (Devinette d);+ permettant de réaliser une partie puis l'appeler depuis le +main()+.


ifdef::prof[]

== Éléments de Solution

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Compte
======
[source,java]
----
public class ClasseEssaiCompte {
	public static void main(String argv[]) {
		
		Compte cUn, cDeux;

		// Déclarer deux variables cUn et cDeux "de type Compte" :
		// références vers un Compte.
		// cf ci-dessus
		
		// cUn.afficher(); // Pb d'initialisation
		
		// Créer un Compte à l'aide de cUn au nom de "Jean". Créer un
		// autre Compte à l'aide de cDeux au nom de "Marie".
		cUn = new Compte("3001", "Jean");
		cDeux = new Compte("9992", "Marie");

		// Afficher cUn et cDeux.
		cUn.afficher();
		System.out.println("  Solde : " + cUn.soldeCompte());
		cDeux.afficher();
		System.out.println("  Solde : " + cDeux.soldeCompte());

		System.out.println(System.identityHashCode(cUn));
		System.out.println(System.identityHashCode(cDeux));

		System.out.println(cUn); // toString()
		
		// Déposer 1€ sur cUn. Déposer 1000€ sur cDeux.
		try {
			cUn.deposer(1);
			cDeux.deposer(1000);
		} catch (CompteException e) {
			System.out.println(e);
		}

		// Afficher cUn et cDeux. Conclusion …
		System.out.println();
		System.out.println("Apres depot 1 et 1000");
		cUn.afficher();
		System.out.println("  Solde : " + cUn.soldeCompte());
		cDeux.afficher();
		System.out.println("  Solde : " + cDeux.soldeCompte());

		// Retirer 1€ de cUn. Retirer 1000€ de cDeux.
		try {
			cUn.retirer(1);
			cDeux.retirer(1000);
		} catch (CompteException e) {
			System.out.println(e);
		}

		// Afficher cUn et cDeux. Conclusion …
		System.out.println();
		System.out.println("Apres retrait 1 et 1000");
		cUn.afficher();
		System.out.println("  Solde : " + cUn.soldeCompte());
		cDeux.afficher();
		System.out.println("  Solde : " + cDeux.soldeCompte());
		// Deux objets vraiement différents
		
		// Essayer de retirer -100 euros du compte cUn. Que se passe-t-il ?
		// -> Exception
		try {
			cUn.retirer(-100);
		} catch (CompteException e) {
			System.out.println(e);
		}
		
		// Essayer de déposer -100 euros sur le compte cDeux. Que se passe-t-il ?
		// -> Exception
		try {
			cDeux.deposer(-100);
		} catch (CompteException e) {
			System.out.println(e);
		}
		
		// Affecter cUn à cDeux (cDeux = cUn;).
		cDeux = cUn;

		// Afficher cUn et cDeux. Conclusion …
		System.out.println();
		System.out.println("Apres Affectation");
		cUn.afficher();
		System.out.println("  Solde : " + cUn.soldeCompte());
		cDeux.afficher();
		System.out.println("  Solde : " + cDeux.soldeCompte());
		// Ils référencent le meme objet
		
		try {
			cUn.deposer(1000);
		} catch (CompteException e) {
			System.out.println(e);
		}
		
		System.out.println();
		System.out.println("Apres Affectation");
		cUn.afficher();
		System.out.println("  Solde : " + cUn.soldeCompte());
		cDeux.afficher();
		System.out.println("  Solde : " + cDeux.soldeCompte());
		// Ils référencent le meme objet
		
		// Déposer 2000€ sur le Compte ayant pour propriétaire Marie.
		// Conclusion …
		// Impossible, la référence est perdue ...
		
		// Affecter à cUn la valeur null. 
		cUn = null;
		System.out.println(cUn); // null
		cUn.afficher();
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution AgenceBancaire (Tests)
======
[source,java]
----
public class ClasseEssaiAgenceBancaire {
	public static void main(String argv[]) {
		
		AgenceBancaire monAg ;
		
		Compte c;
		Compte []  t; 
		
		monAg = new AgenceBancaire("Caisse Ep", "Pibrac");
		monAg.afficher();
		System.out.println(monAg.getNbComptes());		
		
		try {
			c = new Compte ("0101", "prop1");
			monAg.addCompte(c);
			c = new Compte ("0202", "prop2");
			monAg.addCompte(c);
			c = new Compte ("0303", "prop2");
			monAg.addCompte(c);
		} catch (ABCompteNullException e) {
			System.out.println (e.getMessage());
		} catch (ABCompteDejaExistantException e) {
			System.out.println (e.getMessage());
		}

		monAg.afficher();
		
		c = monAg.getCompte("0101");
		c.afficher();
		
		try {
			c.deposer(1000);
		} catch (CompteException e) {
			System.out.println (e.getMessage());
		}
		
		c = monAg.getCompte("0101");
		c.afficher();
		
		c = monAg.getCompte("9999");
		if (c==null) {
			System.out.println("9999 ABSENT Normal");
		} else { 
			c.afficher();
		}
		
		t = monAg.getComptesDe("prop2");
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour prop 2");
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
		
		try {
			t[0].deposer(2000);
			t[1].deposer(3000);
		} catch (CompteException e) {
			System.out.println (e.getMessage());
		}
		
		t = monAg.getComptesDe("prop2");
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour prop 2");
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
		
		t = monAg.getComptesDe("ABSENT");
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour prop 2");
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
		
		try {
			c = null;
			monAg.addCompte(c);
		} catch (ABCompteNullException | ABCompteDejaExistantException e) {
			System.out.println("Erreur");
			System.out.println (e.getMessage());
		}
		
		try {
			monAg.removeCompte("0202");
		} catch (ABCompteInexistantException e) {
			System.out.println (e.getMessage());
		}
		try {
			monAg.removeCompte("9999");
		} catch (ABCompteInexistantException e) {
			System.out.println("Erreur");
			System.out.println (e.getMessage());
		}
		try {
			c = new Compte ("0101", "prop99");
			monAg.addCompte(c);
		} catch (ABCompteNullException | ABCompteDejaExistantException e) {
			System.out.println("Erreur");
			System.out.println (e.getMessage());
		}
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution AgenceBancaire (application)
======
[source,java]
----
import java.util.Locale;
import java.util.Scanner;

import tps.banque.AgenceBancaire;
import tps.banque.Compte;
import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;
import tps.banque.exception.CompteException;

public class ClasseEssaiAgenceBancaire {
	
	/**
	 * Affichage du menu de l'application
	 * @param ag	AgenceBancaire pour récupérer le nom et la localisation
	 */
	public static void afficherMenu(AgenceBancaire ag) {
		System.out.println("Menu de " + ag.getNomAgence() + " (" + ag.getLocAgence() + ")");
		System.out.println("c - Créer un nouveau compte dans l'agence");
		System.out.println("s - Supprimer un compte de l'agence (par son numéro)");
		System.out.println("l - Liste des comptes de l'agence");
		System.out.println("v - Voir un compte (par son numéro)");
		System.out.println("p - voir les comptes d'un Propriétaire (par son nom)");
		System.out.println("d - Déposer de l'argent sur un compte");
		System.out.println("r - Retirer de l'argent sur un compte");
		System.out.println("q - Quitter");
		System.out.print("Choix -> ");
	}
	
	/**
	 * Temporisation : Affiche un message et attend la frappe de n'importe quel caractère.
	 */
	public static void tempo () {
		Scanner lect ;
		String s;
		
		lect = new Scanner (System.in );
		
		System.out.print("Tapper un car + return pour continuer ... ");
		s = lect.next(); // Inutile à stocker mais ... 
	}

	public static void main(String argv[]) {
		
		String choix;

		boolean continuer ;
		Scanner lect;
		AgenceBancaire monAg ;
		
		String nom, numero;		
		Compte c;
		double montant;
		
		lect = new Scanner ( System.in );
		lect.useLocale(Locale.US);
		
		monAg = new AgenceBancaire("Caisse Ep", "Pibrac");
		
		continuer = true;
		while (continuer) {
			ClasseEssaiAgenceBancaire.afficherMenu(monAg);
			choix = lect.next();
			choix = choix.toLowerCase();
			switch (choix) {
				case "q" :
					System.out.println("ByeBye");
					ClasseEssaiAgenceBancaire.tempo();
					continuer = false;
					break;
				case "c" :
					System.out.print("Num compte : ");
					numero = lect.next();
					System.out.print("Propriétaire : ");
					nom = lect.next();
					c = new Compte(numero, nom);
					try {
						monAg.addCompte(c);
						System.out.println("Ajout effectué\n");
					} catch (ABCompteNullException e) {
						System.out.println("Numéro de compte existant");
						System.out.println(e.getMessage());
					}
					catch (ABCompteDejaExistantException e) {
						System.out.println("Numéro de compte existant");
						System.out.println(e.getMessage());
					}
					ClasseEssaiAgenceBancaire.tempo();
					break;
				case "s" :
					System.out.print("Num compte : ");
					numero = lect.next();
					try {
						monAg.removeCompte(numero);
						System.out.println("Suppression effectuée\n");
					} catch (ABCompteInexistantException e) {
						System.out.println("Numéro de compte inexistant");
						System.out.println(e.getMessage());
					}
					ClasseEssaiAgenceBancaire.tempo();
					break;
				case "l" :
					monAg.afficher();
					ClasseEssaiAgenceBancaire.tempo();
					break;	
				case "v" :
					System.out.print("Num compte : ");
					numero = lect.next();
					c = monAg.getCompte(numero);
					if (c==null) {
						System.out.println("Compte inexistant ...");
					} else {
						c.afficher();
					}
					ClasseEssaiAgenceBancaire.tempo();
					break;
				case "p" :
					ClasseEssaiAgenceBancaire.comptesDUnPropretaire (monAg);
					ClasseEssaiAgenceBancaire.tempo();
					break;		
				case "d" :
					System.out.print("Num compte : ");
					numero = lect.next();
					System.out.print("Montant à déposer : ");
					montant = lect.nextDouble();
					ClasseEssaiAgenceBancaire.deposerSurUnCompte(monAg, numero, montant);
					ClasseEssaiAgenceBancaire.tempo();
					break;
				case "r" :
					System.out.print("Num compte : ");
					numero = lect.next();
					System.out.print("Montant à retirer : ");
					montant = lect.nextDouble();
					ClasseEssaiAgenceBancaire.retirerSurUnCompte(monAg, numero, montant);
					ClasseEssaiAgenceBancaire.tempo();
					break;
				default :
					System.out.println("Erreur de saisie ...");
					ClasseEssaiAgenceBancaire.tempo();
					break;
			}
		}
		
	}
	
	public static void comptesDUnPropretaire (AgenceBancaire ag) {
		Scanner lect;
		String nom;
		Compte []  t; 
		
		lect = new Scanner ( System.in );
		
		System.out.print("Propriétaire : ");
		nom = lect.next();
		t = ag.getComptesDe(nom);
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour " + nom);
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
	}

	public static void deposerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant) {
		Compte c;
		
		c = ag.getCompte(numeroCompte);
		if (c==null) {
			System.out.println("Compte inexistant ...");
		} else {
			System.out.println("Solde avant dépôt: "+c.soldeCompte());
			try {
				c.deposer(montant);
				System.out.println("Montant déposé, solde : "+c.soldeCompte());
			} catch (CompteException e) {
				System.out.println("Erreur de dépot, solde inchangé : " + c.soldeCompte());
				System.out.println(e.getMessage());
			}
		}
	}
	
	public static void retirerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant) {
		Compte c;
		
		c = ag.getCompte(numeroCompte);
		if (c==null) {
			System.out.println("Compte inexistant ...");
		} else {
			System.out.println("Solde avant retrait : " + c.soldeCompte());
			try {
				c.retirer(montant);
				System.out.println("Montant retiré, solde : "+c.soldeCompte());
			} catch (CompteException e) {
				System.out.println("Erreur de dépot, solde inchangé : " + c.soldeCompte());
				System.out.println(e.getMessage());
			}
		}

	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Devinette
======
[source,java]
----
import java.util.Scanner;
import tps.jeux.Devinette;
import tps.jeux.exception.ErreurExecutionDevinette;

public class ClasseEssaiDevinette {

	private static void jouer (Devinette d) throws ErreurExecutionDevinette
	{
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		d.soumettreCoup (val);
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas()) 
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			d.soumettreCoup (val);
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
	}
	public static void main2 () throws ErreurExecutionDevinette
	{
		Devinette d;
		int i;
		
		for (i=0; i<3; i++)
		{
			d = new Devinette() ;
			ClasseEssaiDevinette.jouer (d);
		}
	}
	public static void main1 () throws ErreurExecutionDevinette
	{
		Devinette d;
	
		d = new Devinette() ;
		ClasseEssaiDevinette.jouer (d);
			
		d.soumettreCoup (20); // Plantage car partie finie ...
	}
	public static void main (String argv[]) throws ErreurExecutionDevinette
	{
		System.out.println("Exo 1");
		ClasseEssaiDevinette.main1();
		
		System.out.println("Exo 2");
		ClasseEssaiDevinette.main2();
	}
}
----
======

endif::prof[]


endif::todoprof[]
