:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 2
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true




:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| CM1 sur les objets, TD2 sur la manipulation d'objets.
| {objtd}	| Utiliser des objets - Lire une documentation.
| {duree}	| *2 séances* de 1,5h sur machine.
| {depot}	| 
Code source à déposer : essais de comptes, essais d'AgenceBancaire, jeu de Devinette.

*Mettre les explications et compte rendus demandés en commentaire au fil du code dans les fichiers sources.*
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

- But du TP : Manipuler des objets sans disposer du code source. Lire une documentation (param, return, throws, ...).
- Idée de déroulement :

* Séance 1 : les comptes + début AgenceBancaire
* Séance 2 : les tests AgenceBancaire + Devinette

- Les try catch ont été vus en S1. Les aider sans doute en leur donnant la structure de base.
+
[source,java]
----
	try {
		cUn.deposer(1);
		cDeux.deposer(1000);
	} catch (CompteException e) {
		System.out.println(e); ou System.out.println(e.getMesage()); 
	}
----
+
- Les aider au tableau au début si ca coince.

		
Au départ :

- Attention au dézippage du fichier au bon endroit -> dans le répertoire de travail.
- Faire avec eux le préambule pour installer les fichiers et démarrer le premier fichier .java à construire.
- Il faut obtenir l'arborescence :
* Rép de travail
** *ClasseEssaiCompte.java*
** tps
*** banque
**** Compte.class
**** AgenceBancaire.class
**** exception
***** CompteException.class
***** ...
*** jeux
**** Devinette.class
**** ...


====
endif::todoprof[]

ifndef::todoprof[]

[[Preambule]]
== Préambule

Récupérer les pakages des classes à utiliser :

. Depuis webetud, récupérer le fichier packageTPs.zip du tp.
. Le dézipper dans le répertoire où vous comptez travailler (répertoire de travail).
. Ce zip contient les packages de travail pour les tps. Il comporte en fait plusieurs packages de classes : +tps.jeux+, +tps.jeux.exception+, +tps.banque+, ...
** Regarder le contenu du répertoire (des fichiers .class structurés en répertoires).

. Pour utiliser ces classes dans vos programmes: 
+
+import  tps.-_nomPackage[.nomPackage ...]_._NomDeClasse_;+. Exemple : +import  tps.jeux.Devinette;+

Pour chaque exercice, créer un programme Java +ClasseEssaiXXXXX.java+ comportant une méthode main(). "XXXXX" sera le nom de la classe testée à chaque exercice (Compte, ...).

On utilisera le début de code suivant :

[source,java]
----
// Imports pour tous les exercices
// Tous ne sont pas toujours utiles ...
import tps.banque.AgenceBancaire;
import tps.banque.Compte;
import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;
import tps.banque.exception.CompteException;

public class ClasseEssaiCompte
{
	public static void main (String argv[]) 
	{
		Compte cUn ;
		// ...
	}
}
----

== Exercice : les comptes

[NOTE]
======
Lire chaque section en entier avant de commencer.
======


Nous allons utiliser une classe +tps.banque.Compte+ qui permet de gérer des comptes simples comptabilisant des débits et des crédits successifs. 

=== Classe Compte

Étudier en détail la documentation de la classe +Compte+. En particulier, étudier si les méthodes sont des observateurs/accesseurs/getters ou des modifieurs/transformateurs/setters.

Repérer les méthodes générant des exceptions.

.Diagramme UML de l'interface de la classe Compte
[caption="Figure : "]
image:images/classeCompteInterface.png[]

=== Utiliser la classe Compte

*Mettre les explications et compte rendus demandés en commentaire au fil du code dans les fichiers sources.*

Ecrire le programme réalisant les actions suivantes en le testant pas à pas à chaque demande d'affichage (compilation/run) :

.	Créer un programme Java +ClasseEssaiCompte.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
.	Déclarer deux variables +cUn+ et +cDeux+ "de type +Compte+" : références vers un +Compte+. (Ne pas faire de new !! ca serait une initialisation)
.	Appliquer la méthode +afficher()+ à +cUn+. Que se passe-t-il ?
.	Créer un +Compte+ à l'aide de +cUn+ au nom de "Jean". Créer un autre +Compte+ à l'aide de +cDeux+ au nom de "Marie".
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+. Conclusion …
+
[source,java]
----
System.out.println(System.identityHashCode(cUn));
System.out.println(System.identityHashCode(cDeux));
----
+
.	Essayer la syntaxe suivante :
+
[source,java]
----
System.out.println(cUn);
----
+
Quel est le résultat ? (voir l'aide sur +toString()+).
+
.	A l'aide de +cUn+, utiliser toutes méthodes disponibles sur la classe +Compte+ sauf +deposer()+ et +retirer()+ (voir la documentation)
.	Déposer 1€ sur +cUn+. Déposer 1000€ sur +cDeux+. Le code suivant pourra vous aider
+
[source,java]
----
try {
	cUn.deposer( ... );
	cDeux.deposer( ... );
} catch (CompteException e) {
	System.out.println(e);
}
----
+
.	Afficher +cUn+ et +cDeux+ ainsi que les soldes. 
.	Retirer  1€ de +cUn+. Retirer 1000€ de +cDeux+.
.	Afficher +cUn+ et +cDeux+ ainsi que les soldes. 
.	Essayer de retirer +-100+ euros du compte +cUn+. Que se passe-t-il ?
.	Essayer de déposer +-100+ euros sur le compte +cDeux+. Que se passe-t-il ?
.	*Affecter* la variable +cUn+ à la variable +cDeux+ (+cDeux = cUn;+).
.	Afficher +cUn+ et +cDeux+ ainsi que les soldes. Afficher aussi les références par +identityHashCode()+. Conclusion …
.	Déposer 1000€ sur +cUn+. Afficher +cUn+ et +cDeux+ ainsi que les soldes.
.	Déposer 2000€ sur l’objet +Compte+ *ayant pour propriétaire "Marie"* que vous avez créé au début de cet exercice. Y arrivez-vous ?
.	Affecter à +cUn+ la valeur +null+.
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(cUn);
----
+
Quel est le résultat ?
+
.	Appliquer la méthode +afficher()+ à +cUn+. Que se passe-t-il ? Expliquer.
.	Afficher +cDeux+ ainsi que le solde. Expliquer le résultat obtenu.


////////////////////////////////////

==== Premiers essais

Ecrire le programme réalisant les actions suivantes en le testant pas à pas à chaque demande d'affichage (compilation/run) :

.	Créer un programme Java +ClasseEssaiCompte.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
.	Déclarer une variable +c+ de type +Compte+ : une référence vers un +Compte+.
.	Appliquer la méthode +afficher()+ à +c+. Que se passe-t-il ?
.	Créer un +Compte+ avec un numéro de compte"010101" et un propriétaire "Lepoisson Benoit" à l'aide de +c+.
.	Appliquer la méthode +afficher()+ à c. Que se passe-t-il ?
.	Utiliser toutes méthodes disponibles sur la classe +Compte+. Pour retirer() et deposer(), ajouter l'import nécessaire pour la classe +CompteException+ (package +tps.banque.exception+). Le code suivant pourra vous aider
+
[source,java]
----
try {
	c.deposer( ... );
	c.deposer( ... );
} catch (CompteException e) {
	System.out.println("Erreur ...");
}
----
+
.	Appliquer la méthode +afficher()+ à +c+.
.	Essayer de retirer +-100+ euros du compte +c+. Que se passe-t-il ?
.	Essayer de déposer +-100+ euros du compte +c+. Que se passe-t-il ?
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(c);
----
+
Quel est le résultat ? (voir l'aide sur toString()).
+
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(System.identityHashCode(c));
----
+
Quel est le résultat ?
+
.	Affecter à +c+ la valeur +null+.
.	Essayer l'instruction suivante : 
+
[source,java]
----
System.out.println(System.identityHashCode(c));
----
+
Quel est le résultat ?
+
.	Appliquer la méthode +afficher()+ à +c+. Que se passe-t-il ? Expliquer.

==== Mieux : deux objets

.	Déclarer deux variables +cUn+ et +cDeux+ "de type +Compte+" : références vers un +Compte+.
.	Créer un +Compte+ à l'aide de +cUn+ au nom de "Jean". Créer un autre +Compte+ à l'aide de +cDeux+ au nom de "Marie".
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+ (cf. <<Partie1,Partie 1>>). Conclusion …
.	Déposer 1€ sur +cUn+. Déposer 1000€ sur +cDeux+.
.	Afficher +cUn+ et +cDeux+ pour voir les soldes. 
.	Retirer  1€ de +cUn+. Retirer 1000€ de +cDeux+.
.	Afficher +cUn+ et +cDeux+ pour voir les soldes.
.	Affecter +cUn+ à +cDeux+ (+cDeux = cUn;+).
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+ (cf. <<Partie1,Partie 1>>). Conclusion …
.	Déposer 1000€ sur +cUn+. Afficher +cUn+ et +cDeux+.
.	Déposer 2000€ sur l’objet +Compte+ ayant pour propriétaire "Marie" que vous avez créé au début de cette partie. Y arrivez-vous ?


==== Références d'objets

.	Déclarer deux variables +cUn+ et +cDeux+ "de type +Compte+" : références vers un +Compte+.
.	Créer un +Compte+ à l'aide de +cUn+. Déposer 1000 € sur +cUn+. Afficher +cUn+ (méthode +afficher()+).
.	Affecter +cUn+ à +cDeux+ (+cDeux = cUn;+).
.	Afficher +cDeux+. Conclusion …
.	Déposer 2000€ sur +cUn+.
.	Afficher +cUn+ et +cDeux+. Conclusion …
.	Déposer 3000€ sur +cDeux+.
.	Afficher +cUn+ et +cDeux+. Afficher aussi les références par +identityHashCode()+ (cf. <<Partie1,Partie 1>>). Conclusion …
.	Déposer 4000€ sur +cUn+ PUIS affecter la valeur +null+ à +cUn+.
.	Afficher +cDeux+. Conclusion …

////////////////////////////////////

== Exercice : l'agence bancaire

[NOTE]
======
Lire chaque section en entier avant de commencer.
======

=== Classe AgenceBancaire

Étudier en détail la documentation de la classe +tps.banque.AgenceBancaire+. En particulier, étudier si les méthodes sont des observateurs/accesseurs/getters ou des modifieurs/transformateurs/setters.

Repérer les méthodes générant des exceptions.

.Diagramme UML de l'interface de la classe AgenceBancaire
[caption="Figure : "]
image:images/classeAgenceBancaireInterface.png[]


=== Utiliser la classe AgenceBancaire

*Mettre les explications et compte rendus demandés en commentaire au fil du code dans les fichiers sources.*

Ecrire le programme réalisant les actions suivantes en le testant pas à pas (compilation/run) :

.	Créer un programme Java +ClasseEssaiAgenceBancaire.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
.	Déclarer une variable +monAg+ de type +AgenceBancaire+ : une référence vers une +AgenceBancaire+.
.	Créer un objet +AgenceBancaire+ à l'aide de +monAg+.
.	Afficher +monAg+.
.	Afficher le nombre de comptes de +monAg+.
.	Créer un objet +Compte+ de numéro "0101" et propriétaire "prop1" à l'aide d'une variable de type +Compte+. Créer deux autres comptes (numéros "0202" et "0303") avec un même propriétaire "prop2". 
.	Ajouter ces 3 comptes créés à l'AgenceBancaire +monAg+. Le code suivant pourra vous aider :
+
[source,java]
----
try {
	c = new Compte ( ... );
	monAg.addCompte(  ... );
} catch (ABCompteNullException e) {
	System.out.println (e.getMessage());
} catch (ABCompteDejaExistantException e) {
	System.out.println (e.getMessage());
}
----
+
.	Afficher +monAg+.
.	Rechercher à partir de +monAg+ le compte "0101" et l'afficher.
.	Déposer 1000€ sur ce compte. Tenter quelque chose comme (question précédente, celle-ci et suivante) :
+
[source,java]
----
// 
c = monAg.getCompte("0101");
c.afficher();
//
c. ... // modifier le compte référencé par c (deposer 1000€)
c.afficher();
//
c = monAg.getCompte("0101");
c.afficher();
----

.	Rechercher à nouveau à partir de +monAg+ le compte "0101" et l'afficher (copier/coller du code précédent). Bilan ?
.	Rechercher à partir de +monAg+ le compte "9999" et l'afficher.
.	Rechercher à partir de +monAg+ les comptes du propriétaire "prop2" et les afficher.
.	Déposer 2000 € sur le compte de numéro "0202" et 3000 € sur le compte "0303".
.	Rechercher à nouveau à partir de +monAg+ les comptes du propriétaire "prop2" et les afficher (copier/coller du code précédent). Bilan ??
.	Rechercher à partir de +monAg+ les comptes du propriétaire "ABSENT" et les afficher.
.	Essayer d'ajouter le compte de référence +null+ à +monAg+. Résultat ?
+
[source,java]
----
try {
	c = null;
	monAg.addCompte(c);
} catch (ABCompteNullException e) {
	System.out.println (e.getMessage());
} catch (ABCompteDejaExistantException e) {
	System.out.println (e.getMessage());
}
----
+
.	Essayer de supprimer le compte "0202" de +monAg+ AG.
.	Essayer de supprimer le compte "9999" de +monAg+ AG.
.	Créer un objet +Compte+ de numéro "0101" et propriétaire "prop99" à l'aide d'une variable de type +Compte+ et l'ajouter à l'AgenceBancaire +monAg+.

== Exercice : Je devine, tu devines, la devinette ... sait

[NOTE]
======
Lire chaque section en entier avant de commencer.
======

=== Principe du jeu

Nous allons développer un programme de jeu de Devinette travaillé en TD. Au jeu de la "devinette" :

* On suppose une valeur entière à trouver, tirée au sort par le programme, entre une borne basse (10<>20) et haute (40<>50).
* L'utilisateur chercher la valeur par essais successifs, la machine répondant à chaque coup si le nombre recherché est supérieur ou inférieur au nombre soumis.
* Le jeu s'arrête quand la valeur est trouvée.

Exemple d'exécution :
-----
Coup : (13-49) : 33 // <1>
Plus Haut ... Coup : (13-49) : 40 // <2>
Plus Haut ... Coup : (13-49) : 49 // <3>
Plus Bas ... Coup : (13-49) : 48
Plus Bas ... Coup : (13-49) : 41
Plus Haut ... Coup : (13-49) : 47
Plus Bas ... Coup : (13-49) : 44
Plus Haut ... Coup : (13-49) : 46
Bravo, en 8 coups.
-----
<1> Saisie utilisateur de 33
<2> Saisie utilisateur de 40
<3> ...

=== Questions

. Créer un programme Java +ClasseEssaiDevinette.java+ comportant une méthode main() sur le modèle décrit en <<Preambule, Préambule>>.
. Étudier en détail la documentation de la classe +tps.jeux.Devinette+. En particulier, étudier si les méthodes sont des observateurs/accesseurs ou des modifieurs/transformateurs. Repérer les méthodes générant des exceptions.
. Imaginer comment construire un programme permettant de jouer à un jeu de devinette en utilisant un objet instance de la classe +Devinette+.
. Essayer, à la fin du jeu précédent, une fois la partie finie (gagnée), de jouer encore un coup (+soumettreCoup()+). Que se passe-t-il ?
. Modifier le programme pour jouer successivement 3 parties de devinette. A partir du code main() déjà écrit, on pourra construire une méthode
+
+static jouerPartie (Devinette d);+ permettant de réaliser une partie puis l'appeler depuis le +main()+.


ifdef::prof[]

== Éléments de Solution

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Compte
======
[source,java]
----
import tps.banque.Compte;
import tps.banque.exception.CompteException;
import tps.utils.Keyboard;

public class ClasseEssaiCompteComplet {
	public static void main(String argv[]) {
		ClasseEssaiCompteComplet.main1TestComptes();
	}

	public static void main1TestComptes() {
		
		System.out.println("Partie 1");

		// Premiers essais

		Compte c;

		// Appliquer la méthode afficher à c. Que se passe-t-il ?
		// c.afficher (); // Erreur, c non initialisée

		// Créer un Compte à l'aide de c.
		c = new Compte("010101", "Lepoisson Benoit");

		// Utiliser les méthodes disponibles sur la classe Compte
		// (Modifieurs, Observateurs).
		c.afficher();
		System.out.println("  Solde : " + c.soldeCompte());

		try {
			c.deposer(2000);
			c.retirer(3000);
		} catch (CompteException e) {
			System.out.println(e);
		}
		c.setProprietaire("Test");
		c.afficher();
		System.out.println("  Solde : " + c.soldeCompte());
		
		// Essayer de retirer -100 euros du compte c. Que se passe-t-il ?
		// -> Exception
		try {
			c.retirer(-100);
		} catch (CompteException e) {
			System.out.println(e);
		}
		
		// Essayer de déposer -100 euros du compte c. Que se passe-t-il ?
		// -> Exception
		try {
			c.deposer(-100);
		} catch (CompteException e) {
			System.out.println(e);
		}
		
		// Essayer l'instruction : System.out.println(c); Quel est le
		// résultat ?
		System.out.println(c); // Affiche c.toString() 
		
		System.out.println(System.identityHashCode(c));

		// Affecter à c la valeur null.
		c = null;

		System.out.println(System.identityHashCode(c)); // Affiche : null

		// Appliquer la méthode afficher à c. Que se passe-t-il ?
		// c.afficher (); //
		// "Exception in thread "main" java.lang.NullPointerException"

		Keyboard.readForWait();
		
		System.out.println("Partie 2");

		// Références d'objets suite

		try {
			// 1) 1) Déclarer deux variables cUn et cDeux "de type Compte" :
			// références vers un Compte.
			// cf ci-dessus

			Compte cUn, cDeux;

			// 2) Créer un Compte à l'aide de cUn au nom de "Jean". Créer un
			// autre Compte à l'aide de cDeux au nom de "Marie".
			cUn = new Compte("3001", "Jean");
			cDeux = new Compte("3002", "Marie");

			// 3) Afficher cUn et cDeux.
			cUn.afficher();
			System.out.println("  Solde : " + cUn.soldeCompte());
			cDeux.afficher();
			System.out.println("  Solde : " + cDeux.soldeCompte());
			Keyboard.readForWait();

			// A l'aide de +cUn+, utiliser toutes méthodes 
			// disponibles sur la classe +Compte+ 
			// sauf +deposer()+ et +retirer() (voir la documentation)
			
			System.out.println(cUn.getNumCompte());
			System.out.println(cUn.getProprietaire());
			System.out.println(cUn.soldeCompte());
			cUn.setProprietaire("JEAN");
			System.out.println(cUn.toString());
			
			// 4) Déposer 1€ sur cUn. Déposer 1000€ sur cDeux.
			cUn.deposer(1);
			cDeux.deposer(1000);

			// 5) Afficher cUn et cDeux. Conclusion …
			System.out.println();
			System.out.println("Apres depot 1 et 1000");
			cUn.afficher();
			System.out.println("  Solde : " + cUn.soldeCompte());
			cDeux.afficher();
			System.out.println("  Solde : " + cDeux.soldeCompte());
			Keyboard.readForWait();

			// 6) Retirer 1€ de cUn. Retirer 1000€ de cDeux.
			cUn.retirer(1);
			cDeux.retirer(1000);

			// 7) Afficher cUn et cDeux. Conclusion …
			System.out.println();
			System.out.println("Apres retrait 1 et 1000");
			cUn.afficher();
			System.out.println("  Solde : " + cUn.soldeCompte());
			cDeux.afficher();
			System.out.println("  Solde : " + cDeux.soldeCompte());
			// Deux objets vraiement différents
			
			Keyboard.readForWait();

			// 8) Affecter cUn à cDeux (cDeux = cUn;).
			cDeux = cUn;

			// 9) Afficher cUn et cDeux. Conclusion …
			System.out.println();
			System.out.println("Apres Affectation");
			cUn.afficher();
			System.out.println("  Solde : " + cUn.soldeCompte());
			cDeux.afficher();
			System.out.println("  Solde : " + cDeux.soldeCompte());
			// Ils référencent le meme objet
			
			Keyboard.readForWait();

			// 10) Déposer 2000€ sur le Compte ayant pour propriétaire Marie.
			// Conclusion …
			// Impossible, la référence est perdue ...

		} catch (CompteException e) {
			System.out.println(e);
		}

		Keyboard.readForWait();
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution AgenceBancaire (Tests)
======
[source,java]
----
public class ClasseEssaiAgenceBancaire {
	public static void main(String argv[]) {
		
		AgenceBancaire monAg ;
		
		Compte c;
		Compte []  t; 
		
		monAg = new AgenceBancaire("Caisse Ep", "Pibrac");
		monAg.afficher();
		System.out.println(monAg.getNbComptes());		
		
		try {
			c = new Compte ("0101", "prop1");
			monAg.addCompte(c);
			c = new Compte ("0202", "prop2");
			monAg.addCompte(c);
			c = new Compte ("0303", "prop2");
			monAg.addCompte(c);
		} catch (ABCompteNullException e) {
			System.out.println (e.getMessage());
		} catch (ABCompteDejaExistantException e) {
			System.out.println (e.getMessage());
		}

		monAg.afficher();
		
		c = monAg.getCompte("0101");
		c.afficher();
		
		try {
			c.deposer(1000);
		} catch (CompteException e) {
			System.out.println (e.getMessage());
		}
		
		c = monAg.getCompte("0101");
		c.afficher();
		
		c = monAg.getCompte("9999");
		if (c==null) {
			System.out.println("9999 ABSENT Normal");
		} else { 
			c.afficher();
		}
		
		t = monAg.getComptesDe("prop2");
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour prop 2");
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
		
		try {
			t[0].deposer(2000);
			t[1].deposer(3000);
		} catch (CompteException e) {
			System.out.println (e.getMessage());
		}
		
		t = monAg.getComptesDe("prop2");
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour prop 2");
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
		
		t = monAg.getComptesDe("ABSENT");
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour prop 2");
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
		
		try {
			c = null;
			monAg.addCompte(c);
		} catch (ABCompteNullException | ABCompteDejaExistantException e) {
			System.out.println("Erreur");
			System.out.println (e.getMessage());
		}
		
		try {
			monAg.removeCompte("0202");
		} catch (ABCompteInexistantException e) {
			System.out.println (e.getMessage());
		}
		try {
			monAg.removeCompte("9999");
		} catch (ABCompteInexistantException e) {
			System.out.println("Erreur");
			System.out.println (e.getMessage());
		}
		try {
			c = new Compte ("0101", "prop99");
			monAg.addCompte(c);
		} catch (ABCompteNullException | ABCompteDejaExistantException e) {
			System.out.println("Erreur");
			System.out.println (e.getMessage());
		}
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Devinette
======
[source,java]
----
import java.util.Scanner;
import tps.jeux.Devinette;
import tps.jeux.exception.ErreurExecutionDevinette;

public class ClasseEssaiDevinette {

	private static void jouer (Devinette d) throws ErreurExecutionDevinette
	{
		int val;
		Scanner in;
		
		in = new Scanner(System.in);
		
		System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
		val = in.nextInt();
		d.soumettreCoup (val);
		while (!d.isDernierCoupGagnant())
		{
			if (d.isDernierCoupTropBas()) 
				System.out.print("Plus Haut ... ");
			else
				System.out.print("Plus Bas ... ");
				
			System.out.print("Coup : ("+d.getBas()+"-"+d.getHaut()+") : ");
			val = in.nextInt();
			d.soumettreCoup (val);
		}
		System.out.println("Bravo, en "+d.getNbCoupsJoues()+" coups.");
	}
	public static void main2 () throws ErreurExecutionDevinette
	{
		Devinette d;
		int i;
		
		for (i=0; i<3; i++)
		{
			d = new Devinette() ;
			ClasseEssaiDevinette.jouer (d);
		}
	}
	public static void main1 () throws ErreurExecutionDevinette
	{
		Devinette d;
	
		d = new Devinette() ;
		ClasseEssaiDevinette.jouer (d);
			
		d.soumettreCoup (20); // Plantage car partie finie ...
	}
	public static void main (String argv[]) throws ErreurExecutionDevinette
	{
		System.out.println("Exo 1");
		ClasseEssaiDevinette.main1();
		
		System.out.println("Exo 2");
		ClasseEssaiDevinette.main2();
	}
}
----
======

endif::prof[]

endif::todoprof[]
