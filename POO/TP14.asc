:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 14
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Avoir revu cours et TDs et TPs. 
| {objtd}	| Réaliser un devoir type en 1h30.
| {duree}	| *1 séance* de 1,5h sur machine.
| {depot}	| A déposer : résultats des 4 exercices.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Réviser ...
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

L’objectif de ce TP est de réviser le module BPOO.

[IMPORTANT]
====
Vous pouvez, au choix :

*	Réaliser le devoir EN ENTIER au brouillon (papier ou éditeur de texte sans compilation), puis vérifier sur machine (compilation/run) : permet de voir le temps que prend le sujet.
*	Faire les exercices un par un sur papier puis vérifier : ne permet pas de contrôler le temps passé.
====

=== Exercices 1 à 4

Réaliser les 4 exercices sur papier puis éventuellement vérifier sur machine. 

*Bien faire les traces ou code demandé sur papier car le faire directement sur ordinateur ... ne sert à rien.*

=== Compléments exercice 4

Pour prolonger l'exercice 4 :

.	Implémenter la méthode +afficher()+ pour les questions 1 et 2.
.	Réaliser les versions optimisées avec ordonnancement des données stockées en fonction des clefs pour les questions 1 et 2. 

..	Bien noter que dans ce cas, il faut optimiser les algorithmes des méthodes +put()+ et +get()+.
..	On pourra utiliser les méthodes d'insertion vues en algorithmique. Pourquoi NE FAUT IL PAS faire un tri ? (car serait INUTILE et/ou non optimisé voire très lent).


ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions Exo 1 (A vérifier)
======
[source,java]
----
Pas de bruit
Cui
C'est coco
OuaOuaOua
Miaou
Ouaf Waouf
Pas de bruit
Miaou
Pas de bruit

Miaou
Pas de bruit
Cui
C'est coco
OuaOuaOua
Miaou
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions Exo 2
======
[source,java]
----
public class Chaine {
	private char contenu[];
	public Chaine() {
		this.contenu = new char[0];
	}
	public Chaine(String s) {
		int i;
		this.contenu = new char[s.length()];
		for (i=0; i<s.length(); i++)
			this.contenu[i] = s.charAt(i);
	}

	public void concatener (String s) {
		int i, k;
		char t2[];
		t2 = this.contenu;
		this.contenu = new char[t2.length + s.length()];
		k=0;
		for (i=0; i<t2.length; i++, k++)
			this.contenu[k] = t2[i];
		for (i=0; i<s.length(); i++, k++)
			this.contenu[k] = s.charAt(i);
	}

	public void afficher () {
		int i;
		for (i=0; i<this.contenu.length; i++)
			System.out.print (this.contenu[i]);
		System.out.println ();
	}
}

----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions Exo 3
======
[source,java]
----
Q1) 

class Technicien extends Employe {
   private int specialite;
   
   public Technicien (String n, int h, double tx, int spe) {
       super (n,h,tx);
       this.specialite = spe;
   }
   public double salaireBase () {
       return super.salaireBase() * 1.1F;
   }
   public double primes () {
       return this.salaireBase() * 12.5F;
   }
   public double salaireComplet () {
       return this.salaireBase() + this. primes ();   }

}


Q2) Classes abstraites. 

Q2.1) 
public     abcstratc    class Employe {
…
   public    abstract    double primes () ;
…
}


Q2.2)
	Employe e1 = new Employe () ;
		Non, Employe n'est plus instanciable …

	Employe e2 = new Technicien () ;
		OK

Q2.3) 
Indiquer comment modifier la classe Employe en ce sens.
abstract  class Employe  {
   abstract public double salaireComplet();
}


----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions Exo 4
======
[source,java]
----
QUESTION 1

package exo4V1;

import java.util.ArrayList;

public class Dictionnaire {

	private ArrayList<String> lesClefs;
	private ArrayList<String> lesValeurs;

	public Dictionnaire () {
		lesClefs = new ArrayList<String>();
		lesValeurs= new ArrayList<String>();
	}

	public void put (String clef, String valeur) throws Exception {
		boolean trouve;

		if (clef == null || valeur == null) {
			throw new Exception();
		}
		trouve = false;
		for (int i=0; i<lesClefs.size() && !trouve; i++) {
			if (lesClefs.get(i).equals(clef)) {
				trouve = true;
				lesValeurs.set(i, valeur);
			}
		}
		if (! trouve) {
			lesClefs.add(clef);
			lesValeurs.add(valeur);
		}
	}

	public String getValeur (String clef) {
		if (clef == null) {
			return null;
		}
		for (int i=0; i<lesClefs.size(); i++) {
			if (lesClefs.get(i).equals(clef)) {
				return lesValeurs.get(i);
			}
		}
		return null;
	}

	public void afficher () {
		System.out.print("[");
		for (int i=0; i<lesClefs.size(); i++) {
			System.out.print(
					"(" + lesClefs.get(i) + ", "
							+ lesValeurs.get(i) + ") "
					);  
		}
		System.out.println("]");
	}}


QUESTION 2


package exo5V2;

import java.util.ArrayList;

public class Dictionnaire {

	private ArrayList<Duo> lesDuos;

	public Dictionnaire () {
		lesDuos = new ArrayList<Duo>();
	}

	public void put (String clef, String valeur) throws Exception {
		boolean trouve;

		if (clef == null || valeur == null) {
			throw new Exception();
		}
		trouve = false;
		for (int i=0; i<lesDuos.size() && !trouve; i++) {
			if (lesDuos.get(i).getFirst().equals(clef)) {
				trouve = true;
				lesDuos.get(i).setSecond(valeur);
			}
		}
		if (! trouve) {
			lesDuos.add(new Duo (clef, valeur));
		}
	}

	public String getValeur (String clef) {
		if (clef == null) {
			return null;
		}
		for (int i=0; i<lesDuos.size(); i++) {
			if (lesDuos.get(i).getFirst().equals(clef)) {
				return lesDuos.get(i).getSecond();
			}
		}
		return null;
	}

	public void afficher () {
		System.out.print("[");
		for (int i=0; i<lesDuos.size(); i++) {
			System.out.print(
					"(" + lesDuos.get(i).getFirst() + ", "
							+ lesDuos.get(i).getSecond() + ") "
					);  
		}
		System.out.println("]");
	}
}
----
======



endif::prof[]

endif::todoprof[]
