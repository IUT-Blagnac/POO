:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 1 - Introduction
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
ifndef::slides[]

ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| TD1. S1, notion de type, variables simples, tableaux.
| {objtd}	| *Apprendre à utiliser un debugger - Comprendre le fonctionnement d'un programme*.
| {duree}	| *2 séances* de 1,5h sur machine
| {depot}	| -
|======================
====
endif::prof[]

[TIP]
====
- Lien sur le {sitecours}.
====
endif::slides[]

ifndef::todoprof[]

== Préambule

Un outil de deboggage permet d'exécuter un programme ligne à ligne (pas à pas) afin de :

* observer le déroulement d'un programme,
* suivre pas à pas les changements de valeur des variables ou des attributs d'objets,
* et donc vérifier que le programme fait ce que l'on souhaite qu'il fasse.

Dans ce premier TP nous allons principalement viser à utiliser un outil de deboggage (déboggueur ou debugger) des programmes déjà écrits afin de :

- comprendre l'exécution d'un programme,
- comprendre l'implantation mémoire d'un programme,
- corriger/déverminer des algorithmiques simples.

Pour cela nous allons utiliser l'IDE {eclipse} (version {eclipseVersion}, téléchargeable ici {eclipsedownload}).

- Les autres TPs se feront sous Scite car l'usage est plus simple pour les TPs (liens JUnit, liens avec des fichiers .class existants, disponibilité chez vous, sauvegardes des programmes développés, ...)

////////////////////
. Eclipse est un Environnement Intégré de Développement. Un tel outil :

- permet de travailler dans plusieurs langages,
- offre plusieurs outils travaillant simultanément (fenêtres synchronisées, ...),
- permet de développer des projets très complexes,
- s'interface avec des outils externes (svn, git, Maven, ...),
- et plus encore.
////////////////////

== Debugger avec Eclipse

=== Lancement Eclipse

. Lancer Eclipse depuis le bureau.
. Il ouvre un *workspace*, espace de travail où Eclipse range les fichiers.
* Si Eclipse demande où est le workspace -> Indiquer E:\Eclipse
+
image:images/TP1ChoixWspceEclise.png[]
+
. Créer un *projet* 
* File > New > Java Project
* Donner un nom de projet -> +testDebug+
* Valider
+
image:images/TP1CreationProjetJava.png[]
+
. Créer une classe de base *ClasseEssai* dans laquelle on fera par la suite des copier coller pour les tests.
* File > New > Class
* Donner un nom de classe -> +ClasseEssai+
* Valider
+
image:images/TP1CreationClasse2.png[]

A partir de maintenant :

* copier/coller le code à tester dans la classe ClasseEssai,
* faire les tests : run ou debug.

=== Premier Test

. Ecrire une méthode main() affichant "Hello World" pour tester.
+
[source,java]
----
public static void main(String argv[]) {
	System.out.println ("Hello World");
}
----
. Sauvegarder.
. Chercher comment compiler -> s'est déjà fait à la sauvegarde.
* Modifier le code pour générer une erreur de compilation.
* Sauvegarder -> croix rouge au niveau de l'erreur.
+
image:images/TP1ErreurCompilation.png[]
+
. Corriger le code et sauvegarder à nouveau.
. Exécuter : cliquer sur le petit icône vert (une flèche)
. Fenêtre "Console" -> le résultat.
* La fenêtre "Console" n'apparaît pas ? -> Menu Window > Show View > Console

=== Second test

. Modifier le code de la classe comme suit.
+
[source,java]
----
public class ClasseEssai {
	public static double plusPlus (double a, int d) {
		double res;
		
		res = a + d + 1;
		return res;
	}
	public static void main(String argv[]) {
		double ageDebut;
		int anneesEtudes;
		double ageFinEtudes;
		
		ageDebut = 23;
		anneesEtudes = 5 ;
		ageFinEtudes = ClasseEssai.plusPlus (ageDebut, anneesEtudes);
		System.out.println ("Votre age en fin de parcours d'études : " + ageFinEtudes);
	}
}
----

. Sauvegarder.
. Exécuter.

== Observation du comportement par déboggage

. Observer l'exécution d'un programme (debugger) consiste à 

- Exécuter pas à pas (ligne à ligne) le programme,
- Observer l'état des variables à chaque étape,
- Éventuellement rentrer dans l'exécution pas à pas d'un sous-programme.

. Pour ce faire :
.. Poser un "point d'arrêt" sur une ligne exécutable du code (une instruction, pas une déclaration)

* double clic gauche dans la marge gauche de la ligne
* clic droit dans la marge gauche de la ligne puis -> "Toggle Breakpoint"
** Par exemple en face de :
+
[source,java]
----
anneesEtudes = 5 ;
----

.. Lancer le programme en mode Debug (icône petite araignée)
.. Le programme se lance jusqu'au point d'arrêt et demande à changer de perspective (passage en mode debug)

* Nouvelle fenêtre avec plusieurs panels dont : "Variables" (les variables en cours)

.. Plusieurs options sont alors possibles :
+
image:images/tp1Debug.png[]
+

* "Step Over" (F6) : exécuter l'instruction courante et passer à la suivante
* "Step Into" (F5) : rentrer dans l'exécution d'un sous-programme (à vous !!)
* "Step Return" (F7) : exécuter sans s'arrêter jusqu'au return (ou fin) du sous-programme.
* "Resume" (F8) : reprendre l'exécution normale jusqu'à rencontrer le prochain point d'arrêt.

Exemples de plusieurs debugs possibles :

. Exécuter pas à pas le programme précédent en utilisant uniquement "Step Over".
. Exécuter pas à pas le programme précédent en utilisant "Resume" lors de l'arrêt au point d'arrêt.
. Autre cas :

* Ajoutez un point d'arrêt sur la dernière ligne du programme (System.out...).
* Exécuter pas à pas le programme en utilisant "Resume" lors de l'arrêt au point d'arrêt.

. Exécuter pas à pas le programme en passant par l'exécution de la méthode plusPlus() (utiliser "Step Into").
* A ce niveau, regarder le panel "Debug" -> pile d'appel des fonctions qui vous permet de voir les variables de chaque contexte de fonction (cliquez sur le nom de la fonction souhaitée).
+
image:images/tp1DebugPile.png[]


[IMPORTANT]
.ATTENTION
=====
Toujours finir en utilisant le bouton Arrêt du programme ("carré rouge").
=====

[IMPORTANT]
.ATTENTION
=====
A noter : les variables n'apparaissent dans le debugger qu'à partir du moment où sont initialisées.
=====

La suite dans les exercices ...

endif::todoprof[]