:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 8
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 4 : Héritage, TP7 : Héritage figures.
| {objtd}	| Programmer une hiérarchie d'héritage de Compte.
| {duree}	| *2 séance* de 1,5h sur machine.
| {depot}	| Code source à déposer : classes produites (un seul fichier zip) + réponses au questions éventuelles en commentaire en début de fichier dans les fichiers concernés.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Créer une hiérarchie de classes Compte.

**	On leur donne l'interface attendue des classes : toutes les méthodes qui seront dispos une fois la classe programmée
**	Ils doivent définir :

***	Les attributs nécessaires
***	*Les méthodes à ajouter*
***	*Les méthodes à redéfinir*
***	Et bien sur écrire le minimum de code

*	Le Cours 4 (cf en ligne moodle) a introduit l'héritage, les problématiques de constructeur (super(...)) et appel des méthodes héritées (super.methode(...)).
*	Le TP7 a déjà illustré le pb.
====

[IMPORTANT]
====
Nouveauté à partir de cette semaine : les TPs se font en groupes TD complets dans un seule salle de TP :

*	je ferai une note aux étudiants
*	ceux qui ont un portable (installé) => peuvent l'utiliser
*	les autres en binomes : Consignes à donner

**	on change les binomes chaque semaine (3 semaines)
**	à mi TP : on change le clavier de main pour que les 2 "participent"
**	chaque étudiant rend le TP, en notant dans les fichiers avec qui il l'a fait.
====

[IMPORTANT]
====
A Suivre :

*	Le choix des attributs, dans les classes
*	Ne pas redéfinir "trop" de méthodes

**	Ne pas laisser passer les définitions du genre : +methode() { super.methode(); }+

*	Les appels à super.afficher() lorsque nécessaire.
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

Le but de ce TP est de construire une hiérarchie classes avec héritage à partir de la classe Compte déjà construite et utilisée dans d'autres TPs. 

On souhaite construire l'arborescence présentée figure ci-après.


[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp8.1.png[]
=====

== Mise en place de l'environnement

Récupérer les classes déjà écrites proposées sur le serveur (fichiers .zip) :

.	Compte.java :

*	Les Compte permettent de gérer des comptes simples comptabilisant des débits et des crédits successifs. L’interface de la classe Compte est disponible dans la documentation sur le serveur.

.	CompteException.java : classe des exceptions levées par la classe Compte.

*	Lire le code de la classe CompteException.
*	Remarquez comment créer une classe particulière d'exception : simplement hériter de la classe Exception.
**	Cet héritage est obligatoire pour une classe d'exceptions.
** 	Si besoin : on pourrait rajouter des attributs et des méthodes getter/setter pour que es objets exceptions puissent "transporter" des informations entre le code qui lève l'exception et le code qui traite l'exception.

.	SensOperation.java et Operation.java : détaillées ci-après pour la classe CompteDepot.
.	Fichiers de tests.

== Travail à faire

=== Recommandations

*ATTENTION : Respectez les noms exacts des classes et méthodes (cf en-têtes fournis interfaces). Un programme de test vous est proposé.*

Pour chaque classe, écrire le code de la classe en faisant attention aux points suivants :

*	On ne redéfinira pas la méthode +soldeCompte()+ sur les sous-classes de Compte, en particulier sur CompteDepot. Elle devra calculer le bon solde telle qu’elle est définie dans la classe Compte. Elle y est définie final exprès (non redéfinissable).
*	La définition du(es) constructeur(s). Écrire le minimum de lignes possibles.
*	Quelles méthodes faut-il réellement redéfinir ? On écrira le minimum de code.
*	Redéfinir correctement +afficher()+ dans chaque classe.

=== Code à écrire

*Pour chaque classe demandée*, une à la fois, dans l'ordre proposé :

.	Créer un fichier portant le nom de la classe (aux majuscules près).
.	Écrire la classe selon les recommandations données ci-après
.	Écrire un petit test de la classe dans une méthode main() dans un fichier séparé.
.	Tester la méthode +afficher()+ et vérifier les valeurs affichées à l'écran ! Elles doivent être correctes.
.	Tester votre classe avec le test {junit} fourni.

== Spécification des classes à définir

=== La classe CompteMoneo

Les CompteMoneo sont des comptes comportant un numéro de "carte Moneo" (chaîne de caractères).

Voici *l'interface attendue* de la classe CompteMoneo :

[source,java]
----
public CompteMoneo ()   // numéro de carte : "Pas de numéro monéo"
public CompteMoneo (String pNoCarteMoneo) 
public CompteMoneo (String pNumCompte, String pNomProp, String pNoCarteMoneo)  
public double soldeCompte ()
public String getProprietaire ()
public String getNumCompte ()
public void retirer (double pSomme) throws CompteException
public void deposer (double pSomme) throws CompteException
public void setProprietaire (String pNomProp)
public String getNoCarteMoneo ()
public void setNoCarteMoneo (String pNoCarteMoneo)

	public void afficher ()  // SPECIAL TP : Affichage de Compte + numéro de carte Moneo
----

=== La classe CompteDepot

Les CompteDepot sont des comptes enregistrant chaque opération réalisée sur le compte (en plus de comptabiliser débits et crédits comme un compte).

Voici *l'interface attendue* de la classe CompteDepot :

[source,java]
----
public CompteDepot ()
public CompteDepot (String pNumCompte, String pNomProp) 
public double soldeCompte ()
public String getProprietaire ()
public String getNumCompte ()
public void retirer (double pSomme) throws CompteException
public void deposer (double pSomme) throws CompteException
public void setProprietaire (String pNomProp)
public Operation[] getOperations()

	public void afficher ()  // SPECIAL TP : Affichage de Compte + liste des opérations (sens et montant).
----

Mise en oeuvre de la classe CompteDepot :

*	SensOperation : cette classe définit 2 constantes définissant le libellé des opérations de débit et de crédit.
*	Operation : cette classe définit une opération sur un compte de dépôt (un sens et un montant).  Noter que le constructeur de Operation prend en paramètre le sens de l’opération et arrête l’application si sa valeur n’est pas correcte (cf. classe SensOperation).
*	Pour enregistrer les opérations, la classe CompteDepot stockera dans une ArrayList les opérations réalisées. On utilisera la classe Operation livrée.
*	Pour mettre en oeuvre la méthode +Operation[] getOperations()+ :

**	Elle renvoie la liste des opérations du compte sous forme d’un tableau d’Operation, tableau de longueur 0 si pas d’opérations.
**	On pourra créer un tableau et y recopier les opérations du CompteDepot.
**	On pourra étudier aussi la méthode toArray() de la classe ArrayList et on l’essaiera en lui donnant en paramètre un tableau d’objets Operation créé avec une longueur 0 : alOperations.toArray(new Operation[0]). 
**	On indiquera en commentaire dans la classe : 

=== Classe CompteEpargne

Les CompteEpargne sont des comptes de dépôt qui rapportent des intérêts.

Voici *l'interface attendue* de la classe CompteEpargne :

[source,java]
----
public CompteEpargne ()// Constructeur par défaut – Intérêts == 0
public CompteEpargne (String pNumCompte, String pNomProp, double pTxInterets)
public double soldeCompte ()
public String getProprietaire ()
public String getNumCompte ()
public double getTauxInterets ()
public double interetsCompte ()   // Calcule les intérêts courants (sans les verser)
public void retirer (double pSomme) throws CompteException
public void deposer (double pSomme) throws CompteException
public void setProprietaire (String pNomProp)
public Operation[] getOperations()   // Operation[] de longueur 0 si 0 Opérations
public void ajouterInterets () // Verse les intérêts courants sur le compte

	public void afficher ()     // SPECIAL TP : comme afficher de CompteDepot + taux d'intérêts + intérêts
----

Mise en oeuvre de la classe CompteEpargne:

*	Un taux d’intérêts est une valeur de type double entre 0 et 10 (pour des intérêts entre 0% et 10%, par exemple 5.0 pour 5%). 
*	Les intérêts se calculent en appliquant ce taux au solde du compte si le solde est >=0, ils sont nuls sinon. 

=== Classe CompteSecurise 

Les CompteSecurise sont des comptes de dépôt comportant un découvert autorisé.

Voici *l'interface attendue* de la classe CompteSecurise :

[source,java]
----
public CompteSecurise ()  // découvert : 0
public CompteSecurise (String pNumCompte, String pNomProp) // découvert : 0
public CompteSecurise (String pNumCompte, String pNomProp, double pDA)
	// pDA : valeur du Découvert Autorisé
public double soldeCompte ()
public String getProprietaire ()
public String getNumCompte ()
public boolean isRetraitPossible (double pSomme)
public void retirer (double pSomme) throws CompteException
public void deposer (double pSomme) throws CompteException
public void setProprietaire (String pNomProp)
public Operation[] getOperations()

	public void afficher ()  // SPECIAL TP : Affichage de CompteDepot + valeur du découvert autorisé
----

Mise en oeuvre de la classe CompteSecurise : 

*	Un découvert autorisé est une valeur double, par exemple 600. En cas d’opération sur ce compte, le solde après l’opération ne peut être inférieur au découvert autorisé, par exemple le solde ne peut être inférieur à -600. 
*	En cas de dépassement du découvert autorisé dans l'opération retirer() on arrêtera le programme en levant une exception de type +CompteException+ avec en paramètre une chaîne de caractères indiquant l'erreur correspondante (cf. classe Compte).
*	L'opération +isRetraitPossible()+ permet de tester si un retrait d'un certain montant peut être effectué sans dépassement de découvert autorisé ou pas.

=== Classe CompteBancaire

Les CompteBancaire sont des comptes sécurisés comportant un numéro de carte bleue "Jisa" (sous forme d'une chaîne de caractères) et pouvant avoir un découvert autorisé. (A noter : "Jisa" au lieu de Visa ou Master ...).

Voici *l'interface attendue* de la classe CompteBancaire :

[source,java]
----
public CompteBancaire () // numéro carte : « Pas de numéro CJ », découvert == 0
public CompteBancaire (String pNumCompte, String pNomProp, String pNoCarteJisa)
	// numéro carte : « Pas de numéro CJ », découvert == 0
public CompteBancaire (String pNumCompte, String pNomProp, String pNoCarteJisa, double pDA)	
		// pDA : valeur du Découvert Autorisé
public double soldeCompte ()
public String getProprietaire ()
public String getNumCompte ()
public boolean isRetraitPossible (double pSomme)
public void retirer (double pSomme)
public void deposer (double pSomme)
public void setProprietaire (String pNomProp)
public Operation[] getOperations()
public String getNumCarteJisa ()
public void setNumCarteJisa (String pNoCarteJisa)

	public void afficher ()  // SPECIAL TP : Affichage de CompteSecurise + numéro de carte Jisa
----

=== Classe CompteJeune

Les CompteJeune sont des comptes sécurisés ayant un découvert autorisé de 0.

Voici *l'interface attendue* de la classe CompteJeune :

[source,java]
----
public CompteJeune () // Constructeur par défaut
public CompteJeune (String pNumCompte, String pNomProp)
public double soldeCompte ()
public String getProprietaire ()
public String getNumCompte ()
public boolean isRetraitPossible (double pSomme)
public void retirer (double pSomme)
public void deposer (double pSomme)
public void setProprietaire (String pNomProp)
public Operation[] getOperations()

	public void afficher ()  // SPECIAL TP : Affichage de CompteSecurise + affichage de "Compte jeune"
----

== Questions complémentaires

Dans la classe CompteDepot, pour la méthode +Operation[] getOperations()+ :

.	Pourquoi ne pas renvoyer l'ArrayList contenue dans la classe directement au lieu d'un tableau ?

**	Si on ne comprend pas : 

***	Créer une méthode +ArrayList<Operation> getOperations()+ qui renvoie simplement l'ArrayList contenue dans le CompteDepot.
***	Écrire un programme de test qui appelle cette méthode et modifie l'ArrayList renvoyée.
***	Réafficher le CompteDepot : que se passe-t-il ? pourquoi le tableau empêche-t-il cette modification ?

.	Pourquoi peut-on renvoyer les objets Operation contenus dans l'ArrayList sans crainte qu’ils soient modifiés de l’extérieur de la classe ? Par exemple, le client ne peut pas modifier le montant ou le sens d'une opération "contenue" dans le CompteDepot.

**	Si on ne comprend pas : faire une test comme ci-dessus (utiliser la méthode +Operation[] getOperations()+, modifier une des opérations renvoyées, réafficher le CompteDepot).

ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions
======
[source,java]
----
public class CompteMoneo extends Compte {
	private String noCarteMoneo;

	// Constructeurs
	public CompteMoneo() {
		this("Pas de numéro monéo");
	}

	public CompteMoneo(String pNoCarteMoneo) // Constructeur par défaut
	{
		this("Pas de numéro", "Pas de propriétaire", pNoCarteMoneo);
	}

	public CompteMoneo(String pNumCompte, String pNomProp, String pNoCarteMoneo) {
		super(pNumCompte, pNomProp);
		this.noCarteMoneo = pNoCarteMoneo;
	}

	@Override
	public void afficher() {
		super.afficher();
		System.out.println("  Numero de carte Moneo : " + this.noCarteMoneo);
	}

	public String getNoCarteMoneo() {
		return this.noCarteMoneo;
	}

	public void setNoCarteMoneo(String pNCM) {
		this.noCarteMoneo = pNCM;
	}
}

import java.util.*;

public class CompteDepot extends Compte {
	private Vector<Operation> vOperations;

	public CompteDepot() {
		this("Pas de numéro", "Pas de propriétaire");
	}

	public CompteDepot(String pNumCompte, String pNomProp) {
		super(pNumCompte, pNomProp);
		this.vOperations = new Vector<Operation>();
	}

	@Override
	public void afficher() {
		super.afficher();
		System.out.println("  Les Opérations :");
		for (Operation o : this.vOperations)
			System.out.println("    - " + o.getSens() + " : " + o.getMontant());
	}

	@Override
	public void retirer(double pSomme) throws CompteException {
		super.retirer(pSomme);
		this.vOperations.add(new Operation(SensOperation.DEBIT, pSomme));
	}

	@Override
	public void deposer(double pSomme) throws CompteException {
		super.deposer(pSomme);
		this.vOperations.add(new Operation(SensOperation.CREDIT, pSomme));
	}

	public Operation[] getOperations() {
		return this.vOperations.toArray(new Operation[0]);
	}
}

public class CompteEpargne extends CompteDepot {
	// Attributs

	// Taux d'interets
	private double txInterets;

	// Constructeurs
	public CompteEpargne()// Constructeur par défaut
	{
		this("Pas de numéro", "Pas de propriétaire", 0);
	}

	public CompteEpargne(String pNumCompte, String pNomProp, double pTxInterets) {
		super(pNumCompte, pNomProp);
		this.txInterets = pTxInterets;
	}

	// Methodes de consultation

	// Taux d'interets du compte
	public double getTauxInterets() {
		return this.txInterets;
	}

	// Interets courants sur le compte
	public double interetsCompte() {
		if (this.soldeCompte() > 0)
			return this.soldeCompte() * this.txInterets / 100;
		return 0;
	}

	// Affichage d'un compte epargne
	@Override
	public void afficher() {
		super.afficher();
		System.out.println("  Taux : " + this.txInterets);
	}

	// Methodes de mise a jour

	// Comptabilisation des interets
	public void ajouterInterets() {
		if (this.interetsCompte() > 0)
			try {
				this.deposer(this.interetsCompte());
			} catch (CompteException e) {}
	}
} // Fin Classe CompteEpargne

public class CompteSecurise extends CompteDepot {
	private double debitAutorise;

	public CompteSecurise() {
		this("Pas de numéro", "Pas de propriétaire");
	}

	public CompteSecurise(String pNumCompte, String pNomProp) {
		this(pNumCompte, pNomProp, 0);
	}

	public CompteSecurise(String pNumCompte, String pNomProp, double pDA) {
		super(pNumCompte, pNomProp);
		this.debitAutorise = pDA;
	}

	@Override
	public void afficher() {
		super.afficher();
		System.out.println("  Decouvert autorise : " + this.debitAutorise);
	}

	public boolean isRetraitPossible(double pSomme) {
		return (this.soldeCompte() - pSomme >= (-1) * this.debitAutorise);
	}

	@Override
	public void retirer(double pSomme) throws CompteException {
		if (!this.isRetraitPossible(pSomme)) {
			throw new CompteException("Retrait de : "+ pSomme
					+ " impossible sur "+this.getNumCompte());
		}
		super.retirer(pSomme);
	}
}

public class CompteJeune extends CompteSecurise {
	// Constructeurs
	public CompteJeune() // Constructeur par défaut
	{
		this("Pas de numéro", "Pas de propriétaire");
	}

	public CompteJeune(String pNumCompte, String pNomProp) {
		super(pNumCompte, pNomProp);
	}

	@Override
	public void afficher() {
		System.out.println("Compte Jeune");
		super.afficher();
	}
} // Fin Classe CompteJeune

public class CompteBancaire extends CompteSecurise {

	// Attribut numero de carte JISA
	private String numCJ;

	// Constructeurs
	public CompteBancaire() // Constructeur par défaut
	{
		this("Pas de numéro", "Pas de propriétaire", "Pas de numéro CJ");
	}

	public CompteBancaire(String pNumCompte, String pNomProp,
			String pNoCarteJisa) {
		this(pNumCompte, pNomProp, pNoCarteJisa, 0);
	}

	public CompteBancaire(String pNumCompte, String pNomProp,
			String pNoCarteJisa, double pDA) {
		super(pNumCompte, pNomProp, pDA);
		this.numCJ = pNoCarteJisa;
	}

	// Methodes de consultation

	// Numero de carte JISA
	public String getNumCarteJisa() {
		return this.numCJ;
		// Les objets String étant non modifiables
		// l'appelant ne pourra pas modifier la chaine
		// donc inutile de faire une copie ...
	}

	// Affichage d'un compte bancaire
	@Override
	public void afficher() {
		super.afficher();
		System.out.println("  Numéro carte JISA : " + this.numCJ);
	}

	public void setNumCarteJisa(String pNoCarteJisa) {
		this.numCJ = pNoCarteJisa;
	}

} // Fin Classe CompteBancaire
----

Questions :

*	Ne pas retourner l'ArrayList car sinon la liste des opérations est modifiable en dehors de la classe CompteDepot. On pourrait ajouter ou enlever une opération sans passer par les opérations deposer() ou retirer().
*	Les objets Operation ne comportent aucune méthode transformateur donc ils ne sont pas modifiables en dehors de la classe CompteDepot.
======

endif::prof[]

endif::todoprof[]
