:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 8
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 4 : Héritage.
| {objtd}	| Programmer une hiérarchie d'héritage simple.
| {duree}	| *2 séances* de 1,5h sur machine.
| {depot}	| Code source à déposer : classes produites (un seul fichier zip) + réponses au questions éventuelles en commentaire en début de fichier dans les fichiers concernés.
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Créer une hiérarchie de classes simples.
*	Le Cours 4 (cf en ligne moodle) a introduit l'héritage, les problématiques de constructeur (super(...)) et appel des méthodes héritées (super.methode(...)).
*	Un TD illustrera les exemples de cours mais aura lieu probablement après les TPs ...
====

[IMPORTANT]
====
Qu'ils fassent bien le programme d'essai :

*	C'est répétitif : certes.
*	Permet de bien voir TOUTES les méthodes héritées, définies, redéfinies : l'interface des classes
====

[IMPORTANT]
====

A Suivre :

*	Le choix des attributs, *surtout Sphere et Carre qui n'en ont pas*.
*	Ne pas faire d'attributs pour surface et volume de Sphere : juste redéfinir les méthodes héritées.
*	Ne pas faire d'attribut pour Carré qui passe son côté comme longueur et largeur du Rectangle.
*	Carre est "illogique" car on hérite de setLongueur() et setLargeur() donc on peut ... ne plus avoir un carré (avec une surface erronée par rapport au côté affiché par le carré).

**	Si ils le trouvent illogique : parfait !!
*	Le constructeur de Carré un peu particulier (Carre (x, y, cote)).
*	L'héritage (ne pas faire de compositions même si le sujet s'y prêterait bien parfois).
*	Les appels de constructeurs.
*	Les appels à super.afficher() lorsque nécessaire.
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

Le but de ce TP est de construire une hiérarchie simple de classes avec héritage et de tester les classes produites. 

On suppose un espace en 3 dimensions dans lequel on veut définir des figures géométriques (rectangles, carrés, cercles, cylindres, sphères, ...).

Les formes graphiques définies ont des coordonnées x et y (entiers). L'axe z ne sert que pour les figures avec volume (sphères, cylindres, ...).

On souhaite construire l'arborescence présentée figure ci-après.


[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp7.1.png[]
=====

== Mise en place de l'environnement

Récupérer les classes déjà écrites proposées sur le serveur :

*	FormeGraphique.java
*	Rectangle.java
*	HeritageTestFG3D.java : fonction main() qui est à compléter.

[NOTE]
=====
Pas de programme de test (junit) pour ce TP ?

Pas d'inquiétude : bientôt c'est vous qui écrirez les tests.
====

== Étude des classes proposées

=== La classe FormeGraphique

La classe FormeGraphique définit une forme graphique par ses coordonnées x et y (entiers). 

Étudier le code de la classe FormeGraphique. Elle définit :

.	les attributs nécessaires,
.	un constructeur par défaut initialisant les coordonnées à 0,
.	un constructeur paramétré permettant d'initialiser correctement les coordonnées de la FormeGraphique,
.	une méthode accesseur (get) pour chaque attribut défini,
.	une méthode transformateur (set) pour chaque attribut défini,
.	une méthode +surface()+ qui calcule la surface d'une forme, valeur de type +double+. A ce niveau, elle est de 0,
.	une méthode +volume()+ qui calcule le volume d'une forme, valeur de type +double+. A ce niveau, il est de 0,
.	une méthode afficher() qui affiche à l'écran le texte suivant (en gras : le texte affiché, en italique/indice les valeurs spécifiques à chaque objet) :
+
*Forme graphique : abscisse* ~_valeur abcisse_~ *ordonnée* ~_valeur ordonnée_~
+
Exemple : 
+
 Forme graphique : abscisse 245 ordonnée 189

Le programme d'essai vous est fourni aussi.

=== La classe Rectangle

La classe Rectangle est une FormeGraphique comprenant les coordonnées du coin supérieur gauche sur le plan x et y (entiers), une hauteur et une largeur (entiers).

Étudier le code de la classe Rectangle et répondre aux questions suivantes (en commentaire dans le fichier) :

.	La classe hérite de quelle autre classe ?  Quel mot clef signale cet héritage ?
.	Quels sont les attributs définis par la classe Rectangle ?
.	Combien la classe a-t-elle de constructeur(s) ?
.	Combien la classe définit-elle d'accesseur(s) ?
.	Combien la classe définit-elle de transformateur(s) ?
.	La méthode +surface()+ est-elle une nouvelle méthode par rapport à FormeGraphique ?
.	La méthode +afficher()+ est-elle une nouvelle méthode par rapport à FormeGraphique ?
.	Qu'affiche la méthode +afficher()+ de la classe Rectangle lorsqu'on l'utilise ? Donner un exemple de résultat.
.	Que réalise la ligne +super.afficher();+ dans la méthode +afficher()+ ?
.	Que réalise la ligne +super(pX, pY);+ au début du constructeur +public Rectangle(int pX, int pY, int pLarg, int pLong)+ ?
.	La constructeur +Rectangle()+ appelle-t-il un constructeur de la classe FormeGraphique ? Lequel ?
.	Donner l'interface d'un objet de la classe Rectangle, c'est-à-dire la liste des méthodes disponibles en séparant :

*	Les méthodes héritées mais redéfinies dans Rectangle.
*	Les méthodes héritées non redéfinies.
*	Les méthodes définies dans la classe (non héritées).
*	Les constructeurs de la classe Rectangle utilisables.

.	Écrire un petit test de la classe dans la méthode main() déjà proposée.

*	Créer un objet avec *chaque* constructeur défini dans la classe (x constructeurs => x création d'objets différentes).
*	Pour chaque objet créé :
**	Lui appliquer la méthode +afficher()+.
**	Lui appliquer les méthodes transformateurs de la classe.
**	Lui appliquer les méthodes transformateurs héritées.
**	Lui appliquer la méthode +afficher()+.
**	Lui appliquer les méthodes accesseurs de la classe (dans un System.out.println()).
**	Lui appliquer les méthodes accesseurs héritées (dans un System.out.println()).
.	Vérifier les valeurs affichées à l'écran ! Elles doivent être correctes.


== Travail à faire

=== Code à écrire

*Pour chaque classe demandée*, une à la fois, dans l'ordre proposé :

.	Créer un fichier portant le nom de la classe (aux majuscules près).
.	Écrire la classe selon les recommandations données ci-après
+
[NOTE]
=====
On ne traitera pas les préconditions avec levée d'exceptions dans ce sujet. 

Vous pouvez mettre les préconditions existantes en commentaire dans le code produit.
====
+
.	Écrire un petit test de la classe dans la méthode main() déjà proposée.

*	Créer un objet avec *chaque* constructeur défini dans la classe (x constructeurs => x création d'objets différentes).
*	Pour chaque objet créé :
**	Lui appliquer la méthode +afficher()+.
**	Lui appliquer les méthodes transformateurs de la classe.
**	Lui appliquer les méthodes transformateurs héritées.
**	Lui appliquer la méthode +afficher()+.
**	Lui appliquer les méthodes accesseurs de la classe (dans un System.out.println()).
**	Lui appliquer les méthodes accesseurs héritées (dans un System.out.println()).
.	Vérifier les valeurs affichées à l'écran ! Elles doivent être correctes.
+
[NOTE]
=====
Au besoin : commenter au fur et à mesure le code écrit pour tester chaque classe dans le main().

*MAIS NE PAS L'EFFACER, SERA UTILE A LA FIN !!*
====

=== Spécification (simple) des classes à définir

==== La classe Cercle

La classe Cercle est une forme graphique comprenant les coordonnées du centre avec en plus un rayon (entier).

Écrire la classe Cercle. On définira :

.	la classe Cercle comme héritant de FormeGraphique,
.	le(s) attribut(s) nécessaire(s),
.	un constructeur par défaut initialisant les coordonnées du centre à 0 ainsi que le rayon à 0,

*	voir le cours pour les appels des constructeurs de la super-classe,
.	un constructeur paramétré permettant d'initialiser correctement toutes les données d'un Cercle,
.	une méthode accesseur (get) pour chaque attribut défini,
.	une méthode transformateur (set) pour chaque attribut défini,
.	redéfinir la méthode +surface()+ de calcul de la surface d'un Cercle (rappel : &Pi; x R^2^),

*	utiliser la constante &Pi; de la classe Math : Math.PI,
.	redéfinir la méthode +afficher()+ permettant d'afficher à l'écran le texte suivant. On appellera *obligatoirement* la méthode +afficher()+ de la classe parente.
+
*Forme graphique : abscisse* ~_valeur abcisse_~ *ordonnée* ~_valeur ordonnée_~
+
*Cercle : rayon* ~_valeur rayon_~
+
Exemple : 
+
 Forme graphique : abscisse 245 ordonnée 189
 Cercle : rayon 17

==== La classe Cylindre

La classe Cylindre est définie comme un cercle avec en plus une hauteur (entier).

Écrire la classe Cylindre. On définira :

.	un héritage éventuel pour la classe (assez évident),
.	le(s) attribut(s) nécessaire(s),
.	un constructeur par défaut initialisant les coordonnées du centre à 0, le rayon à 0 ainsi que la hauteur à 0,
.	un constructeur paramétré permettant d'initialiser correctement toutes les données d'un Cylindre,
.	une méthode accesseur (get) pour chaque attribut défini,
.	une méthode transformateur (set) pour chaque attribut défini,
.	la méthode +surface()+ qui calcule la surface d'un Cylindre (rappel : 2 x &Pi; x R x H + 2 x &Pi; x R^2^),
.	la méthode +volume()+ qui calcule le volume d'un Cylindre (rappel : &Pi; x R^2^ x H),
.	la méthode +afficher()+ permettant d'afficher à l'écran le texte suivant. On appellera *obligatoirement* la méthode +afficher()+ de la classe parente.
+
*Forme graphique : abscisse* ~_valeur abcisse_~ *ordonnée* ~_valeur ordonnée_~
+
*Cercle : rayon* ~_valeur rayon_~
+
*Cylindre : hauteur* ~_valeur hauteur_~
+
Exemple : 
+
 Forme graphique : abscisse 245 ordonnée 189
 Cercle : rayon 17
 Cylindre : hauteur 789

==== La classe Sphere

La classe Sphere est définie comme un cercle et a une surface et un volume.

Écrire la classe Cercle. On définira :

.	un héritage éventuel pour la classe,
.	le(s) attribut(s) nécessaire(s), réfléchir ... 
.	un constructeur par défaut initialisant les coordonnées du centre à 0 ainsi que le rayon à 0,
.	un constructeur paramétré permettant d'initialiser correctement toutes les données d'une Sphere,
.	une méthode accesseur (get) pour chaque attribut défini,
.	une méthode transformateur (set) pour chaque attribut défini,
.	la méthode +surface()+ qui calcule la surface d'une Sphere (rappel : 4 x &Pi; x R^2^),
.	la méthode +volume()+ qui calcule le volume d'une Sphere (rappel : 4 x &Pi; x R^3^ / 3),
.	la méthode +afficher()+ permettant d'afficher à l'écran le texte suivant. On appellera *obligatoirement* la méthode +afficher()+ de la classe parente.
+
*Forme graphique : abscisse* ~_valeur abcisse_~ *ordonnée* ~_valeur ordonnée_~
+
*Cercle : rayon* ~_valeur rayon_~
+
*Sphere : rayon sphère* ~_valeur rayon_~
+
Exemple : 
+
 Forme graphique : abscisse 245 ordonnée 189
 Cercle : rayon 17
 Sphere : rayon sphère 17
 
==== La classe Carre

La classe Carre est un rectangle particulier de longueur égale à la hauteur, appelée côté.

Écrire la classe Carre. On définira :

.	un héritage éventuel pour la classe,
.	le(s) attribut(s) nécessaire(s), réfléchir ...
.	un constructeur par défaut initialisant les coordonnées du coin supérieur gauche à 0 ainsi que le côté à 0,
.	un constructeur paramétré permettant d'initialiser correctement un carré : les coordonnées du coin supérieur gauche et la longueur du côté,
.	une méthode accesseur (get) pour chaque attribut défini,
.	une méthode getCote() permettant d'obtenir le cote d'un carré,
.	une méthode transformateur (set) pour chaque attribut défini,
.	à réfléchir : la méthode qui calcule la surface d'un carré (rappel : coté x coté),
.	la méthode afficher permettant d'afficher à l'écran le texte suivant. On appellera *obligatoirement* la méthode +afficher()+ de la classe parente.
+
*Forme graphique : abscisse* ~_valeur abcisse_~ *ordonnée* ~_valeur ordonnée_~
+
*Rectangle : hauteur* ~_valeur hauteur_~ *largeur* ~_valeur largeur_~
+
*Carré : côté* ~_valeur coté_~
+
Exemple : 
+
 Forme graphique : abscisse 245 ordonnée 189
 Rectangle : hauteur 43 largeur 43
 Carré : côté 43

[NOTE]
=====
Compte tenu de l'héritage utilisé, en utilisant les méthodes transformateurs héritées : arrive-t-on à faire des "carrés qui ne soient pas vraiment carrés" ? 
====

== Pour terminer

=== Pour en arriver au polymorphisme

A la fin du main() que vous avez écrit :

.	Vous devriez avoir créé 12 objets (12 new, 2 par classe).
.	Insérer la déclaration suivante pour créer un tableau de 12 éléments de type FormeGraphique et y ranger les formes graphiques créées :
+
[source,java]
----
FormeGraphique tabFormes[];

tabFormes = new FormeGraphique [12];

tabFormes[0] = fgUn; // variable référençant la première FormeGraphique créée
tabFormes[1] = fgDeux; // variable référençant la deuxième FormeGraphique créée
tabFormes[2] = rectUn; // variable référençant le premier Rectangle créé
tabFormes[3] = rectDeux; // variable référençant le deuxième Rectangle créé
tabFormes[4] = carreUn; // variable référençant le premier Carré créé
.. // continuer
----
.	Continuer le programme précédent pour y mettre tous les objets créés.
.	Compiler. ok ?
.	Faire une boucle pour afficher l'indice courant (i), et appliquer surface(), volume() et appliquer afficher() à chaque élément du tableau. 
.	Compiler. ok ?
.	Quel est le résultat obtenu à l'exécution ? Quelles méthodes sont réellement appelées (classe de définition de la méthode appelée) ?
.	Ajouter dans la boucle l'instruction suivante :
+
[source,java]
----
System.out.println(tabFormes[i].getClass());
----
.	Quel est le résultat ?

=== Utiliser les méthodes de la super-classe

Dans la classe Cylindre :

.	Mettre en commentaire le corps de la méthode surface() et volume()
.	En écrire une nouvelle version en utilisant la méthode surface() définie dans la classe Cercle. Bien regarder les formules de calcul utilisées.

On pourra faire de même dans la classe Sphere.

ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution classe Cercle
======
[source,java]
----
public class Cercle extends FormeGraphique {
	private double rayon;
	
	public Cercle() {
		super();
		this.rayon = 0;
	}
	public Cercle (int pX, int pY, double pRayon) {
		super(pX, pY);
		this.rayon = pRayon;
	}
	public double getRayon() {
		return rayon;
	}
	public void setRayon(double pRayon) {
		this.rayon = pRayon;
	}
	public double surface() {
		return Math.PI * this.rayon * this.rayon;
	}
	public void afficher() { 
		super.afficher();
		System.out.println("Cercle : rayon " + this.rayon);
	}
}
----

.Solution classe Cylindre
[source,java]
----
public class Cylindre extends Cercle {

	private double hauteur;
	
	public Cylindre() {
		super();
		this.hauteur = 0;
	}
	public Cylindre(int pX, int pY, double pRayon, double pHauteur) {
		super(pX, pY, pRayon);
		this.hauteur = pHauteur;
	}

	public double getHauteur() {
		return hauteur;
	}

	public void setHauteur (double pHauteur) {
		hauteur = pHauteur;
	}

	public double surface() {
//		return 2 * Math.PI * this.getRayon() * this.hauteur
//				+ 2 * Math.PI * this.getRayon() * this.getRayon();
		return 2 * Math.PI * this.getRayon() * this.hauteur
				+ 2 * super.surface();
	}

	public double volume() {
//		return Math.PI * this.getRayon() * this.getRayon() * this.hauteur;
		return super.surface() * this.hauteur;
	}
	
	public void afficher() { 
		super.afficher();
		System.out.println("Cylindre : hauteur " + this.hauteur);
	}
}
----

.Solution classe Sphere
[source,java]
----
public class Sphere extends Cercle {
	
	public Sphere() {
		super();
	}

	public Sphere(int pX, int pY, double pRayon) 	{
		super(pX, pY, pRayon);
	}
	
	public double surface() 	{
		return 4*super.surface(); // <=>  4 * this.getRayon()*getRayon()*Math.PI;
	}
	//volume of sphere = (4/3)Pi*radius^3
	public double volume() 	{
		return (4.0/3)*super.surface()*this.getRayon();
		// <=>  4 * Math.PI * this.getRayon() * this.getRayon() * this.getRayon() / 3;
	}
	
	public void afficher() { 
		super.afficher();
		System.out.println("Sphere : rayon sphère "+this.getRayon());
	}
}
----

.Solution classe Carre
[source,java]
----
public class Carre extends Rectangle {

	public Carre() {
		super();
	}
	public Carre(int pX, int pY, int pCote) {
		super(pX, pY, pCote, pCote);
	}
	public int getCote () {
		return this.getLongueur();
	}
	public void afficher() {
		super.afficher();
		System.out.println("Carré : côté "+this.getLongueur());
	}
}
----

.Solution classe HeritageTest
[source,java]
----
public class HeritageTestFG3D {
	public static void main(String[] args) {
		// Compléter les test ici.
		
		// Exemple de test FormeGraphique
		
		FormeGraphique fgUn;
		FormeGraphique fgDeux;
		
		fgUn = new FormeGraphique();
		System.out.println("Test FormeGraphique 1");
		fgUn.afficher();
		fgUn.setOrigineX(550);
		fgUn.setOrigineY(660);
		fgUn.afficher();
		System.out.println("X : " + fgUn.getOrigineX());
		System.out.println("Y : " + fgUn.getOrigineY());
		System.out.println("Surface : " + fgUn.surface());
		System.out.println("Volume : " + fgUn.volume());
				
		fgDeux = new FormeGraphique(100, 200);		
		System.out.println("Test FormeGraphique 2");
		fgDeux.afficher();
		fgDeux.setOrigineX(550);
		fgDeux.setOrigineY(660);
		fgDeux.afficher();
		System.out.println("X : " + fgDeux.getOrigineX());
		System.out.println("Y : " + fgDeux.getOrigineY());
		System.out.println("Surface : " + fgDeux.surface());
		System.out.println("Volume : " + fgDeux.volume());

		Rectangle rectUn;
		Rectangle rectDeux;
		
		rectUn = new Rectangle();		
		System.out.println("Test Rectangle 1");
		rectUn.afficher();
		rectUn.setOrigineX(550);
		rectUn.setOrigineY(660);
		rectUn.setLargeur(10);
		rectUn.setLongueur(20);
		rectUn.afficher();
		System.out.println("X : " + rectUn.getOrigineX());
		System.out.println("Y : " + rectUn.getOrigineY());
		System.out.println("Long : " + rectUn.getLongueur());
		System.out.println("Larg : " + rectUn.getLargeur());
		System.out.println("Surface : " + rectUn.surface());
		System.out.println("Volume : " + rectUn.volume());
		
		rectDeux = new Rectangle(100, 200, 10, 50);		
		System.out.println("Test Rectangle 2");
		rectDeux.afficher();
		rectDeux.setOrigineX(550);
		rectDeux.setOrigineY(660);
		rectDeux.setLargeur(rectDeux.getLargeur()+10);
		rectDeux.setLongueur(rectDeux.getLongueur()+200);
		rectDeux.afficher();
		System.out.println("X : " + rectDeux.getOrigineX());
		System.out.println("Y : " + rectDeux.getOrigineY());
		System.out.println("Surface : " + rectDeux.surface());
		System.out.println("Volume : " + rectDeux.volume());
		System.out.println("Surface : " + rectDeux.surface());
		System.out.println("Volume : " + rectDeux.volume());
		
		Cercle cercleUn; 
		Cercle cercleDeux;
		
		cercleUn = new Cercle();
		System.out.println("Test Cercle 1");
		cercleUn.afficher();
		cercleUn.setRayon(11.0);
		cercleUn.setOrigineX(550);
		cercleUn.setOrigineY(660);
		cercleUn.afficher();
		System.out.println("rayon : " + cercleUn.getRayon());
		System.out.println("Surface : " + cercleUn.surface());
		System.out.println("X : " + cercleUn.getOrigineX());
		System.out.println("Y : " + cercleUn.getOrigineY());
		System.out.println("Volume : " + cercleUn.volume());
				
		cercleDeux = new Cercle(100, 200, 27.0);		
		System.out.println("Test Cercle 2");
		cercleDeux.afficher();
		cercleDeux.setRayon(48.0);
		cercleDeux.setOrigineX(550);
		cercleDeux.setOrigineY(660);
		cercleDeux.afficher();
		System.out.println("rayon : " + cercleDeux.getRayon());
		System.out.println("Surface : " + cercleDeux.surface());
		System.out.println("X : " + cercleDeux.getOrigineX());
		System.out.println("Y : " + cercleDeux.getOrigineY());
		System.out.println("Volume : " + cercleDeux.volume());
		
		Cylindre cylindreUn;
		Cylindre cylindreDeux;
		
		cylindreUn = new Cylindre();
		System.out.println("Test Cylindre 1");
		cylindreUn.afficher();
		cylindreUn.setHauteur(100);
		cylindreUn.setRayon(11.0);
		cylindreUn.setOrigineX(550);
		cylindreUn.setOrigineY(660);
		cylindreUn.afficher();
		System.out.println("hauteur : " + cylindreUn.getHauteur());
		System.out.println("Surface : " + cylindreUn.surface());
		System.out.println("Volume : " + cylindreUn.volume());
		System.out.println("rayon : " + cylindreUn.getRayon());
		System.out.println("X : " + cylindreUn.getOrigineX());
		System.out.println("Y : " + cylindreUn.getOrigineY());
				
		cylindreDeux = new Cylindre(100, 200, 27.0, 159);		
		System.out.println("Test Cylindre 2");
		cylindreDeux.afficher();
		cylindreDeux.setHauteur(100);
		cylindreDeux.setRayon(48.0);
		cylindreDeux.setOrigineX(550);
		cylindreDeux.setOrigineY(660);
		cylindreDeux.afficher();
		System.out.println("hauteur : " + cylindreDeux.getHauteur());
		System.out.println("rayon : " + cylindreDeux.getRayon());
		System.out.println("Volume : " + cylindreDeux.volume());
		System.out.println("Surface : " + cylindreDeux.surface());
		System.out.println("X : " + cylindreDeux.getOrigineX());
		System.out.println("Y : " + cylindreDeux.getOrigineY());
		
		Sphere sphereUn;
		Sphere sphereDeux;
		
		sphereUn = new Sphere();
		System.out.println("Test Sphere 1");
		sphereUn.afficher();
		sphereUn.setRayon(11.0);
		sphereUn.setOrigineX(550);
		sphereUn.setOrigineY(660);
		sphereUn.afficher();
		System.out.println("Surface : " + sphereUn.surface());
		System.out.println("Volume : " + sphereUn.volume());
		System.out.println("rayon : " + sphereUn.getRayon());
		System.out.println("X : " + sphereUn.getOrigineX());
		System.out.println("Y : " + sphereUn.getOrigineY());
			
		sphereDeux = new Sphere(100, 200, 27.0);		
		System.out.println("Test Sphere 2");
		sphereDeux.afficher();
		sphereDeux.setRayon(48.0);
		sphereDeux.setOrigineX(550);
		sphereDeux.setOrigineY(660);
		sphereDeux.afficher();
		System.out.println("rayon : " + sphereDeux.getRayon());
		System.out.println("Volume : " + sphereDeux.volume());
		System.out.println("Surface : " + sphereDeux.surface());
		System.out.println("X : " + sphereDeux.getOrigineX());
		System.out.println("Y : " + sphereDeux.getOrigineY());
		
		Carre carreUn;
		Carre carreDeux;
		
		carreUn = new Carre();		
		System.out.println("Test Carre 1");
		carreUn.afficher();
		carreUn.setOrigineX(550);
		carreUn.setOrigineY(660);
		carreUn.setLargeur(10);
		carreUn.setLongueur(10);
		carreUn.afficher();
		System.out.println("Cote : "+carreUn.getCote());
		System.out.println("X : " + carreUn.getOrigineX());
		System.out.println("Y : " + carreUn.getOrigineY());
		System.out.println("Long : " + carreUn.getLongueur());
		System.out.println("Larg : " + carreUn.getLargeur());
		System.out.println("Surface : " + carreUn.surface());
		System.out.println("Volume : " + carreUn.volume());
		
		carreDeux = new Carre (100, 200, 10);		
		System.out.println("Test Carre 2");
		carreDeux.afficher();
		carreDeux.setOrigineX(550);
		carreDeux.setOrigineY(660);
		carreDeux.setLargeur(rectDeux.getLargeur()+10);
		carreDeux.setLongueur(rectDeux.getLongueur()+100);
		carreDeux.afficher();
		System.out.println("Cote : "+carreDeux.getCote());
		System.out.println("X : " + carreDeux.getOrigineX());
		System.out.println("Y : " + carreDeux.getOrigineY());
		System.out.println("Surface : " + carreDeux.surface());
		System.out.println("Volume : " + carreDeux.volume());
		System.out.println("Surface : " + carreDeux.surface());
		System.out.println("Volume : " + carreDeux.volume());
		
		// Pour aller plus loin 
		
		FormeGraphique tabFormes[];

		tabFormes = new FormeGraphique [12];

		tabFormes[0] = fgUn; // variable référençant la première FormeGraphique créée
		tabFormes[1] = fgDeux; // variable référençant la deuxième FormeGraphique créée
		tabFormes[2] = rectUn; // variable référençant le premier Rectangle créé
		tabFormes[3] = rectDeux; // variable référençant le deuxième Rectangle créé
		tabFormes[4] = carreUn; // variable référençant le premier Carré créé
		tabFormes[5] = carreDeux;
		tabFormes[6] = cercleUn; 
		tabFormes[7] = cercleDeux;
		tabFormes[8] = cylindreUn; 
		tabFormes[9] = cylindreDeux;
		tabFormes[10] = sphereUn; 
		tabFormes[11] = sphereDeux;
		
		for (int i=0; i<8; i++) {
			System.out.print("Rang "+ i + " : ");
			System.out.print("surface : " + tabFormes[i].surface() + " ");
			System.out.println("volume : " + tabFormes[i].volume() + " ");
			tabFormes[i].afficher();
			System.out.println(tabFormes[i].getClass());
		}	
	}
}
----
======

endif::prof[]

endif::todoprof[]
