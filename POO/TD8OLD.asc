:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 8
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

ifndef::todoprof[]
//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]
endif::todoprof[]


//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 4 : Principes de l'héritage et Héritage en Java. TP7 : Héritage de figures.
| {objtd}	| *Comprendre l'héritage des méthodes - Classes abstraites.*
| {duree}	| *1 séances* de 1.5h.
|======================
// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====

La partie Classe abstraite est dans leur support de cours.

Pour le point classes abstraites : faire la partie de cours en ligne -> Abstract diapos 35-42

Pour les profs :

. Objectif :

*	Comprendre les constructeurs.
* 	Comprendre les appels de méthodes this.m() et super.m().
====

[IMPORTANT]
====
Déroulement a priori :

.. finir le TD 7 si besoin (démos des appels de constructeurs et de méthodes, à voir selon les groupes).
.. TD 8 assez rapide, sauter les constructeurs si pas assez de temps ou le faire avec eux.
.. pour la dernière partie : faire le cours sur les classes abstraites (ppt en pj ou pdf sur moodle).

ATTENTION :

. compléter deux classes : constructeurs -> appel de this(...) ou super(...)
. compléter deux classes : méthodes avec appels de super.methode() et this.methode().
. insister pour limiter les appels super.methode, à ne faire que SI redéfinition locale existe ET on veut la méthode de la superclasse

Différencier les appels :

. super.coutTotal() -> car redéfinie ET on veut celle de la superclasse
. this.coutSuppl() -> car redéfinie ET on veut la locale
. this.getKilometrage() -> non redéfinie => pas de question à se poser (this. ...)
====
endif::todoprof[]

ifndef::todoprof[]

== Domaine d'étude

On va s'intéresser aux mécanismes d'héritage mis en oeuvre dans la hiérarchie de classes suivante. 

Le code de la classe Vehicule vous est donné.

.Diagramme UML des classes mises en oeuvre (sans multiplicités)
[caption="Figure : "]
image:images/td8.1.png[]

== Constructeurs

*Question* : Écrire les constructeurs des classes Voiture et Camion. On écrira un "minimum" de code.

Les valeurs par défaut seront "--" pour les chaînes de caractères, 0 pour les numériques. 
 
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
[source,java]
----
class Voiture extends Vehicule   {
   private double tauxUsure;
   private String marque;

   public Voiture ()   {
       this ("---- -- --", 0);
   }

   public Voiture (String pImmat, int pPuiss)   {
       this (pImmat, pPuiss, "--", 0);
   }
   public Voiture (String pImmat, int pPuiss, String pMarque, 
				double pTauxUsure)    {
       super (pImmat, pPuiss); // Appel constructeur superclasse
       this.marque = pMarque;
       this.tauxUsure = pTauxUsure;
   }
	// ...
}

class Camion extends Vehicule  {
   private int chargeUtile;
   private double ratio ;

   public Camion () {
       this ("---- -- --", 0);
   }

   public Camion (String pImmat, int pPuiss) {
       this (pImmat, pPuiss, 1000, 1.0);
   }

   public Camion (String pImmat, int pPuiss, int pChargeU, 
			double pRatio) {
       super (pImmat, pPuiss); // Appel constructeur superclasse
       this.chargeUtile = pChargeU;
       this.ratio = pRatio;
   }
	//...
}
----
=====
endif::prof[]

== Méthodes coutTotal() et coutSuppl()  

Les spécialistes donnent les spécification suivantes :

.	Classe Vehicule

..	Le coût total d'un Vehicule est de 15% de la distance parcourue fois la consommation.

.	Classe Voiture

..	Le coût total d'une Voiture est l'addition de :

*	coût total d'un véhicule, 
*	un forfait de coût de 0.85 fois la distance parcourue,
*	le coût supplémentaire particulier aux voitures.

..	Le coût supplémentaire particulier aux voitures est la distance parcourue multipliée par le taux d'usure (en pourcentage).

.	Classe Camion

..	Le coût total d'un Camion est l'addition de :

*	coût total d'un véhicule, 
*	un forfait de 1.35 fois la distance parcourue,
*	le coût supplémentaire particulier aux camions.

..	Le coût supplémentaire particulier aux camions est la distance parcourue multipliée par le ratio (en pourcentage) et la charge utile.

On souhaite faire fonctionner le code suivant :

[source,java]
----
Vehicule tabv[] = new Vehicule [4];

tabv[0] = new Voiture ("2222 VV 22", 5);
tabv[1] = new Camion ("2222 CC 22", 12);
tabv[2] = new Voiture ("3333 VV 33", 6, "Opel", 10);
tabv[3] = new Camion ("3333 CC 33", 14, 1000, 2);

for (int i=0 ; i<4 ; i++) {
	tabv[i].afficher();
	System.out.println (tabv[i].coutTotal());
	System.out.println (tabv[i].coutSuppl());
}
----

*Questions* :

.	Écrire les méthodes coutTotal() et coutSuppl() dans les 3 classes.
.	Nous n'avons pas de définition pour le coût supplémentaire particulier aux véhicules. Il n'existe pas. Doit-on déclarer la méthode coutSuppl() dans la classe Vehicule ? Comment l'écrire ?

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
Écrire coutSuppl() dans la classe Vehicule :

.	Nécessaire pour que le code de test marche : System.out.println (tabv[i].coutSuppl());
.	On ne peut "que" mettre 0.

[source,java]
----
class Vehicule
{
	// ...
   public double coutTotal ()  {
       return this.distParcourue * this.consommation * 0.15;
   }
   public double coutSuppl () {
       return 0;
   }
}

class Voiture extends Vehicule
{
	// ...
	public double coutTotal ()  {
		return super.coutTotal() + this.coutSuppl()
				+ this.getKilometrage() * 0.85;
	}
	public double coutSuppl ()  {
		return this.getKilometrage() * this.tauxUsure/100 ;
	}
} // Fin Classe Voiture

class Camion extends Vehicule
{
	// ...

	public double coutTotal ()	{
		return super.coutTotal() + this.coutSuppl()
			+ this.getKilometrage() * 1.35 ;
	}
	public double coutSuppl ()	{
		return this.getKilometrage () * this.ratio / 100 ;
	}
} // Fin Classe Camion
----
=====
endif::prof[]

== Classes abstraites

On peut constater plusieurs éléments :

.	Point de vue client (garagiste, ...) : un objet Vehicule n'existe pas => seules existent vraiment une voiture ou un camion.
.	Point de vue client (garagiste, ...) : on parle des véhicules en général pour signifier un ensemble de voitures et camions (le parc du garage, ...).

.	La classe Vehicule :

..	Point de vue fonctionnel : généralise des attributs et méthodes communs à tous les véhicules (voitures et camions).
..	Point de vue ensembliste : permet de *désigner* "indifféremment" des voitures et des camions.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
Cours en ligne -> Abstract diapos 35-42
=====
endif::prof[]

*Question* :

.	Déclarer la classe Vehicule abstraite.
.	Modifier la déclaration de coutSuppl() dans Vehicule en conséquence.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
[green]*public* [underline green]*abstract* [green]*class Vehicule*

{

// ...

public double coutTotal ()  { return this.distParcourue * this.consommation * 0.15; }

[green]*public* [green underline]*abstract* [green]*double coutSuppl () ;*   [red line-through]*{ return 0; }*
   
}
=====
endif::prof[]

endif::todoprof[]
