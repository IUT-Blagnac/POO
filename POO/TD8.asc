:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 8
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

ifndef::todoprof[]
//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]
endif::todoprof[]


//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 4 : Principes de l'héritage et Héritage en Java. TPs sur héritage
| {objtd}	| *Comprendre l'héritage, l'héritage des méthodes - Classes abstraites - Polymorphisme - Interface.*
| {duree}	| *1 séance* de 1.5h
|======================
// // | {depot}	| -

ifdef::todoprof[]

[IMPORTANT]
.Déroulement
====

25' par partie - présentation cours + exemples. Eventuellement on ne laisse pas chercher trop les exos et on corrige en interactif. Ce TD prépare les TPs à venir

*	Héritage (rapide, vu en cours et en TP) : démos de traces d'exécution
*	Classes abstraites (abordé rapidement en cours, à revoir)
*	Polymorphisme / Interface : CM en ligne à faire.
====


[IMPORTANT]
====

Chaque démo => un projet particulier.

Chaque projet Eclipse contient tout le code nécessaire dans un seul fichier (plus facile à browser).

Tout est tiré du support de cours => classes connues (a priori).

Pour les profs :

. Objectif :

* 	Montrer des traces écran des mécanismes de l'héritage :

**	Transmission des attributs et des méthodes
**	Appel des constructeurs (superclasse et classe courante)
**	Appel des méthodes héritées (super.methode(...) )

. Déroulement a priori :

*	En présentation en mode debug de Eclipse

====

La partie Classe abstraite est dans leur support de cours.

Pour le point classes abstraites : (re)faire rapidement la partie de cours en ligne -> Abstract diapos 35-42

Pour les profs :

. Objectif :

* 	Comprendre les appels de méthodes this.m() et super.m().


[IMPORTANT]
====
ATTENTION :

.	compléter deux classes : constructeurs -> appel de this(...) ou super(...)
.	compléter deux classes : méthodes avec appels de super.methode() et this.methode().
.	insister pour limiter les appels super.methode, à ne faire que SI redéfinition locale existe ET on veut la méthode de la superclasse

Différencier les appels :

.	super.coutTotal() -> car redéfinie ET on veut celle de la superclasse
.	this.coutSuppl() -> car redéfinie ET on veut la locale
.	this.getKilometrage() -> non redéfinie => pas de question à se poser (this. ...)


====

La partie Polymorphisme/Interface : commenter le support de coud (non fait en amphi).

endif::todoprof[]

ifndef::todoprof[]

== Domaine d'étude

On va s'intéresser aux mécanismes d'héritage mis en oeuvre dans la hiérarchie de classes suivante. 

.Diagramme UML des classes mises en oeuvre (sans multiplicités)
[caption="Figure : "]
image:images/td7.1.png[]

Le code correspondant :

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Bien Montrer
=====
.	extends Vehicule dans Voiture
.	extends  Voiture dans MonoSpace  
.	L'appel this  ("",  0,  ""); dans Voiture()
.	L'appel super  (pMarque,  pSerie); dans Voiture(String  pMarque,  int  pSerie,  String  pImmat)
.	L'appel super.afficher(); dans afficher  () de Voiture
=====
endif::prof[]

[source,java]
----
public class  Vehicule extends  Object   // Héritage implicite
{
   // Attributs 
   private  String  marque;
   private  int  noSerie;
   private  int  km;

   // Constructeur
   public  Vehicule  () {
       this ("", 0);   // Appel  de Vehicule (String, int)
   }
   public  Vehicule  (String  pMarque,  int  pSerie) {
       super () ;  // Implicite : Appel de Object()
       this.marque  =  pMarque; 
       this.noSerie  =  pSerie;
       this.km  =  0; // Implicite
   }

   // Méthodes
   public  String  getMarque()  {  return  this.marque;  }
   public  int  getNoSerie()  {  return  this.noSerie;  }
   public  int  getKm()  {  return  this.km;  }

   public  void  afficher  () {
       System.out.println ("Vehicule " + this.marque + " " + this.noSerie);
   }

   public  void  setNoSerie(int  pSerie)  {  this.noSerie  =  pSerie;  }
   public  void  rouler  (int  nbKm)  {  this.km  =  this.km  +  nbKm; }
} // Fin Classe Vehicule



public class  Voiture  extends  Vehicule 
{
   // Attributs 
   private  String  noImmat;
   
   // Constructeurs
   public  Voiture() {
       this  ("",  0,  ""); // Appel  de Voiture (String, int, String)
   }
   
   public  Voiture(String  pMarque,  int  pSerie,  String  pImmat) {
       super  (pMarque,  pSerie); // Appel  de Vehicule (String, int)
       this.noImmat  =  pImmat;
   }
   
   // Méthodes
   public  String  getNumeroImmat  ()  {  return  this.noImmat; }
   public  void  setNumeroImmat  (String pImmat)  { this.noImmat = pImmat; }

   public  void  afficher  () {
       System.out.println  ("Immatriculation "  +  this.noImmat);
       super.afficher();
   }
} // Fin Classe Voiture

public class  MonoSpace  extends  Voiture
{
   public Monospace () {
       super();
   }
   public  void  afficher  () {
       super.afficher();
       System.out.println  ("MonoSpace ");
   }
   public  void  afficher  (int decalage) {
	   int  i;
	   for  (i=0;  i<decalage;  i++)  System.out.print(" ");
	   this.afficher();
   }
} // Fin Classe MonoSpace
----

== Principe de l'héritage

Héritage :

*	« Relation » établie entre classes d’objets.
*	Relatif à la nature des objets.

Principe : mécanisme de transmission des *attributs et des méthodes* de la super-classe VERS sa sous-classe. Pas de transmission des constructeurs.

Exemple : 

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Démonstration
=====
.	Point d'arrêt sur : av = new AutreVehicule ();
.	Mettre en commentaire : i) le extends dans AutreVehicule, ii)  les appels de méthodes dans le main (méthodes de Vehicule).
.	Faire un debug  => Un objet sans attribut.
.	Enlever les commentaires mis ci-dessus.
.	Faire un debug => Un objet 

*	Avec les attributs de Vehicule (hérités).
*	Les méthodes publiques héritées de Vehicule sont applicables.
*	Pas de constructeur déclaré => il existe un constructeur par défaut

**	AutreVehicule ()
**	appelle Vehicule () (vu plus tard)
=====
endif::prof[]

[source,java]
----
public class  Vehicule 
{
   // ... Le code complet
} 

public class  AutreVehicule  extends  Vehicule  {}

public class TestAutreVehicule
{
	public static void main(String[] args)
	{  
		AutreVehicule av;
	
		av = new AutreVehicule (); // Constructeur par défaut créé automatiquement
	   
		av.setNoSerie(10);// setNoSerie() héritée
	                      // => fait partie de l'interface des objets AutreVehicule
		av.rouler (159); // Idem
		av.afficher ();
		System.out.println (av.getNoSerie());
		System.out.println (av.getKm());

	}
}
----


L'objet créé avec +av+ contient bien tous les attributs déclarés dans la classe Vehicule dont hérite AutreVehicule.

Sur l'objet créé avec +av+ on peut appliquer toutes les méthodes de la classe Vehicule dont hérite AutreVehicule.

== Appel des constructeurs

=== Appel du constructeur de la super-classe

Dans une sous-classe :

*	Constructeurs de la super-classe non hérités => problème : comment initialiser la partie des attributs hérités mais inaccessibles (private) ?
*	Solution : les constructeurs de la classe dérivée invoqueront (exécuteront) un constructeur de la classe de base. 

Principes d'appels des constructeurs de la classe parente ou de la classe courante : *Obligatoirement la première ligne du code* :

*	+super(param1, …);+ => appel constructeur de la super-classe correspondant aux paramètres indiqués.
*	+this(param1, …);+ => appel autre constructeur de la classe courante correspondant aux paramètres indiqués.
*	Autre instruction : => appel implicite +super()+. Revient à écrire explicitement :  +super();+

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Démonstration
=====
.	Browser le code 

*	Vehicule : 2 cas super(...) et this(...) ci-dessus.
*	Voiture : 2 cas super(...) et this(...) ci-dessus.
*	MonoSpace : appel explicite constructeur par défaut : pourrait en pas être écrit !

.	Points d'arrêt sur : 

*	1° ligne du main (1° new)
*	Chaque première ligne de tous les constructeurs (super(...) ou this(...))

.	Faire démo des appels de chaque constructeur

*	Sur les new : *faire une "resume" pour sauter au point d'arrêt du constructeur* car le new est interne et n'est pas inspectable (Step into ne marche pas la première fois)
*	Step into sur appels super(...) et this(...) *SAUF* sur Vehicule (car constructeur de Object inaccessible).
=====
endif::prof[]

=== Constructeur synthétisé

Rappel Règle :

.	Si aucun constructeur défini :

*	Il existe un constructeur par défaut créé par java (synthétisé).
*	Ce constructeur synthétisé ne fait rien de particulier mais *appelle* le constructeur par défaut de la super-classe (cf. ci-après).

.	Si au moins un constructeur est défini :

*	Cache le constructeur par défaut synthétisé.
*	Parfois => redéfinir le constructeur par défaut.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Démonstration
=====
.	Différence de code : MonoSpace n'a plus de constructeur =>  constructeur synthétisé.

.	Points d'arrêt sur : 

*	1° ligne du main (1° new)
*	Chaque première ligne de tous les constructeurs (super(...) ou this(...))

.	Faire démo des appels de chaque constructeur

*	Sur le new : *faire une "resume" pour sauter au point d'arrêt du constructeur* car le new est interne et n'est pas inspectable (Step into ne marche pas la première fois)
*	Step into sur appels super(...) et this(...) *SAUF* sur Vehicule (car constructeur de Object inaccessible).
=====
endif::prof[]

== Appel des méthodes héritées

Définition : La *redéfinition* de méthode est le fait de redéfinir le corps d'une méthode héritée dans une sous-classe.

Règles : une définition de méthode est une redéfinition de méthode ssi

*	Elle est héritée.
*	Elle porte le même identificateur. 
*	Elle comporte les mêmes paramètres (en nombre, type et ordre). 
*	Elle a le même type de retour. 

Une méthode redéfinie *cache* la méthode héritée à tous les clients.

Une méthode héritée peut :

*	Définir un comportement complètement nouveau => écrire le code.
*	Définir un comportement réutilisant le comportement hérité.*	Compléter le comportement hérité :

Accès au comportement hérité : appel (invocation) du corps de la méthode héritée :
*	+super . idMethode (…);+
*	Interprété comme « exécuter le code de la méthode idMethode() telle qu’elle est définie dans la superclasse ».

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Démonstration
=====
Le code est le même mais réécrit avec afficher() en début de classe pour se repérer dans quelle classe on est ...

.	Points d'arrêt sur : 

*	ms.afficher();

.	Faire démo avec Step in à chaque ligne avec démo des appels à afficher() avec les accès aux afficher() des superclasses.
=====
endif::prof[]

[NOTE]
=====
Remarque : utiliser +this.methode(...);+ ou +super.methode(...)+; ?

*	A priori +this.methode(...)+ (majorité des cas)
*	Sauf cas particulier : +super.methode (...)+ lorsque
**	methode(...) redéfinie dans classe courante
**	*ET on veut le comportement de la classe parente* et pas la méthode locale 

But d'utiliser +this.methode(...)+ : ne pas "cacher" les redéfinitions ultérieures car +super.methode (...)+  les bloquerait ...
=====

== Classes abstraites

On va s'intéresser aux mécanismes d'héritage mis en oeuvre dans la hiérarchie de classes suivante. 

Le code de la classe Vehicule vous est donné.

.Diagramme UML des classes mises en oeuvre (sans multiplicités)
[caption="Figure : "]
image:images/td8.1.png[]

////////////////////
== Constructeurs

*Question* : Écrire les constructeurs des classes Voiture et Camion. On écrira un "minimum" de code.

Les valeurs par défaut seront "--" pour les chaînes de caractères, 0 pour les numériques. 
 
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
[source,java]
----
class Voiture extends Vehicule   {
   private double tauxUsure;
   private String marque;

   public Voiture ()   {
       this ("---- -- --", 0);
   }

   public Voiture (String pImmat, int pPuiss)   {
       this (pImmat, pPuiss, "--", 0);
   }
   public Voiture (String pImmat, int pPuiss, String pMarque, 
				double pTauxUsure)    {
       super (pImmat, pPuiss); // Appel constructeur superclasse
       this.marque = pMarque;
       this.tauxUsure = pTauxUsure;
   }
	// ...
}

class Camion extends Vehicule  {
   private int chargeUtile;
   private double ratio ;

   public Camion () {
       this ("---- -- --", 0);
   }

   public Camion (String pImmat, int pPuiss) {
       this (pImmat, pPuiss, 1000, 1.0);
   }

   public Camion (String pImmat, int pPuiss, int pChargeU, 
			double pRatio) {
       super (pImmat, pPuiss); // Appel constructeur superclasse
       this.chargeUtile = pChargeU;
       this.ratio = pRatio;
   }
	//...
}
----
=====
endif::prof[]
////////////////////

=== Méthodes coutTotal() et coutSuppl()  

Les spécialistes donnent les spécification suivantes :

.	Classe Vehicule

..	Le coût total d'un Vehicule est de 15% de la distance parcourue fois la consommation.

.	Classe Voiture

..	Le coût total d'une Voiture est l'addition de :

*	coût total d'un véhicule, 
*	un forfait de coût de 0.85 fois la distance parcourue,
*	le coût supplémentaire particulier aux voitures.

..	Le coût supplémentaire particulier aux voitures est la distance parcourue multipliée par le taux d'usure (en pourcentage).

.	Classe Camion

..	Le coût total d'un Camion est l'addition de :

*	coût total d'un véhicule, 
*	un forfait de 1.35 fois la distance parcourue,
*	le coût supplémentaire particulier aux camions.

..	Le coût supplémentaire particulier aux camions est la distance parcourue multipliée par le ratio (en pourcentage) et la charge utile.

On souhaite faire fonctionner le code suivant :

[source,java]
----
Vehicule tabv[] = new Vehicule [4];

tabv[0] = new Voiture ("2222 VV 22", 5);
tabv[1] = new Camion ("2222 CC 22", 12);
tabv[2] = new Voiture ("3333 VV 33", 6, "Opel", 10);
tabv[3] = new Camion ("3333 CC 33", 14, 1000, 2);

for (int i=0 ; i<4 ; i++) {
	tabv[i].afficher();
	System.out.println (tabv[i].coutTotal());
	System.out.println (tabv[i].coutSuppl());
}
----

*Questions* :

.	Écrire les méthodes coutTotal() et coutSuppl() dans les 3 classes.
.	Nous n'avons pas de définition pour le coût supplémentaire particulier aux véhicules. Il n'existe pas. Doit-on déclarer la méthode coutSuppl() dans la classe Vehicule ? Comment l'écrire ?

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
Écrire coutSuppl() dans la classe Vehicule :

.	Nécessaire pour que le code de test marche : System.out.println (tabv[i].coutSuppl());
.	On ne peut "que" mettre 0.

[source,java]
----
class Vehicule
{
	// ...
   public double coutTotal ()  {
       return this.distParcourue * this.consommation * 0.15;
   }
   public double coutSuppl () {
       return 0;
   }
}

class Voiture extends Vehicule
{
	// ...
	public double coutTotal ()  {
		return super.coutTotal() + this.coutSuppl()
				+ this.getKilometrage() * 0.85;
	}
	public double coutSuppl ()  {
		return this.getKilometrage() * this.tauxUsure/100 ;
	}
} // Fin Classe Voiture

class Camion extends Vehicule
{
	// ...

	public double coutTotal ()	{
		return super.coutTotal() + this.coutSuppl()
			+ this.getKilometrage() * 1.35 ;
	}
	public double coutSuppl ()	{
		return this.getKilometrage () * this.ratio / 100 ;
	}
} // Fin Classe Camion
----
=====
endif::prof[]

=== Déclaration d'une classes abstraite

On peut constater plusieurs éléments :

.	Point de vue client (garagiste, ...) : un objet Vehicule n'existe pas => seules existent vraiment une voiture ou un camion.
.	Point de vue client (garagiste, ...) : on parle des véhicules en général pour signifier un ensemble de voitures et camions (le parc du garage, ...).

.	La classe Vehicule :

..	Point de vue fonctionnel : généralise des attributs et méthodes communs à tous les véhicules (voitures et camions).
..	Point de vue ensembliste : permet de *désigner* "indifféremment" des voitures et des camions.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
Cours en ligne -> Abstract diapos 35-42
=====
endif::prof[]

*Question* :

.	Déclarer la classe Vehicule abstraite.
.	Modifier la déclaration de coutSuppl() dans Vehicule en conséquence.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
=====
[green]*public* [underline green]*abstract* [green]*class Vehicule*

{

// ...

public double coutTotal ()  { return this.distParcourue * this.consommation * 0.15; }

[green]*public* [green underline]*abstract* [green]*double coutSuppl () ;*   [red line-through]*{ return 0; }*
   
}
=====
endif::prof[]

== Polymorphisme et interface

Voir support de cours.

endif::todoprof[]
