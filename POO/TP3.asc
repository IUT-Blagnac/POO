:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 3
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true


:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| CM1 sur les objets, TD2 sur la manipulation d'objets, TP2 classes +Compte+ et +AgenceBancaire+.
| {objtd}	| Utiliser des objets - Lire une documentation.
| {duree}	| *1 séances* de 1,5h sur machine.
| {depot}	| Code source à déposer : application de gestion d'AgenceBancaire.
|======================
====

ifdef::todoprof[]

[IMPORTANT]
====
Pour les profs :

- But du TP : Manipuler des objets sans disposer du code source. Lire une documentation (param, return, throws, ...).
- Idée de déroulement :

* A priori en une séance.

- Les try catch ont été vus en S1. Les aider sans doute en leur donnant la structure de base.
+
[source,java]
----
	try {
		cUn.deposer(1);
		cDeux.deposer(1000);
	} catch (CompteException e) {
		System.out.println(e); ou System.out.println(e.getMesage()); 
	}
----
+

		
Au départ :

- Attention au dézippage du fichier au bon endroit -> dans le répertoire de travail.
- Faire avec eux le préambule pour installer les fichiers et démarrer le premier fichier .java à construire.
- Il faut obtenir l'arborescence :
* Rép de travail
** *ClasseEssaiCompte.java*
** tps
*** banque
**** Compte.class
**** AgenceBancaire.class
**** exception
***** CompteException.class
***** ...
*** jeux
**** Devinette.class
**** ...


====
endif::todoprof[]

ifndef::todoprof[]

[[Preambule]]
== Préambule

Récupérer les pakages des classes à utiliser :

. Depuis webetud, récupérer le fichier packageTPs.zip du tp.
. Le dézipper dans le répertoire où vous comptez travailler (répertoire de travail).
. Ce zip contient les packages de travail pour les tps. Il comporte en fait plusieurs packages de classes : +tps.jeux+, +tps.jeux.exception+, +tps.banque+, ...
** Regarder le contenu du répertoire (des fichiers .class structurés en répertoires).

. Pour utiliser ces classes dans vos programmes: 
+
+import  tps.-_nomPackage[.nomPackage ...]_._NomDeClasse_;+. Exemple : +import  tps.jeux.Devinette;+

Pour chaque exercice, créer un programme Java +ClasseEssaiXXXXX.java+ comportant une méthode main(). "XXXXX" sera le nom de la classe testée à chaque exercice (Compte, ...).

== Programme utilisateur pour une agence bancaire

=== Objectif

L'objectif est d'écrire un programme permettant de gérer les comptes d'une +AgenceBancaire+. L'application permettra :

* de créer/supprimer des objets Compte(s) de l'AgenceBancaire,
* de voir un compte de l'AgenceBancaire, de voir les comptes d'un propriétaire de l'AgenceBancaire,
* de débiter/créditer les compte(s) de l'AgenceBancaire,
* de lister tous les comptes de l'AgenceBancaire,
* de quitter l'application.

Pour commencer, vous pouvez reprendre le début de code suivant contenant :

* la méthode main(),
* une méthode pour afficher le menu de l'application,
* une méthode de "temporisation" attendant la frappe de n'importe quel caractère.

[source,java]
----
import java.util.Locale;
import java.util.Scanner;

import tps.banque.Compte;
import tps.banque.AgenceBancaire;
import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;
import tps.banque.exception.CompteException;

public class ClasseEssaiAgenceBancaire {
	
	/**
	 * Affichage du menu de l'application
	 * @param ag	AgenceBancaire pour récupérer le nom et la localisation
	 */
	public static void afficherMenu(AgenceBancaire ag) {
		System.out.println("Menu de " + ag.getNomAgence() + " (" + ag.getLocAgence() + ")");
		System.out.println("c - Créer un nouveau compte dans l'agence");
		System.out.println("s - Supprimer un compte de l'agence (par son numéro)");
		System.out.println("l - Liste des comptes de l'agence");
		System.out.println("v - Voir un compte (par son numéro)");
		System.out.println("p - voir les comptes d'un Propriétaire (par son nom)");
		System.out.println("d - Déposer de l'argent sur un compte");
		System.out.println("r - Retirer de l'argent sur un compte");
		System.out.println("q - Quitter");
		System.out.print("Choix -> ");
	}
	
	/**
	 * Temporisation : Affiche un message et attend la frappe de n'importe quel caractère.
	 */
	public static void tempo () {
		Scanner lect ;
		String s;
		
		lect = new Scanner (System.in );
		
		System.out.print("Tapper un car + return pour continuer ... ");
		s = lect.next(); // Inutile à stocker mais ... 
	}

	public static void main(String argv[]) {
		
		String choix;

		boolean continuer ;
		Scanner lect;
		AgenceBancaire monAg ;
		
		lect = new Scanner ( System.in );
		lect.useLocale(Locale.US);
		
		monAg = new AgenceBancaire("Caisse Ep", "Pibrac");
		
		continuer = true;
		while (continuer) {
			ClasseEssaiAgenceBancaire.afficherMenu(monAg);
			choix = lect.next();
			choix = choix.toLowerCase();
			switch (choix) {
				case "q" :
					System.out.println("ByeBye");
					ClasseEssaiAgenceBancaire.tempo();
					continuer = false;
					break;
				
				// A CONTINUER ICI
				
				default :
					System.out.println("Erreur de saisie ...");
					ClasseEssaiAgenceBancaire.tempo();
					break;
			}
		}
		
	}

}
----

=== Développement de l'application

. A vous maintenant de rajouter et traiter les +case+ qui manquent. Traiter une par une dans l'ordre chaque option du menu et tester à chaque fois.
. Pour l'option  +"p - voir les comptes d'un Propriétaire (par son nom)"+, programmer une méthode statique :
+
+public static void comptesDUnPropretaire (AgenceBancaire ag, String nomProprietaire)+
+
réalisant le traitement associé.

. Pour l'option  +"d - Déposer de l'argent sur un compte"+, programmer une méthode statique :
+
+public static void deposerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant)+
+
réalisant le traitement associé.

. Pour l'option  +"r - Retirer de l'argent sur un compte"+, programmer une méthode statique :
+
+public static void retirerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant)+
+
réalisant le traitement associé.

[NOTE]
======
Concernant les entrées sorties : voir aide sur le serveur webetud -> classe Scanner (Rubrique "Nécessaire pour TPs").
======


Exemple d'exécution possible :

-----
Menu de Caisse Ep (Pibrac)
c - Créer un nouveau compte dans l'agence
s - Supprimer un compte de l'agence (par son numéro)
l - Liste des comptes de l'agence
v - Voir un compte (par son numéro)
p - voir les comptes d'un Propriétaire (par son nom)
d - Déposer de l'argent sur un compte
r - Retirer de l'argent sur un compte
q - Quitter
Choix -> c

Num compte -> 1212
Propriétaire -> Prop12

Ajout effectué
Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> c

Num compte -> 1212
Propriétaire -> PropAutre

Numéro de compte existant
Erreur ajout Compte déja existant (1212) dans l'agence Caisse Ep(Pibrac)

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> d

Num compte -> 1212
Montant à déposer -> 456

Solde avant dépôt: 0.0
Montant déposé, solde : 456.0

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> d

Num compte -> 1212
Montant à déposer -> -89

Solde avant dépôt: 456.0
Erreur de dépot, solde inchangé : 456.0
Erreur de somme négative lors d'un dépot sur 1212

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> s

Num compte -> 4545

Numéro de compte inexistant
Erreur suppression Compte inexistant (4545) dans l'agence Caisse Ep(Pibrac)

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
Choix -> s

Num compte -> 1212
Suppression effectuée

Tapper un car + return pour continuer ... .

Menu de Caisse Ep (Pibrac)
...
-----

ifdef::prof[]

== Éléments de Solution

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution AgenceBancaire (application)
======
[source,java]
----
import java.util.Locale;
import java.util.Scanner;

import tps.banque.AgenceBancaire;
import tps.banque.Compte;
import tps.banque.exception.ABCompteDejaExistantException;
import tps.banque.exception.ABCompteInexistantException;
import tps.banque.exception.ABCompteNullException;
import tps.banque.exception.CompteException;

public class ClasseApplicationAgenceBancaire {
	
	/**
	 * Affichage du menu de l'application
	 * @param ag	AgenceBancaire pour récupérer le nom et la localisation
	 */
	public static void afficherMenu(AgenceBancaire ag) {
		System.out.println("Menu de " + ag.getNomAgence() + " (" + ag.getLocAgence() + ")");
		System.out.println("c - Créer un nouveau compte dans l'agence");
		System.out.println("s - Supprimer un compte de l'agence (par son numéro)");
		System.out.println("l - Liste des comptes de l'agence");
		System.out.println("v - Voir un compte (par son numéro)");
		System.out.println("p - voir les comptes d'un Propriétaire (par son nom)");
		System.out.println("d - Déposer de l'argent sur un compte");
		System.out.println("r - Retirer de l'argent sur un compte");
		System.out.println("q - Quitter");
		System.out.print("Choix -> ");
	}
	
	/**
	 * Temporisation : Affiche un message et attend la frappe de n'importe quel caractère.
	 */
	public static void tempo () {
		Scanner lect ;
		String s;
		
		lect = new Scanner (System.in );
		
		System.out.print("Tapper un car + return pour continuer ... ");
		s = lect.next(); // Inutile à stocker mais ... 
	}

	public static void main(String argv[]) {
		
		String choix;

		boolean continuer ;
		Scanner lect;
		AgenceBancaire monAg ;
		
		String nom, numero;		
		Compte c;
		double montant;
		
		lect = new Scanner ( System.in );
		lect.useLocale(Locale.US);
		
		monAg = new AgenceBancaire("Caisse Ep", "Pibrac");
		
		continuer = true;
		while (continuer) {
			ClasseApplicationAgenceBancaire.afficherMenu(monAg);
			choix = lect.next();
			choix = choix.toLowerCase();
			switch (choix) {
				case "q" :
					System.out.println("ByeBye");
					ClasseApplicationAgenceBancaire.tempo();
					continuer = false;
					break;
				case "c" :
					System.out.print("Num compte -> ");
					numero = lect.next();
					System.out.print("Propriétaire -> ");
					nom = lect.next();
					c = new Compte(numero, nom);
					try {
						monAg.addCompte(c);
						System.out.println("Ajout effectué\n");
					} catch (ABCompteNullException e) {
						System.out.println("Numéro de compte existant");
						System.out.println(e.getMessage());
					}
					catch (ABCompteDejaExistantException e) {
						System.out.println("Numéro de compte existant");
						System.out.println(e.getMessage());
					}
					ClasseApplicationAgenceBancaire.tempo();
					break;
				case "s" :
					System.out.print("Num compte -> ");
					numero = lect.next();
					try {
						monAg.removeCompte(numero);
						System.out.println("Suppression effectuée\n");
					} catch (ABCompteInexistantException e) {
						System.out.println("Numéro de compte inexistant");
						System.out.println(e.getMessage());
					}
					ClasseApplicationAgenceBancaire.tempo();
					break;
				case "l" :
					monAg.afficher();
					ClasseApplicationAgenceBancaire.tempo();
					break;	
				case "v" :
					System.out.print("Num compte -> ");
					numero = lect.next();
					c = monAg.getCompte(numero);
					if (c==null) {
						System.out.println("Compte inexistant ...");
					} else {
						c.afficher();
					}
					ClasseApplicationAgenceBancaire.tempo();
					break;
				case "p" :
					System.out.print("Propriétaire -> ");
					nom = lect.next();
					ClasseApplicationAgenceBancaire.comptesDUnPropretaire (monAg, nom);
					ClasseApplicationAgenceBancaire.tempo();
					break;		
				case "d" :
					System.out.print("Num compte -> ");
					numero = lect.next();
					System.out.print("Montant à déposer -> ");
					montant = lect.nextDouble();
					ClasseApplicationAgenceBancaire.deposerSurUnCompte(monAg, numero, montant);
					ClasseApplicationAgenceBancaire.tempo();
					break;
				case "r" :
					System.out.print("Num compte -> ");
					numero = lect.next();
					System.out.print("Montant à retirer -> ");
					montant = lect.nextDouble();
					ClasseApplicationAgenceBancaire.retirerSurUnCompte(monAg, numero, montant);
					ClasseApplicationAgenceBancaire.tempo();
					break;
				default :
					System.out.println("Erreur de saisie ...");
					ClasseApplicationAgenceBancaire.tempo();
					break;
			}
		}
		
	}
	
	public static void comptesDUnPropretaire (AgenceBancaire ag, String nomProprietaire) {
		Compte []  t; 
		
		t = ag.getComptesDe(nomProprietaire);
		if (t.length == 0) {
			System.out.println("pas de compte à ce nom ...");
		} else {
			System.out.println("  " + t.length + " comptes pour " + nomProprietaire);
			for (int i=0; i<t.length; i++)
				t[i].afficher();
		}
	}

	public static void deposerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant) {
		Compte c;
		
		c = ag.getCompte(numeroCompte);
		if (c==null) {
			System.out.println("Compte inexistant ...");
		} else {
			System.out.println("Solde avant dépôt: "+c.soldeCompte());
			try {
				c.deposer(montant);
				System.out.println("Montant déposé, solde : "+c.soldeCompte());
			} catch (CompteException e) {
				System.out.println("Erreur de dépot, solde inchangé : " + c.soldeCompte());
				System.out.println(e.getMessage());
			}
		}
	}
	
	public static void retirerSurUnCompte (AgenceBancaire ag, String numeroCompte, double montant) {
		Compte c;
		
		c = ag.getCompte(numeroCompte);
		if (c==null) {
			System.out.println("Compte inexistant ...");
		} else {
			System.out.println("Solde avant retrait : " + c.soldeCompte());
			try {
				c.retirer(montant);
				System.out.println("Montant retiré, solde : "+c.soldeCompte());
			} catch (CompteException e) {
				System.out.println("Erreur de dépot, solde inchangé : " + c.soldeCompte());
				System.out.println(e.getMessage());
			}
		}

	}
}

----
======

endif::prof[]

endif::todoprof[]
