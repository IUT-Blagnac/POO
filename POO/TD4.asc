:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TD 4
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 1 : approche objet. TD3 classes objets -encapsulation.
| {objtd}	| *Ecrire une classe avec tableaux dynamiques - Encapsulation*.
| {duree}	| *1 séance* de 1,5h
|======================

// // | {depot}	| -

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

. Objectif :

* TODO

. Déroulement a priori :

TODO
_
* 15' pour lire un peu la doc ou expliquer et comprendre
* 30' : V1 sur feuille pré-remplie
** Correction possible au tableau
* 20' : V2 sur feuille pré-remplie auparavant (correctif en couleur)
* 15' : Intérêts encapsulation.
_

====
endif::todoprof[]

ifndef::todoprof[]

== Principes de stockage de données en mémoire

Pour stocker des données, ce qui est donné comme disponible au programmeur en Java est :

. les types de base,
. le type tableau d'éléments d'un type donné :
. le type "classe/structure" : des objets en mémoire contenant des attributs

C'est tout ...

Pour stocker en mémoire "plusieurs" données, disons un "ensemble"/"suite"/"séquence" de données, il existe deux structures de programmation de base :

. le tableau,
. les structures chaînée (vu plus tard).

Il faut ensuite construire toutes les structures de données que l'on souhaite : pile, files, listes, ... Chacune donne lieu à un ou plusieurs types qui donnent une implémentation algorithmique basée sur les structures mémoires décrites ci-dessus.


A STRUCTURER :

Structures de données :
Ensemble d'informations organisées
Organisation de ces informations
Ensemble d'opérations sur ces informations

Exemples: pile, files, listes, ensembles, … 

Chacune donne lieu à un ou plusieurs types 
données en mémoire
implémentation algorithmique 
2 éléments fondamentaux :
espace mémoire - temps exécution/accès

Séparation : 
Structure de donnée <> Mise en oeuvre



But du TD : "tableaux dynamiques" ou "comment changer la taille d'un tableau sans perdre les éléments". Implémenter une pile avec un tableau dynamique.

== Classe à développer : Pile

La pile :

* Structure de type LIFO (Last In, First Out).
* Dernier élément « entré » dans la pile sera le premier « sorti ». 

L'implantation proposée ici consiste à changer le tableau de stockage à chaque modification de la pile (Le type Pile Pile à déjà été implémenté sous forme d'un tableau de taille fixe, 100 éléments par exemple).

[cols="3,10", options="header"]
|=======
| Diagramme UML complet de la classe Pile | Méthodes
| image:images/classePile.png[] |
Les méthodes :

* +Pile()+ : Constructeur par défaut qui construit une pile vide (sans éléments).

* +boolean estVide ()+ : retourne true si la pile est vide, false sinon.

* +String sommet ()+ : donne accès au sommet de la pile, l'élément en "haut" de la pile (le dernier empilé).

=> Précondition : sommet() valide ssi pilevide() == false. Lève une exception PileException si non respecté.

* +void empiler (String elt)+ : permet d'ajouter un élément en "haut" de la pile.

* +void depiler ()+ : enlève l'élément en "haut" de la pile.

=> Précondition : depiler() valide ssi pilevide() == false. Lève une exception PileException si non respecté.
|=======

NB : noter que dans certains cas (livres, sites web, etc.), l'en-tête de depiler() pourrait être +*String* depiler ()+, signifiant que depiler() pourrait ET enlever le sommet de la pile ET renvoyer la valeur de ce dernier.

== Principe de tableaux dynamiques

Un problème de fond des tableaux :

* ils sont créés au run-time.
* une fois créés : la taille ne peut pas être modifiée.

=== Exercice : comment "agrandir/rétrécir" un tableau ?

Question : Soit un tableau rempli de longueur n, dont la référence est stockée dans la variable +tabCourant+ : 
+
Comment faire "évoluer" la taille du tableau rempli, par exemple l'agrandir (tabCourant donnera accès à un tableau "plus grand"). 
+
Rappel : un tableau se manipule au travers de sa référence.

Réponse :

 .
 .
 .
 . 

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse
======

. Créer un nouveau tableau plus grand : +nouvTab = new ... [...]+
. Copier les valeurs de l'ancien tableau (for).
. Conserver la nouvelle référence de tableau : +tabCourant = nouvTab;+
======
endif::prof[]

=== Exercice : le faire ...
 
 Dans le programme suivant, indiquer le code nécessaire à ajouter pour agrandir le tableau référencé par tab

[source, java]
-----
int tabCourant[], i, rep, nbValSuppl;
tabCourant = new int [5];
for (i=0;i< tabCourant.length; i++) {
	tabCourant[i] = lect.nextInt();  // <1>
}

System.out.println("   Nb Valeurs en plus ? : -> ");
nbValSuppl = lect.nextInt();
// Todo









for (i=5;i< tabCourant.length; i++) {
	tabCourant[i] = lect.nextInt();   // <2>
}
for (i=0;i< tabCourant.length; i++) {
	System.out.println(tabCourant[i]); // Affichera les 5 valeurs saisies au départ <1> + les valeurs ajoutées en // <2>
}
-----

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Réponse
======
[source, java]
-----
int[] nouvTab = new int [tab.length+nbValSuppl];
for (i=0;i< tab.length; i++) {
	nouvTab[i] = tab[i];
}
tab = nouvTab;
-----
======
endif::prof[]

////////////////////////////////////
// Source code
public class CrashTest {
	public static void main(String[] args) {
		Scanner lect;
		lect = new Scanner ( System.in );
		lect.useLocale(Locale.US);
		
		int tabCourant[], i, rep, nbValSuppl;
		tabCourant = new int [5];
		for (i=0;i< tabCourant.length; i++) {
			tabCourant[i] = lect.nextInt();  // <1>
		}
		
		System.out.println("   Nb Valeurs en plus ? : -> ");
		nbValSuppl = lect.nextInt();
		// Todo
		
		int[] nouvTab = new int [tabCourant.length+nbValSuppl];
		for (i=0;i< tabCourant.length; i++) {
			nouvTab[i] = tabCourant[i];
		}
		tabCourant = nouvTab;

		for (i=5;i< tabCourant.length; i++) {
			tabCourant[i] = lect.nextInt();   // <2>
		}
		for (i=0;i< tabCourant.length; i++) {
			System.out.println(tabCourant[i]); // Affichera les 5 valeurs saisies au départ <1> + les valeurs ajoutées en // <2>
		}
	}
}
////////////////////////////////////

TODO : représentation mémoire av/après à faire :

== Pile avec tableau dynamique

On souhaite sur ce principe définir une classe Pile dont l'implémentation est un tableau "dynamique" de la taille exacte du nombre d'éléments contenus dans la Pile.

=== Implémentation mémoire

Donner l'implémentation d'une pile (on représentera les String directement par leur valeur littérale "xxx"):

. Avec un élément.
. Après empilement d'un nouvel élément
. Après empilement d'un nouvel élément
. Après dépilement d'un élément
. Après dépilement d'un élément
. Après dépilement d'un élément

TODO : représentation mémoire av/après à faire :

=== Codage

Écrire les méthodes de la classe Pile implémentée par un tableau "dynamique" de la taille exacte du nombre d'éléments contenus dans la Pile.

En cas d'appel des méthodes hors préconditions, les méthodes lèveront une exception de type +PileException+.

ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
[source, java]
-----
public class Pile {
	private String[] values;
	
	public Pile() {
		 this.values = new String[0];
	}
	public boolean estVide () {
		return this.values.length == 0 ;
	}
	public String sommet () throws PileException {
		if (this.estVide()) {
			throw new PileException();
		}
		return this.values[this.values.length-1];
	}

	public void empiler (String elt) {
		String[] nouvTab;
		int i;
		nouvTab = new String[this.values.length + 1];
		for (i=0; i<this.values.length; i++) {
			nouvTab[i] = this.values[i];
		}
		nouvTab[nouvTab.length-1] = elt;
		this.values = nouvTab;
	}

	public void depiler () throws PileException {
		if (this.estVide()) {
			throw new PileException();
		}
		String[] nouvTab;
		int i;
		nouvTab = new String[this.values.length - 1];
		for (i=0; i<this.values.length-1; i++) {
			nouvTab[i] = this.values[i];
		}
		this.values = nouvTab;
	}

}

class PileException extends Exception {}
-----
======
endif::prof[]

endif::todoprof[]

