:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 4
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true


:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: link:http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:al: alChaines

:TPEclipse: TP 1 - Debug Eclipse

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Cours 2 : ArrayList<E>, Cours 1 : objets.
| {objtd}	| Utiliser des objets - Lire une documentation. ArrayList<E>
| {duree}	| *1 séance* de 1,5h sur machine.
| {depot}	| Code source à déposer : essais réalisés.
|======================
====


ifdef::todoprof[]


[IMPORTANT]
====
Pour les profs :

* But du TP : Utiliser ArrayList<E>.

Les ArrayList<E> génériques ont été vues en cours. cf. support de cours en ligne.

====

[IMPORTANT]
====
Reprendre les principes de l'ArrayList (support de cours : constructeur, méthodes, exemple) 

Faire un schéma d'une ArrayList en tant "qu'objet" du genre :

image:images/tp4-Exemple-Rep-Mem-ArrayList.png[]
====


[IMPORTANT]
====
Au départ :

* Ne pas rater le +import java.util.ArrayList;+ ou +import java.util.*;+ MAIS pas +import java.util.ArrayList<E>;+

* Les aider sur la déclaration et la création de la variable
** Faire 2 lignes
*** ArrayList <String> alChaines;
*** alChaines = new ArrayList<String> ();

* Les aider pour les premiers ajouts si besoin.

Sera peut être un peu long mais il faut avancer...

A priori ArrayList<String> doit passer. + Compte.

*Éventuellement si long : leur faire sauter la partie Eclipse et la faire à l'écran avec eux en fin de TP.*

====
endif::todoprof[]

ifndef::todoprof[]

== Test ArrayList<E> : utiliser une ArrayList<String>

Nous allons tester la classe ArrayList<E> : nous allons créer une ArrayList d’objets String.

[NOTE]
======
La documentation de la classe ArrayList est accessible depuis {docjava} et se trouve ici : {docjavaArrayList}.
======

Pour démarrer : créer un nouveau programme java :

.	Lancer Scite.
.	Créer un classe, par exemple +TP4Exo1+.
.	Enregistrer le fichier avec le bon nom de fichier.
.	Ajouter la méthode main().
.	Ca doit compiler (afficher "Hello World" pour tester) ...

En parallèle de la lecture de la documentation et/ou du support de cours, on testera les différentes méthodes de la classe ArrayList<E> : 

.	Déclarer une variable +{al}+ de type ArrayList de String.
+
NB : la classe ArrayList appartient au package +java.util+.

.	Créer avec +{al}+ une ArrayList de String avec le constructeur par défaut. 
.	Faire quelques ajouts de chaînes de caractères en fin de +{al}+ avec la méthode +add()+ (cf. support de cours).
.	Afficher la taille (ou nombre d’éléments contenus) de +{al}+ (cf. support de cours).
.	Par une boucle : afficher les éléments de +{al}+ (cf. support de cours, méthodes +get(), size()+).
.	Faire quelques ajouts en fin, au début, au milieu. Regarder les méthodes et surcharges associées de +add()+ (cf. support de cours). Après chaque ajout, afficher la taille de +{al}+. 
.	Par une boucle : afficher les éléments de +{al}+. Afficher la taille de +{al}+.
.	Faire quelques ajouts de plus par un for (15-25) (tester +{al}.add("chaine "+i)+).
.	Afficher les éléments de +{al}+ et sa taille.
.	Modifier quelques éléments contenus dans +{al}+ : le premier, le dernier, quelques uns au milieu. Ne pas faire retrait/ajout, mais utiliser la méthode +set()+ (cf. support de cours).
.	Afficher les éléments de +{al}+ et sa taille.
.	Tester la méthode +toString()+ sur +{al}+.
.	Faire quelques suppressions : premier élément, dernier élément, au milieu. (cf. support de cours). Après chaque suppression, afficher la taille (nombre d’éléments contenus) de +{al}+.
.	Vider +{al}+ en une instruction.
.	Afficher les éléments de +{al}+ et sa taille.
.	Étudier la documentation de la méthode +trimToSize()+. A quoi sert-elle ? (Eventuellement étudier la méthode ... et afficher son résultat avant ET après +trimToSize()+).

== Manipuler une ArrayList<Compte>

Reprendre le programme suivant ET récupérer les packages du TP précédent (tps.banque, ...).

Le programme principal :

* remplit une ArrayList<Compte>,
* affiche les comptes
* réalise en boucle :
** demande un nom de propriétaire
** appelle la méthode +getComptesDe()+ pour retrouver les comptes de ce propriétaire,
** affiche les comptes de ce propriétaire.

*A faire : écrire le code de la méthode :* 

 public static ArrayList<Compte> getComptesDe (String pfNomProprietaire, ArrayList<Compte> pfALComptes)

Son rôle est de renvoyer une ArrayList de Compte contenant les comptes de +pfALComptes+ dont le nom de propriétaire est +pfNomProprietaire+.

Exemple d'exécution :
----
Les comptes existants
  9 comptes
    Num. : 01010101 - Prop. : Lepoisson-Benoit - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 02020202 - Prop. : Tabaniol-Alphonse - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 03030303 - Prop. : Aidelaine-Gilles - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 04040404 - Prop. : Sanfraper-André - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 05050505 - Prop. : Tabaniol-Alphonse - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 06060606 - Prop. : Bondeparme-Jean - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 07070707 - Prop. : Sailair-Jacques - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 08080808 - Prop. : Saidimanche-Damien - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 09090909 - Prop. : Tabaniol-Alphonse - Debit 0.0 E / Credit 0.0 E / NbOps 0
Nom de propriétaire -> Lepoisson-Benoit
Ses comptes : 
  1 comptes
    Num. : 01010101 - Prop. : Lepoisson-Benoit - Debit 0.0 E / Credit 0.0 E / NbOps 0
Nom de propriétaire -> Tabaniol-Alphonse
Ses comptes : 
  3 comptes
    Num. : 02020202 - Prop. : Tabaniol-Alphonse - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 05050505 - Prop. : Tabaniol-Alphonse - Debit 0.0 E / Credit 0.0 E / NbOps 0
    Num. : 09090909 - Prop. : Tabaniol-Alphonse - Debit 0.0 E / Credit 0.0 E / NbOps 0
Nom de propriétaire -> 
----

[source,java]
----
import java.util.ArrayList;
import java.util.Scanner;
import tps.banque.Compte;

public class ClasseEssaiArrayListCompte {
	
	public static Compte[] tabDeComptesTests = {
		new Compte ("01010101", "Lepoisson-Benoit"),
		new Compte ("02020202", "Tabaniol-Alphonse"),
		new Compte ("03030303", "Aidelaine-Gilles"),
		new Compte ("04040404", "Sanfraper-André"),
		new Compte ("05050505", "Tabaniol-Alphonse"),
		new Compte ("06060606", "Bondeparme-Jean"),
		new Compte ("07070707", "Sailair-Jacques"),
		new Compte ("08080808", "Saidimanche-Damien"),
		new Compte ("09090909", "Tabaniol-Alphonse")
	};
	
	
	/**
	 * Recherche les comptes du propriétaire pfNomProprietaire 
	 * dans la liste de comptes pfALComptes.
	 * @param pfNomProprietaire	Propriétaire recherché
	 * @param pfALComptes	Liste dans laquelle les comptes sont recherchés
	 * @return	Liste des compte de pALComptes ayant pour propriétaire pNomProprietaire. Liste vide si aucun compte trouvé.
	 */
	public static ArrayList<Compte> getComptesDe (String pfNomProprietaire, ArrayList<Compte> pfALComptes) {
		
		// A FAIRE ICI :
		
		return null;  // A modifier
	}
	
	public static void main(String[] args) {
		int i, taille;
		ArrayList<Compte> listeComptes;
		ArrayList<Compte> resultatsProprietaire;
		String nomProp;
		Scanner lect = new Scanner(System.in);
		
		listeComptes = new ArrayList<Compte>();
		
		for(i=0; i<ClasseEssaiArrayListCompte.tabDeComptesTests.length; i++) {
			listeComptes.add(ClasseEssaiArrayListCompte.tabDeComptesTests[i]);
		}
		
		System.out.println("Les comptes existants");
		taille = listeComptes.size();
		System.out.println("  " + taille + " comptes");
		for (i=0; i<taille; i++) {
			System.out.print("  ");
			listeComptes.get(i).afficher();
		}	
		
		while (true) {
			System.out.print("Nom de propriétaire -> ");
			nomProp = lect.next();
			
			System.out.println("Ses comptes : ");
			resultatsProprietaire = ClasseEssaiArrayListCompte.getComptesDe(nomProp, listeComptes);
			taille = resultatsProprietaire.size();
			System.out.println("  " + taille + " comptes");
			for (i=0; i<taille; i++) {
				System.out.print("  ");
				resultatsProprietaire.get(i).afficher();
				// ou bien System.out.println("  " + resultatsProprietaire.get(i));
			}
		}
	}
}
----

== Mise en oeuvre des ArrayList

Pour les curieux (tous en somme), copier/coller dans Eclipse votre programme et regarder les attributs de l'objet +{al}+ de l'exercice de départ en mode debug (cf. {TPEclipse}). Que représentent les attributs +elementData+ et +size+ ?

== Pour aller plus loin (optionnel)

=== Le 'forall" ou "foreach"

Que pensez vous que va réaliser la syntaxe suivante ? (A tester bien sur dans votre programme de test d'ArrayList<String>).

[source,java]
----
for ( String s : alChaines ) {  
	System.out.println ( s.toUpperCase() + " lg : " + s.length() );
----

=== Parcourir une ArrayList<E>

On essaiera d’utiliser la méthode +iterator()+ de la classe +ArrayList+ dans le test sur ArrayList<String>.

.	Cette méthode renvoie un objet de type +Iterator<E>+. Étudier les méthodes fournies par +Iterator<E>+ dans la documentation.
.	On utilisera l’objet renvoyé par la méthode +iterator()+ (de +ArrayList+) :

*	Déclarer une variable objet de type +Iterator<E>+ (+<E>+ bien choisi …).
*	On initialisera cette variable avec la méthode +iterator()+ appliquée à l'ArrayList +{al}+.
*	On utilisera cette variable pour afficher le contenu de +{al}+.

=== Autre essai

On pourra tester rapidement une ArrayList de double (cf. support de cours).


ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution test ArrayList<String>
======
[source,java]
----
import java.util.ArrayList;
public class ClasseEssaiArrayList {
	private static int MAX = 5;
	public static void main(String[] arguments) {
		int i, taille;
		
		ArrayList <String> alChaines;
		
		alChaines = new ArrayList<String> ();
		
		alChaines.add ("Chaine 1");
		alChaines.add ("Chaine 2");
		alChaines.add ("Chaine 3");
		alChaines.add ("Chaine 4");
		alChaines.add ("Chaine 5");
		
		System.out.println ("Size : "+alChaines.size());
		// size : nb éléments présents dans l'ArrayList.

		taille = alChaines.size();
		for (i=0 ; i<taille; i++)
			System.out.println ("chaine en "+i+" : "+alChaines.get(i));
		
		alChaines.add (0, "Toto");
		System.out.println ("Size : "+alChaines.size());
		
		alChaines.add (1, "Tata")	;
		System.out.println ("Size : "+alChaines.size());

		alChaines.add (alChaines.size(), "Tutu")	;
		System.out.println ("Size : "+alChaines.size());

		alChaines.add (alChaines.size()/2, "Titi")	;
		System.out.println ("Size : "+alChaines.size());

		taille = alChaines.size();
		for (i=0 ; i<taille; i++)
			System.out.println ("chaine en "+i+" : "+alChaines.get(i));

		for (i=0; i<ClasseEssaiArrayList.MAX; i++) {
			alChaines.add ("Chaine " + i);
		}
		
		System.out.println ("Size : "+alChaines.size());
		taille = alChaines.size();
		for (i=0 ; i<taille; i++)
			System.out.println ("chaine en "+i+" : "+alChaines.get(i));
		
		alChaines.set(0,"BLABLA");
		alChaines.set(alChaines.size()-1,"BLABLA");
		alChaines.set(alChaines.size()/2 - alChaines.size()/4,"BLABLA");
		alChaines.set(alChaines.size()/2 + alChaines.size()/4,"BLABLA");
		
		System.out.println ("Size : "+alChaines.size());
		taille = alChaines.size();
		for (i=0 ; i<taille; i++)
			System.out.println ("chaine en "+i+" : "+alChaines.get(i));
		
		System.out.println(alChaines.toString());
		
		alChaines.remove(alChaines.size()-1);
		System.out.println ("Size : "+alChaines.size());
		alChaines.remove(0);
		System.out.println ("Size : "+alChaines.size());
		alChaines.remove(alChaines.size()/2 - alChaines.size()/4);
		System.out.println ("Size : "+alChaines.size());
		alChaines.remove(alChaines.size()/2 + alChaines.size()/4);
		System.out.println ("Size : "+alChaines.size());
		
		System.out.println ("Size : "+alChaines.size());
		taille = alChaines.size();
		for (i=0 ; i<taille; i++)
			System.out.println ("chaine en "+i+" : "+alChaines.get(i));
			
		System.out.println("Tests clear() et trimToSize()");
		
		System.out.println ("AVANT CLEAR Size : "+alChaines.size());
		
		taille = alChaines.size();
		for (i=0 ; i<taille; i++)
			System.out.println ("chaine en "+i+" : "+alChaines.get(i));
		
		alChaines.clear();

		alChaines.trimToSize(); // résultat visible uniquement en mode debug
		
		System.out.println ("APRES CLEAR Size : "+alChaines.size());
		taille = alChaines.size();
		for (i=0 ; i<taille; i++)
			System.out.println ("chaine en "+i+" : "+alChaines.get(i));
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution recherche dans une ArrayList<Compte>
======
[source,java]
----
	/**
	 * Recherche les comptes du propriétaire pfNomProprietaire 
	 * dans la liste de comptes pfALComptes.
	 * @param pfNomProprietaire	Propriétaire recherché
	 * @param pfALComptes	Liste dans laquelle les comptes sont recherchés
	 * @return	Liste des compte de pALComptes ayant pour propriétaire pNomProprietaire. Liste vide si aucun compte trouvé.
	 */
	public static ArrayList<Compte> getComptesDe (String pfNomProprietaire, ArrayList<Compte> pfALComptes) {
		int i, taille;
		ArrayList<Compte> result;
		
		result = new ArrayList<Compte>();
		taille = pfALComptes.size();
		for (i=0; i<taille; i++) {
			if (pfALComptes.get(i).getProprietaire().equals(pfNomProprietaire)) {
				result.add(pfALComptes.get(i));
			}
		}
		
		return result;
	}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Mise en oeuvre des ArrayList
======

* elementData : tableau contenant les données.
* size : nombre d'éléments "utilisés" dans elementData.
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution tests optionnels
======
[source,java]
----
		// Tests finaux optionnels
		
		System.out.println("AFFICHAGE PAR ITERATEUR");
		Iterator<String> it ;
		it = alChaines.iterator();
		while (it.hasNext()) {
			System.out.println(it.next());
		}
		
		for (String s : alChaines) {
			System.out.println ( s.toUpperCase() + " lg : " + s.length() );
		}
----
======
endif::prof[]

endif::todoprof[]
