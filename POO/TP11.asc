:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 11
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Avoir fait le TP de hiérarchie de classes Compte. Maîtriser l'héritage. TD8 : polymorphisme. Cours : polymorphisme.
| {objtd}	| Test du polymorphisme, mise en oeuvre du polymorphisme sur l'AgenceBancaire.
| {duree}	| *2 séance* de 1,5h sur machine.
| {depot}	| A déposer : code source des classes crées ou mises à jour. Les réponses aux questions sont à mettre en commentaire dans les fichiers rendus. 
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Tester le polymorphisme, l'appliquer sur l'application d'utilisation de l'AgenceBancaire.
====

[IMPORTANT]
====
Déroulement prévu :

.	Pour gagner du temps, ne programmer que comptes bancaires et épargne au départ dans l'appli. Permet de passer plus vite aux tests (les 2 autres cas en fin de TP).

*	private void creerCompteBancaire () 
*	private void creerCompteEpargne ()

.	Les aider à l'analyse de code si besoin.

.	*Pour le cas de la méthode isRetraitPossible()* (dernière partie), expliquer que c'est *"pédagogique"*. Juste pour tester. Et ca marche à peu près, on peut la remonter et la définir.
+
Dans la vraie vie c'est un pb de conception.
====

[IMPORTANT]
====
A Suivre :

Que tous les fichiers .java soient bien dans le même répertoire. Il y en a beaucoup ... mais nécessaire pour fonctionner.

Le compilateur compile ce qu'il faut lorsque des mises à jour ont été faites.
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

L'objectif de ce TP est *important* : 

*	*Tester le polymorphisme.*
*	*L'utiliser dans une application "réelle".*

Nous avons déjà "utilisé" le polymorphisme : i) dans le TP sur les FormesGraphique à l'aide d'un tableau, ii) en TD. 

*Nous allons l'étudier plus avant ici.*

Rappel de la hiérarchie de classes du TP précédent :

[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images//tp8.1.png[]
=====

== Mise en place de l'environnement

Récupérer les fichiers de votre TP précédent :

*	Classe Compte.java telle qu'elle vous a été livrée (commentée).
*	Toutes les sous-classes développées au TP précédent (sous classes de Compte).
*	Les classes CompteException, Operation et SensOperation.

Récupérer depuis le serveur :

*	ClassEssai.java : la classe à modifier au départ.
*	Si besoin : tp11-partie1 : contient les fichiers ci-dessus si vous n'êtes pas arrivés au bout.

Par la suite, les autres fichiers du serveur seront à télé-charger, pas nécessaires pour le moment.

== Test du polymorphisme

=== Préparation : ajout de méthodes

*Questions* :

.	Dans la classe *+Compte+*

..	Déclarer une nouvelle méthode :

...	+public void  afficherAvecSolde ()+.
...	Elle affiche le Compte (méthode +this.afficher()+) et ajoute le solde à l'écran (+this.soldeCompte()+).

.. Déclarer une autre méthode :

...	+public void transferer (Compte c, double pSomme) throws CompteException+.
...	Elle transfère (virement) pSomme euros de l'objet courant (retrait, +this.retirer(pSomme)+) vers le compte c (dépôt, +c.deposer(pSomme)+).
...	Elle lève une exception +CompteException+ si le dépôt ou le retrait sur un des deux comptes ne peut pas avoir lieu normalement. En fait elle "laisse" passer les exceptions levées par retirer() ou deposer().

=== Premiers tests de polymorphisme

*Questions* :

.	Ouvrir le fichier ClassEssai.java.
.	Il contient la déclaration de trois variables de type Compte : +cUn, cDeux, cTrois+.
.	*Sans changer ces déclarations* :

..	A l'aide de +cUn+, créer un objet de type CompteBancaire (avec le constructeur paramétré).
..	A l'aide de +cDeux+, créer un objet de type CompteEpargne (avec le constructeur paramétré).
..	A l'aide de +cTrois+, créer un objet de type CompteMoneo (avec le constructeur paramétré).

.	Déposer 2000 € sur chacun des trois comptes.
.	Appliquer la méthode +afficherAvecSolde()+ à chacun de ces trois comptes. *Quelle est la méthode afficher() appelée pour chacun d'eux ?*
.	Transférer 500 € de +cUn+ vers +cDeux+.
.	Transférer 500 € de +cUn+ vers +cTrois+.
.	Appliquer la méthode afficherAvecSolde() à chacun de ces trois comptes. *Quelle est la méthode afficher() appelée pour chacun d'eux ?*
.	Remarquez que, depuis le début de cette partie :

..	*Vous manipulez des variables déclarées de type Compte (type statique).*
..	*Qui au "runtime" référencent un CompteBancaire, un CompteEpargne, un CompteMoneo.*
..	*Et réagissent en fonction de leur type dynamique.*

.	Déclarer une variable +tabC+ de type tableau de Compte.
.	Créer avec +tabC+ un tableau de 3 Compte (références vers des objets Compte).
.	Stocker :

..	+cUn+ dans l'élément 0 de +tabC+.
..	+cDeux+ dans l'élément 1 de +tabC+.
..	+cTrois+ dans l'élément 2 de +tabC+.

.	Par une boucle for, appliquer la méthode +afficherAvecSolde()+ à chacun des éléments du tableau. *Quelle est la méthode afficher() appelée pour chacun d'eux ?*
.	Par une boucle for, déposer 3000 € sur chacun des comptes de +tabC+.
.	Transférer 1000 € de +tabc[0]+ vers +tabc[1]+.
.	Transférer 1000 € de +tabc[0]+ vers +tabc[2]+.
.	Par une boucle for, appliquer la méthode +afficherAvecSolde()+ à chacun des éléments du tableau. *Quelle est la méthode afficher() appelée pour chacun d'eux ?*

== Le polymorphisme en vraie grandeur

L'objectif maintenant est d'utiliser plusieurs types de comptes définis dans la classe AgenceBancaire. Pour cela nous allons modifier la classe déjà développée ClasseApplicationAgenceBancaire.java.

*Questions* :

.	Préparer l'activité :

..	Dans le même répertoire que précédemment, récupérer les classes du serveur tp11-partie2. Ce fichier contient :

...	ClasseApplicationAgenceBancaire.java : classe à modifier.
...	LanceurApplication.java : programme contenant le main() à lancer.
...	AgenceBancaire.java ainsi que les différentes classes d'exceptions nécessaires ABCompteDejaExistantException, ABCompteInexistantException, ABCompteNullException.

..	Ouvrir le fichier ClasseApplicationAgenceBancaire.java.

.	Dans ce TP, on considérera que :

..	AgenceBancaire est la classe *Modèle*
..	ClasseApplicationAgenceBancaire est la classe regroupant à la fois *Vue et Contrôleur*.
..	LanceurApplication est la classe permettant de lancer l'application sur une agence particulière.

.	Étudier le code de la classe ClasseApplicationAgenceBancaire. 

..	Par rapport à une version antérieure de TP, la classe a évolué et elle définit maintenant des objets mettant en oeuvre l'application de gestion des comptes sur un objet AgenceBancaire passé en paramètre du constructeur.
..	Etudier le constructeur
..	Etudier la méthode runApplication().
..	Etudier les méthodes voirUnCompte (), supprimerUnCompte(), deposerSurUnCompte(), retirerSurUnCompte().

.	Lancer l'application, elle doit fonctionner mais les fonctions "Créer un compte" (monéo, bancaire, épargne, jeune) et "Transférer" ne sont pas implémentées.
.	Écrire les méthodes :

..	+private void creerCompteBancaire ()+ pour i) saisir les paramètres nécessaires ii) créer un compte bancaire et iii) l'ajouter à l'agence bancaire (cf. attribut monAg). Utiliser le constructeur paramétré le plus complet.
..	+private void creerCompteEpargne ()+ pour i) saisir les paramètres nécessaires ii) créer un compte épargne et iii) l'ajouter à l'agence bancaire (cf. attribut monAg). Utiliser le constructeur paramétré le plus complet.
..	+private void creerCompteMoneo ()+ pour i) saisir les paramètres nécessaires ii) créer un compte monéo et iii) l'ajouter à l'agence bancaire (cf. attribut monAg). Utiliser le constructeur paramétré le plus complet.
..	+private void creerCompteJeune ()+ pour i) saisir les paramètres nécessaires ii) créer un compte jeune et iii) l'ajouter à l'agence bancaire (cf. attribut monAg). Utiliser le constructeur paramétré le plus complet.

.	Écrire la méthode :

..	+private void transfertEntreDeuxComptes ()+ permettant de réaliser un transfert : i) saisir le numéro de deux comptes, ii) saisir un montant, iii) transférer le montant saisi du premier compte vers le second.

.	Tester la création de compte, le dépôt de sommes sur les comptes, le retrait, le transfert entre comptes, l'affichage de l'AgenceBancaire, l'affichage individuel des comptes. Tout doit fonctionner ...

*Questions - Analyse du code écrit* :

.	Analyser le code de AgenceBancaire. *Quelle est la classe de comptes sur laquelle est définie AgenceBancaire* ?
.	Analyser le code de ClasseApplicationAgenceBancaire. *A quels "moments" précis se pose-t-on la question du type de compte réellement manipulé* ? 
.	Analyser le code de ClasseApplicationAgenceBancaire. *Quel type manipulent les méthodes +voirUnCompte()+, +supprimerUnCompte()+, +deposerSurUnCompte()+, +retirerSurUnCompte+* ?
.	Analyser le code de ClasseApplicationAgenceBancaire. *Quel type manipule la méthode +transfertEntreDeuxComptes()+* ?
.	Vous venez de constater les (premiers) effets du polymorphisme...
.	Imaginons que nous ajoutions une classe ComptePlacement comme sous-classe de CompteEpargne. *Que faut-il modifier dans ClasseApplicationAgenceBancaire* pour "intégrer" cette nouvelle classe ?

== Pousser le polymorphisme plus loin

*Question - Classes abstraites* :

.	On peut constater que les classes Compte, CompteDepot, et CompteSecurise ne représentent pas des comptes réels que les banquiers proposent à leurs clients.
.	Déclarer +abstract+ les classes Compte, CompteDepot, et CompteSecurise. Le programme continue-t-il à fonctionner ?

*Question - Méthodes spécifiques* :

.	Pour les classes héritant de CompteSecurise (CompteBancaire, CompteJeune), on ne peut pas utiliser dans ClasseApplicationAgenceBancaire la méthode +isRetraitPossible()+. Essayer d'appeler +isRetraitPossible()+ dans dans la méthode de retrait sur un Compte +retirerSurUnCompte()+ pour vérifier. *Expliquez pourquoi*.
.	Déclarer la méthode +isRetraitPossible()+ comme +abstract+ dans Compte.
.	On souhaite que la méthode +isRetraitPossible()+ soit +abstract+ dans CompteDepot. Faut-il écrire quelque chose ? Quoi ? Rien ?
.	La redéfinir *si besoin* et correctement dans les classes CompteMoneo, CompteEpargne, CompteBancaire, CompteCompteJeune. A noter : jusqu'à maintenant, tout retrait est possible quelque soit son montant (>=0) sur les comptes monéo et épargne.
.	Utiliser la méthode +isRetraitPossible()+ pour tester un retrait avant de l'effectuer dans la classe ClasseApplicationAgenceBancaire dans les méthodes : +retirerSurUnCompte()+ et +transfertEntreDeuxComptes()+.
.	Tester l'application et essayer des dépôts sur les 4 types de comptes et des transferts entre les 4 types de comptes.

*Conclusion :*

*	*Pour faciliter le polymorphisme : les méthodes sont à déclarer "le plus haut possible" dans une hiérarchie d'héritage*.
*	*Ce point est un problème de conception des classe*.

ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Première partie
======
[source,java]
----
public class Compte extends Object
{
	// ...
	public void  afficherAvecSolde () {
		this.afficher();
		System.out.println("Solde : "+this.soldeCompte());
	}
	
	public void transferer (Compte c, double pSomme) throws CompteException {
		this.retirer(pSomme);
		c.deposer(pSomme);
	}
}

public class ClassEssai {
	public static void main(String[] args) {

		Compte cUn, cDeux, cTrois;
		
		cUn = new CompteBancaire("010101", "prop01", "jisa010101", 500);
		cDeux = new CompteEpargne("02020202", "prop020202", 10);
		cTrois = new CompteMoneo("03030303", "prop030303", "moneo030303");

		try {
			cUn.deposer(2000);
			cDeux.deposer(2000);
			cTrois.deposer(2000);
		} catch (CompteException e) {
			System.out.println("PBPB");
		}
		
		System.out.println("cUn");
		cUn.afficherAvecSolde();
		System.out.println("cDeux");
		cDeux.afficherAvecSolde();
		System.out.println("cTrois");
		cTrois.afficherAvecSolde();
		
		try {
			cUn.transferer(cDeux, 500);
			cUn.transferer(cTrois, 500);
		} catch (CompteException e) {
			System.out.println("PBPB");
		}

		System.out.println("cUn");
		cUn.afficherAvecSolde();
		System.out.println("cDeux");
		cDeux.afficherAvecSolde();
		System.out.println("cTrois");
		cTrois.afficherAvecSolde();
		
		Compte tabC[] = new Compte[3];
		
		tabC[0] = cUn;
		tabC[1] = cDeux;
		tabC[2] = cTrois;
		
		for (int i =0; i<tabC.length; i++) {
			System.out.println("Compte : "+i);
			tabC[i].afficherAvecSolde();
		}
		
		try {
			for (int i =0; i<tabC.length; i++) {
				tabC[i].deposer(3000);
			}
			tabC[0].transferer(tabC[1], 1000);
			tabC[0].transferer(tabC[2], 1000);
		} catch (CompteException e) {
			System.out.println("PBPB");
		}
		
		for (int i =0; i<tabC.length; i++) {
			System.out.println("Compte : "+i);
			tabC[i].afficherAvecSolde();
		}
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution Deuxième partie
======
[source,java]
----
public class ClasseApplicationAgenceBancaire {

	// Saisir les infos pour un CompteBancaire
	// Créer l'objet CompteBancaire
	// Ajouter cet objet à l'agence gérée
	private void creerCompteBancaire () {
		CompteBancaire cb;
		System.out.println("Not Yet Implemented");

		String numero, proprietaire, carteJissa;
		double da;
		
		System.out.print("Num compte -> ");
		numero = this.lect.next();
		System.out.print("Propriétaire -> ");
		proprietaire = this.lect.next();
		System.out.print("Carte Jisa -> ");
		carteJissa = this.lect.next();
		System.out.print("Découvert autorisé -> ");
		da = this.lect.nextDouble();
				
		cb = new CompteBancaire(numero, proprietaire, carteJissa, da);
		
		try {
			this.monAg.addCompte(cb);
			System.out.println("Ajout effectué ...");
		} catch (ABCompteNullException e) {}
		  catch (ABCompteDejaExistantException e) {
			  System.out.println("Pb ... numéro déjà existant, ajout non effectué ...");
		}
	}
	
	// Autres méthodes sur ce modèle

	
	// Transfert entre deux comptes
	// Saisir les numéros de deux comptes, 
	// Saisir le montant à transférer
	// Réaliser le transfert
	
	private void transfertEntreDeuxComptes () {
		System.out.println("Not Yet Implemented");
		Compte cDe, cVers;
		String numDe, numVers;
		double montant;
		
		System.out.print("Transfére du compte numéro -> ");
		numDe = this.lect.next();
		System.out.print("Vers le compte numéro -> ");
		numVers = this.lect.next();
		System.out.print("Montant à transférer -> ");
		montant = this.lect.nextDouble();
		cDe = this.monAg.getCompte(numDe);
		cVers = this.monAg.getCompte(numVers);
		
		if (cDe == null || cVers == null) {
			System.out.println("Un des deux comptes est inexistant ...");
		} else {
			System.out.println("Solde de " + numDe + " avant dépôt : " + cDe.soldeCompte());
			System.out.println("Solde de " + numVers + " avant dépôt : " + cVers.soldeCompte());
			try {
				cDe.transferer(cVers, montant);
				System.out.println("Solde de " + numDe + " avant dépôt : " + cDe.soldeCompte());
				System.out.println("Solde de " + numVers + " avant dépôt : " + cVers.soldeCompte());
			} catch (CompteException e) {
				System.out.println("Erreur de transfert");
			}
		}
	}
}
----
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======
AgenceBancaire => Compte

ClasseApplicationAgenceBancaire => question du type lors de la création des comptes.

ClasseApplicationAgenceBancaire => méthodes +voirUnCompte()+, +supprimerUnCompte()+, +deposerSurUnCompte()+, +retirerSurUnCompte+ => manipulent des objets de la classe Compte.

ClasseApplicationAgenceBancaire => méthode +transfertEntreDeuxComptes()+ => manipule des objets de la classe Compte.

Classe ClassePlacement comme sous-classe de CompteEpargne. *Que faut-il modifier dans ClasseApplicationAgenceBancaire* pour "intégrer" cette nouvelle classe ? => Ajouter une option de menu de création de ce type de compte + code correspondant. C'est tout, le reste marchera.
======

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
======

 public abstract class Compte { ... }

 public abstract class CompteDepot { ... }

 public abstract class CompteSecurise { ... }

Le programme continue à fonctionner.

Pour les classes héritant de CompteSecurise (CompteBancaire, CompteJeune), on ne peut pas utiliser dans ClasseApplicationAgenceBancaire la méthode +isRetraitPossible()+ (à essayer si besoin). *Expliquez pourquoi*.

=> Car non définie dans la classe Compte.

[source,java]
----
public abstract class Compte { 
	public abstract boolean isRetraitPossible(double pSomme);
}

public class CompteMoneo { 
	public abstract boolean isRetraitPossible(double pSomme) {
		return true; // Car toujours ok
	}
}
 
public abstract class CompteDepot { // Rien de spécial
}
 
public class CompteEpargne { 
	public abstract boolean isRetraitPossible(double pSomme) {
		return true; // Car toujours ok
	}
}
 
public abstract class CompteSecurise { // Non modifiée, telle que au départ
 	public boolean isRetraitPossible(double pSomme) {
		return (this.soldeCompte() - pSomme >= (-1) * this.debitAutorise);
	}
}
 
// CompteBancaire, CompteJeune => rien à faire => héritée
----

Utiliser et tester +isRetraitPossible()+ avant de retirer et avant de faire un transfert.
=> OK
======

endif::prof[]

endif::todoprof[]
