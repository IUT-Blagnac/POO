:moduleTitle: BPOO
:authorDefault:  Dut/Info-S2/M2103
// include::lib/globals.asc[] // temporairement
:tdnum: TP 11
ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:iconsdir: icons/
:icons: true

:eclipse: http://www.eclipse.org/[eclipse]
:eclipseversion: Indigo SR2
:eclipsedownload: http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/indigosr2[Eclipse Indigo sr2]

:docjava: http://docs.oracle.com/javase/7/docs/api/[documentation java]
:docjavaArrayList: http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html[documentation ArrayList<E>]

:junit: JUnit

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTP
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------

[icon="{iconsdir}/example.png"]
[IMPORTANT]
====
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| Avoir fait le TP de hiérarchie de classes Compte. Maitriser l'héritage.
| {objtd}	| Générer la documentation de classes pour les clients de la classe (API).
| {duree}	| *1 séance* de 1,5h sur machine.
| {depot}	| A déposer : code source de CompteDepot et CompteSecurise commentées et, dans un répertoire, la documentation générée par javadoc pour toutes les classes (un seul fichier .zip).
|======================
====

ifdef::todoprof[]
[IMPORTANT]
====
Pour les profs :

* 	But du TP : Documenter des classes, ici 2 classes de la hiérarchie de comptes.
====

[IMPORTANT]
====
Faire avec eux le début : 

.	Explications des principes
.	Commande javadoc
.	Récupérer les fichiers, lancer la commande javadoc du style :
+
 javadoc  -version  -author  -d  documentation   *.java

 .	Commentaires javadoc (format)

Insister sur les principes de documentation :

*	Doc avant l'élément documenté
*	Tags possible
*	Principe de la doc : 

**	A destination : d'un programmeur
**	A destination d'un client qui n'a pas à connaître l'implémentation mais "l'usage" de la classe.
====

[IMPORTANT]
====
Déroulement prévu :

*	10' : rapatrier tous les fichiers nécessaires
* 	10' : principes de documentation des classes
*	20' : premier test javadoc
*	45' : documentation des classes CompteDepot/CompteSecurise, au moins CompteDepot

But du TP : Documenter des classes, ici quelques classes de la hiérarchie de comptes.
====

[IMPORTANT]
====
A Suivre de près dans le TP :

Le contenu de la documentation produite : pas l'implémentation MAIS l'utilisation pour un client de la classe.
Faire au moins CompteDepot.
====
endif::todoprof[]

ifndef::todoprof[]

== Objectif

Le but de ce TP est de documenter des classes à destination de *programmeurs* pour deux usages distincts :

*	Développement de classes *clientes* de vos classes.
*	Développement de classes qui *héritent* de vos classes.

Le but de ce TP est de générer la documentation des classes du TP précédent sur la hiérarchie de comptes : 

*	la documentation générée automatiquement par javadoc (structure de la documentation),
*	la documentation détaillée (réelle) pour les classes CompteDepot et CompteSecurise. Les plus avancés pourront faire les autres classes.

Rappel de la hiérarchie de classes du TP précédent :

[align="center"]
=====
.Diagramme UML des classes mises en oeuvre
[caption="Figure : "]
image:images/tp8.1.png[]
=====

== Mise en place de l'environnement

Récupérer les fichiers suivants dans votre répertoire de travail : 

*	classe Compte.java telle qu'elle vous est livrée (commentée),
*	toutes les sous-classes que vous avez développées au TP précédent (sous classes de Compte).
*	les classes CompteException, Operation et SensOperation

== Principes de documentation des classes

.	+javadoc+ est un outil développé par Sun Microsystems permettant de générer automatiquement une documentation d'API en format HTML depuis les commentaires présents dans un code source en Java (plusieurs fichiers sources java).

..	NB : Il existe d'autres outils de génération de documentation suivant les mêmes principes.

.	La documentation produite pour une classe est destinée aux futurs clients (programmeurs) et sous-classes de cette classe :

*	On y retrouvera donc les propriétés public et protected, de classe et d’instances.
*	Les propriétés privées et le code des méthodes, c’est-à-dire l’implémentation, ne se trouveront pas a priori dans la documentation (mais c'est possible).

.	La documentation produite pour une classe est destinée aux futurs clients (programmeurs) et sous-classes de cette classe :

*	La documentation explique le *fonctionnement externe* de la classe (vu de l'extérieur), PAS l'implémentation mise en oeuvre (en tout cas le moins possible)/
*	La documentation doit permettre à un programmeur *d'utiliser* la classe, pas de faire la maintenance du code.

.	La génération de la documentation se fait, à partir des fichiers sources, en recherchant deux types d’informations pour générer la documentation :

*	les *déclarations java* "pures" (le code java) pour trouver les informations "syntaxiques" à mettre dans la documentation : identificateurs des classes, héritage, propriétés déclarées publiques, identificateurs de méthodes, identificateurs des paramètres formels, ...
*	des *commentaires* ayant un *format et un emplacement spécifiques*, ajoutés par le programmeur, et qui viendront donner les éléments d’explication qui seront ajoutés à la documentation.

== Commande javadoc : traitement des déclarations java

=== Utiliser la commande javadoc

Ouvrir une fenêtre de commande :

.	Se positionner dans votre répertoire de travail contenant les fichiers .java.
.	Tester la commande +javadoc+.

**	La réponse est une liste d'options de la commande (-version, ...) => ok, passer à la suite.
**	La réponse est un message du type "unknown command" => positionner le +path+ permettant d'accéder à l'utilitaire javadoc qui se trouve dans le répertoire bin de la distribution du jdk : exemple
+
 path=%path%;"C:\Programmes...\Java\...\jdkxxx\bin"

Quelques options de la commande javadoc :

 javadoc    -version  -author  -link URLDOC  -d  rep    c1.java  [c2.java ...]

Cette commande, permet de générer la documentation :

*	+c1.java  [c2.java ...]+ : pour la classe c1.java, et autres si précisées (+*.java+ possible), les classes doivent exister dans le répertoire courant,
*	+-d  rep+ : recommandé, la documentation est générée dans le répertoire rep (+-d+ comme "directory"),
*	+-author+ : optionnel, provoque la génération des informations sur l'auteur si disponibles,
*	+-version+ : optionnel, provoque la génération des informations de version si disponibles,
*	+-link URLDOC+ : optionnel, provoque la génération de liens hypertextes depuis la documentation générée vers une autre documentation située à URLDOC. L'URL peut être une URL classique ou bien un fichier local. 
+
Exemple : http://docs.oracle.com/javase/7/docs/api/. Cela fera que les noms de classes connues dans l'API Java (String, ...) se présenteront comme des liens hypertextes vers la documentation générée.

=== Travail à faire

*Question :* Sans ajouter de commentaire aux classes écrites :

*	*si besoin, reprendre la classe +Compte+ du serveur (documentée),*
*	*générer la documentation de toutes vos classes du TP (hiérarchie de Compte + autres classes),*

**	Exemple de commande :  +javadoc  -version  -author  -link http://docs.oracle.com/javase/7/docs/api/  -d  monRepertoire *.java+
*	*consulter la documentation pour comprendre ce qui est généré.*

== Commentaires javadoc

=== Insertion de commentaires pour générer le complément de documentation

.	Des commentaires spécifiques sont analysés par javadoc pour construire la documentation générée. Ils ont la forme :
+
[source,java]
----
/**
 * Ici les commentaires que javadoc analysera
 * Le tout servira à produire des blocs de textes dans la documentation générée.
 */
----
	
.	Ces éléments de commentaire sont insérés *avant* l'élément syntaxique qu'ils décrivent : avant la clause de déclaration de classe, avant la déclaration d'une méthode, ...

.	L'élément important est ici le début du commentaire : +/**+

.	Chaque élément de commentaire contient (principalement) :

*	une première ligne se terminant par un point (".") ; C'est le résumé qui apparaît dans le tableau résumé de la documentation (cf. description des méthodes),
*	du texte composant le commentaire détaillé,
*	des balises html de mise en forme (+<BR>, <B> ... </B>, <code> ... </code>, ...+),
*	des  balises spéciales propres à javadoc et commençant pas le caractère @ : les « tags ».

Exemple :


[source,java]
----
/**     // <1>
 * Permet d'effectuer un retrait sur un Compte.<BR>    // <2>
 * <BR>
 * Effectue un retrait (débit) de pfMontant Euros sur le Compte.<BR>    // <3>
 * Lève une exception si pfMontant < 0. <BR>
 * 
 * @param pfMontant   Le montant retiré sur le Compte.     // <4>
 * @throws CompteException   Lorsque pfMontant < 0
 * @see Compte#deposer(double)
 */
public void retirer(double pfMontant) throws CompteException {     // <5>
	if (pfMontant < 0) {
		throw new CompteException(
			"Erreur de somme négative lors d'un retrait sur " + this.numCompte);
	}
	this.debits = this.debits + pfMontant;
	this.nbDebits++;
}
----
<1>	+/**+ => début d'un commentaire traité par javadoc. Commente l'élément de langage qui suit immédiatement, ici : +public void retirer(double pfMontant) throws CompteException+.
<2>	Première ligne terminée par un "." => ligne utilisée dans les tableaux de synthèse des pages générées.
<3>	Suite du commentaire : détails des explications (avec du html pour le formatage).
<4>	+@param+, +@throws+, +@see+ : tags spécifiques traités par javadoc.
<5> Elément de langage précédé par +/**+ => élément commenté en javadoc.

Voir la classe Compte.java livrée.

=== Liste (non exhaustive) de tags reconnus par javadoc 

[align="left",cols="1,8,1",width="90%"]
|======================
| Balise | Rôle	 | Applicable à
|@author
| +@author   text+

Précise l'auteur de la source. Si plusieurs auteurs, mettre plusieurs balises.

Ex : +@author A. Péninou+
| Classe et Méthode.

| @version
| +@version  version-text+

Version en cours de l'élément.

Ex : +@version		2.3.1.15.12+
| Classe, Méthode et Interface.

| @param
| +@param  parameter-name description+

Définit un paramètre de méthode. Requis pour chaque paramètre. Donne l'identificateur du paramètre suivi d'une explication succincte.

Ex : +@param     pNomProp     Le nom du propriétaire.+
| Constructeur et Méthode.

| @return
| +@return  description+

Documente la valeur de retour d'une méthode. Ce tag ne doit pas être employé pour des constructeurs ni des méthodes définies comme void.

Ex : +@return   true si ok, false sinon.+
| Méthode.

| @exception

@throws
| +@throws  class-name  description+

+@exception class-name  description+

Documente une exception lancée par une méthode. 

@throws est un synonyme pour @exception disponible depuis Javadoc 1.2.	

Exemple : +throws CompteException Lorsque pfMontant < 0+
| Méthode.

| @see
| +@see  reference+

Crée un paragraphe "Voir aussi". 

Établit un lien hypertexte vers un autre élément en rapport avec la partie traitée. L’élément en rapport peut être dans la classe ou dans une autre classe.

Ex : +@see   Compte#deposer(double)+
| Package, Classe, Méthode, Constructeur, Interface et Attribut.

|@since
| +@since  since-text+

Précise à quelle version de la JDK un élément défini a été ajouté à la classe. Date de création de l'entité.	
| Package, Classe, Méthode, Constructeur, Interface et Attribut.

| @deprecated
| +@deprecated   text+

Deprecated signifie "à ne plus utiliser à partir d’une version donnée (text)", susceptible de disparaître dans les versions ultérieures.

Lorsque cette balise est mise dans le commentaire de tête (classe), TOUT ce qui suit est considéré comme Deprecated (Méthode,...). Sinon le préciser seulement au niveau désiré.
| Classe, Interface, Méthode et Attribut.

|======================

=== Travail à faire

*Question : Commenter les classes CompteDepot et CompteSecurise et générer la documentation correspondante. Voir la documentation générée sur toutes les classes (héritage).*

Rappel : La documentation d'une classe est à destination de *programmeurs* pour deux usages distincts :

*	Développement de classes *clientes* de vos classes.
*	Développement de classes qui *héritent* de vos classes.

ifdef::prof[]

== Solutions

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solutions
======
[source,java]
----
Pas de sol particulière : ils n'ont que de la documentation à produire.
----
======

endif::prof[]

endif::todoprof[]
