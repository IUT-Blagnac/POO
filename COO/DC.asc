ifndef::slides[:leveloffset: -1]
ifdef::slides[:leveloffset: -3]

[{topic}]
==== Diagramme de classe

Nous souhaitons représenter les données manipulées par le système, ainsi
que les relations entre ces données.

image::plantuml-cd.svg[width=20%]

[NOTE]
====
Nous parlons pour l'instant de _classe_, si vous êtes familié avec
le langage C vous pouvez parler de _structure_.
Pour l'instant considérons que les 2 sont équivalents.
====

ifdef::slides[:leveloffset: -3]

[{topic}]
===== Concept de *Classe*

Une *classe* est une représentation unique servant à caractériser
un ensemble d’*objets* jouant un rôle identique et décrits par les mêmes *attributs*.

image::plantuml-cd.svg[width=20%]


ifdef::slides[]
[{topic}]
===== Une classe est-elle un ensemble d'objets ?

[{incremental}]
- Au sens tableau / stockage mémoire du terme => *NON* 
- Au sens mathématiques / ensembliste (comme N ou R) => *OUI* 

endif::slides[]

ifdef::slides[]
[{topic}]
===== Concept de *Classe* (suite)
endif::slides[]

Afin de faciliter la lisibilité des diagrammes, il est d'usage d'adopter une certaine
façon de nommer les différents éléments. Ceci permet d'avoir une homogénéité dans les
différents diagrammes.

[NOTE]
====
Exemple de convention d’écriture suivante : +

- 1ère lettre d'une classe toujours en majuscule (la classe +Compte+ par exemple)
- Pas de pluriel au nom des classes
====


[{topic}]
===== Classes et objets

En programmation on parle de +type+ et de +variable+. Même si c'est un raccourci très rapide
nous pouvons pour l'instant faire le parallèle entre les notions de +classe+ et d'+objet+.

On parlera toutefois d'*instance* pour désigner un objet issu d'une classe.

image:object.svg[width=40%]


[{topic}]
===== Attributs

Un *attribut* est une propriété représentative d’un objet
(nom d’une personne, couleur d’une voiture, moyenne d’un étudiant...).

Pour chaque objet d’une classe, un attribut possède une valeur particulière.

Exemples :

image:plantuml-cd.svg[width=20%]

ifdef::slides[===== !]

[NOTE]
====
Nous utiliserons la convention d’écriture suivante pour les attributs : +

- 1ère lettre en minuscule.
- pour les noms composés, on mettra en majuscule la première lettre de chaque mot, sauf pour le premier.
====

ifdef::slides[===== !]

Les noms des attributs de type booléen seront précédés du préfixe +est+ (_is_ en anglais).

Exemples :

- `estMajeur` vaut `VRAI` si une personne est majeure et `FAUX` si elle est mineure
- +estCadre+ vaut `VRAI` si une personne est cadre et `FAUX` sinon

ifdef::slides[===== !]

L'intérêt de cette convention permet d'écrire directement des instructions facilement
interprétables, comme :

[source,java]
-----
if (estMajeur)
	...
-----

[{topic}]
=====  Identifiant

Un *identifiant* est un attribut particulier d’une classe dont les valeurs représentent
sans ambiguïté chaque objet de la classe.

[TIP]
.Choix d’un identifiant
====
Il faut prendre un attribut non ambigu (le nom d’une personne ne convient pas) et court (le numéro de sécu est trop long).
====

ifdef::slides[===== !]

image:id.svg[30%]

[NOTE]
====
Convention : Les noms des identifiants commenceront par le préfixe +id+
====

Vous approfondirez (ou avez déjà abordé) cette notion en Base de donnée.



[{topic}]
=====  Association

Une *association* est un ensemble de liens permanents existant entre les objets de deux ou plusieurs classes.
On dira qu’une association lie plusieurs classes ou que les classes *participent* à l’association.

[NOTE]
.Exemple
====
Dans l'exercice sur l'Agence de Voyage, une fiche +client+ est liée à une ou plusieurs +commandes+ en cours.
====

ifdef::slides[===== !]

Dimension d’une association :

Nombre de classes mises en jeu par l’association +
(binaire : 2, ternaire : 3, n-aire : n)

ifdef::slides[===== !]

Exemple d’association binaire 

Soient les classes +Fournisseurs+ et +Produits+.
On veut indiquer quels sont les produits susceptibles d’être fournis par chaque fournisseur et quels sont les fournisseurs susceptibles de fournir chaque produit.

image:prod-fourn.png[width="40%"]

ifdef::slides[===== !]

Nom d’une association :

Afin de clarifier les informations, il est important de nommer les associations. +
Il existe trois façons de nommer une association :

- un verbe à l’infinitif (e.g., +Fournir+)
- un verbe conjugué avec un sens de lecture : +Fournit >+  ou  +< Est fourni par+
- un rôle (placé à une extrémité de l’association)

[NOTE]
====
Un nom d’association commencera par une majuscule comme les noms de classes.
====

ifdef::slides[===== !]

Cardinalité :

Indique à combien d’objets minimum et maximum de la classe d’en face est lié tout objet de la classe de départ. Elle est représentée par un couple +(M..N)+. Elle représente le nombre minimum et maximum d'objets (de la classe de ce côté-ci
de l'association) qui peuvent être en association avec un objet donné (de l'autre côté de l'association).

[NOTE]
====
Attention, dans une cardinalité +M..N+, +M+ doit toujours être inférieur ou égal à +N+.  Exemple : +3..10+.
====

ifdef::slides[===== !]

Cardinalités classiques :

- +*+ : signifie +[0..N]+ avec +N+ indéterminé. Très utilisé pour les associations multiples optionnelles.
- +1..*+ : signifie +[1..N]+ avec +N+ indéterminé. Très utilisé pour les associations multiples obligatoires.
- +1+ : signifie +[1..1]+

[{topic}]
=====  Représentation

Représentation des classes

Une classe est représentée par un rectangle divisé en plusieurs compartiments. 
Le compartiment supérieur contient le *nom* de la classe et le compartiment inférieur la liste des *attributs* (l’identifiant est placé en tête de liste).

image:plantuml-cd.svg[width=20%]

ifdef::slides[===== !]

Représentation des associations

Une association binaire est représentée par un trait reliant deux classes. Le *nom* de l’association est placé à proximité du trait et les *cardinalités* sont placées de part et d’autre.

image:exp2.svg[width=20%]

[{topic}]
=====  Classe association

Certains attributs ne dépendent pas d'une seule classe, mais de plusieurs.
Exemple : le prix d'un produit selon le fournisseur qui le propose.

image:class-assoc.svg[width=200]

ifdef::slides[===== !]

Pour les représenter, ils seront placés dans une *classe-association* reliée au  trait de liaison par un trait en pointillés. Le nom de l'association sera alors placé dans la classe-association.

image:class-assoc.svg[width=200]

ifdef::slides[:leveloffset: -2]

[{topic}]
==== Pour dessiner rapidement de l'UML

Les schémas de cette section sont écrits en utilisant le langage http://plantuml.sourceforge.net/[PlantUML].

Par exemple le schéma précédent a été réalisé à partir du code suivant :

-----
class Produit {
	designation
	poids
}
class Fournisseur {
	raisonSociale
	adresse
}

Produit "0..*" -- "0..*" Fournisseur
(Produit, Fournisseur) . Fournir	

class Fournir {
	prixAchat
}
-----

ifdef::slides[===== !]

[NOTE]
====
Vous pouvez tester en ligne : http://www.plantuml.com/plantuml/ ou encore télécharger le [plugin eclipse] (cf. <<plantumlecl,illustration>> ci-dessous)
====

[[plantumlecl]]
image:plantuml-eclipse.png[width=600,height=600]

//// 
[{topic}]
==== Exercices de révision

- Réalisez le diagramme de classes suivant :

1. Les étudiants possèdent un numéro d'étudiant (identifiant), un nom, un prénom, une date de naissance. Ils suivent des cours (titre, code du module).
2. Les examens concernent un cours donné. Chaque examen a lien à une certaine date et possède un coefficient.
3. Pour chaque examen un étudiant à une note.
4. Les cours sont enseignés par un enseignant (nom, prénom)

ifdef::slides[===== !]

- Réalisez le diagramme de classes suivant :

1. Un portable possède un clavier
2. Un clavier peut-être de type "azerty" ou "querty"
3. Un clavier possède des touches
4. Un portable a un 0 ou 1 propriétaire qui a lui même un nom et un prénom
5. Un portable a un prix d'achat et une valeur actuelle (souvent différente)
////

[{topic}]
==== Les relations/associations

image::associations.svg[width=100%]


[{topic}]
==== Démo

- plantUML
- Umple

[{topic}]
==== Time for a quizz!

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
- Connectez-vous sur : http://www.socrative.com/ (*student login*)
- Ou téléchargez l'application pour étudiant image:socrative2.png[width=10%]
- Choisissez la room *JMB42*
====

image::socrative1.png[width=50%,link=http://www.socrative.com/]



