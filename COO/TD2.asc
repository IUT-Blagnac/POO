:moduleTitle: BCOO
:authorDefault:  Dut/Info-S2/M2104
// include::lib/globals.asc[] // temporairement
:tdnum: TD 1

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les 
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		| 
1.  Je sais programmer, j'ai conscience qu'il faut réfléchir avant de se lancer dans le codage. J'ai des notions de structure de données.
2.	Je connais les concepts principaux du Diagramme de Classes : classe, attribut, attribut dérivé, identifiant, association, composition, multiplicité, classe-association.
3.	Je connais les conventions d’écriture du Diagramme de Classes
| {objtd}	| Comprendre ce qu'est un *modèle*.
| {duree}	| *1 ou 2 séance(s)* de 1,5h (selon le niveau initial en UML)
|======================

// // | {depot}	| -

== Rappel du cours

Dans le diagramme de classe suivant, repérez les différents éléments : 

. +Classe+
. +nom de classe+
. +attribut+
. +association+
. +cardinalité+

image::dc1.png[width=300,height=300]

//----------------------------------------------------- Correction -------------------------
ifdef::prof[] 
=== Correction
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::dc1-cor.png[alt="DIag de Classe",width=300,height=300]
====
endif::prof[] 
//----------------------------------------------------- fin Correction -------------------------

== Diagrammes de classes simples

Réalisez les diagrammes de classes suivants :

* Exams
** Les étudiants possèdent un numéro d'étudiant, un nom, un prénom, une date de naissance. Ils suivent des cours (titre, code du module).
** Les examens concernent un cours donné. Chaque examen a lien à une certaine date et possède un coefficient.
** Pour chaque examen un étudiant à une note.
** Les cours sont enseignés par un enseignant (nom, prénom)

//----------------------------------------------------- Correction -------------------------
ifdef::prof[] 
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::exams.png[alt="DIag de Classe",width=400,height=400]
====
endif::prof[] 
//----------------------------------------------------- fin Correction -------------------------

* Ordinateurs portables
** Un portable possède un clavier
** Un clavier peut-être de type "azerty" ou "querty"
** Un clavier possède des touches
** Un portable a éventuellement un propriétaire qui a lui même un nom et un prénom
** Un portable a un prix d’achat et une valeur actuelle (souvent différente)

//----------------------------------------------------- Correction -------------------------
ifdef::prof[] 
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::portable.png[alt="DIag de Classe",width=400,height=400]
====
endif::prof[] 
//----------------------------------------------------- fin Correction -------------------------

== Tour Opérator

=== Enoncé

Des Tour Operator (Fram, Jet-Tours, Nouvelles Frontières…) proposent des voyages. Chaque TO est caractérisé par un identifiant, un nom et une adresse.

Chaque voyage est rattaché à un seul TO et est défini par un identifiant, un libellé, un lieu de départ et de destination, une date de départ et d’arrivée ainsi qu’un prix de base. 

Différentes options (chambre climatisée, pension complète, voyages en 1ère classe...) peuvent être choisies pour les différents voyages avec un montant différent selon celui-ci (par exemple l’option « Pension complète » coûtera plus cher pour un voyage à Paris que pour un voyage au Vietnam). 

Des clients (identifiant, nom, prenom, adresse) passent des commandes pour des voyages, chaque commande ne concernant qu’un voyage. Une commande est définie par un numéro, une date et un état. A chaque commande est rattachée un certain nombre de voyageurs caractérisés par un identifiant, un nom, un prénom, un sexe et une date de naissance.

=== Questions

Réaliser le Diagramme de Classes de ce cas d’étude

//----------------------------------------------------- Correction -------------------------
ifdef::prof[] 

=== Correction

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution (orientée base de donnée)
====
image::voyageDC.png[alt="DIag de Classe",width="100%"]
====
[NOTE]
====
Pas besoin des +id...+ si l'implémentation de ce modèle est un programme écrit dans un langage orienté objet comme Java.
====

endif::prof[] 

//----------------------------------------------------- fin Correction -------------------------

== Tableau de service des Navigants AirFrance 

=== Enoncé

L’équipage d’un avion est toujours constitué d’un pilote, d’un copilote et de plusieurs personnels navigants et commerciaux (PNC). Chacune de ces personnes est identifiée par son nom et sa fonction. L’équipage d’un avion est reconstitué pour chacun de ses vols.

Chaque membre d’équipage doit être opérationnel sur deux catégories d’avions (par exemple, le PNC Richard est opérationnel sur Airbus A320 et Boeing 747). Chaque catégorie d’avions requiert un nombre de PNC dans son équipage oscillant entre un minimum et un maximum (par exemple, les PNC des Airbus A320 doivent être entre six et huit, et ceux d’un B747 entre 12 et 16)footnote:[Pour simplifier, le tableau ci-dessous n’en représente que quelques-uns.]. 

Voici ci-dessous un extrait du tableau de service de quelques employés de la compagnie AIR FRANCE.

image::airfrance.png[width=300,height=300]

L’objectif du système à modéliser est de constituer le tableau de service. Les membres de l’équipage peuvent visualiser les vols sur lesquels ils sont affectés. L’administrateur du système peut créer et supprimer des entités dans le système. Le manager peut ajouter et supprimer des personnes dans un équipage pour un vol donné (un vol est désigné par un numéro de vol et une date). Les données du vol sont archivées après le vol pour une annéefootnote:[En raison du temps limité, nous ignorons la tenue à jour de la localisation des équipages et le décompte de leurs temps de vol et de repos.].

=== Questions

. Faire la liste des classes et de leurs attributs (un tableau par exemple).
. Réaliser le diagramme de classe correspondant
//. Réalisez le SNI permettant de répondre aux attentes du système

//----------------------------------------------------- Correction -------------------------
ifdef::prof[] 
=== Correction

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
La correction (plus complète) se trouve ici : 

http://www-inf.it-sudparis.eu/COURS/CSC4002/EnLigne/EnoncesTP/ETP13-14/index.html
====
endif::prof[] 

//----------------------------------------------------- fin Correction -------------------------

