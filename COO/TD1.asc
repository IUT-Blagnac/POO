:moduleTitle: BCOO
:authorDefault:  Dut/Info-S2/M2104
// include::lib/globals.asc[] // temporairement
:tdnum: TD 1

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:
:source-highlighter: pygments
:numbered: true
:iconsdir: icons/
:icons: true

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1.  Je sais programmer, j'ai conscience qu'il faut réfléchir avant de se lancer dans le codage. J'ai des notions de structure de données.
2.	Je connais les concepts principaux du Diagramme de Classes : classe, attribut, attribut dérivé, identifiant, association, composition, multiplicité, classe-association.
3.	Je connais les conventions d’écriture du Diagramme de Classes
| {objtd}	| Comprendre ce qu'est un *modèle*.
| {duree}	| *1 ou 2 séance(s)* de 1,5h (selon le niveau initial en UML)
|======================

// // | {depot}	| -

== Rappel du cours

Dans le diagramme de classe suivant, repérez les différents éléments :

. +Classe+
. +nom de classe+
. +attribut+
. +association+
. +cardinalité+

image::dc1.png[width=200,height=200]

//----------------------------------------------------- Correction ------------
ifdef::prof[]
=== Correction
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::dc1-cor.png[alt="DIag de Classe",width=300,height=300]
====
endif::prof[]
//----------------------------------------------------- fin Correction --------

== Diagrammes de classes simples

Réalisez les diagrammes de classes suivants :

* Exams
** Les étudiants possèdent un numéro d'étudiant, un nom, un prénom, une date de naissance. Ils suivent des cours (titre, code du module).
** Les examens concernent un cours donné. Chaque examen a lien à une certaine date et possède un coefficient.
** Pour chaque examen un étudiant à une note.
** Les cours sont enseignés par un enseignant (nom, prénom)

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::exams.png[alt="DIag de Classe",width=400,height=400]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

* Ordinateurs portables
** Un portable possède un clavier
** Un clavier peut-être de type "azerty" ou "querty"
** Un clavier possède des touches
** Un portable a éventuellement un propriétaire qui a lui même un nom et un prénom
** Un portable a un prix d’achat et une valeur actuelle (souvent différente)

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::portable.png[alt="DIag de Classe",width=400,height=400]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

== Tour Opérator

=== Enoncé

Des Tour Operator (Fram, Jet-Tours, Nouvelles Frontières…) proposent des voyages. Chaque TO est caractérisé par un identifiant, un nom et une adresse.

Chaque voyage est rattaché à un seul TO et est défini par un identifiant, un libellé, un lieu de départ et de destination, une date de départ et d’arrivée ainsi qu’un prix de base.

Différentes options (chambre climatisée, pension complète, voyages en 1ère classe...) peuvent être choisies pour les différents voyages avec un montant différent selon celui-ci (par exemple l’option « Pension complète » coûtera plus cher pour un voyage à Paris que pour un voyage au Vietnam).

Des clients (identifiant, nom, prenom, adresse) passent des commandes pour des voyages, chaque commande ne concernant qu’un voyage. Une commande est définie par un numéro, une date et un état. A chaque commande est rattachée un certain nombre de voyageurs caractérisés par un identifiant, un nom, un prénom, un sexe et une date de naissance.

=== Questions

. Réaliser le Diagramme de Classes de ce cas d’étude
. Ajouter aux classes les méthodes qui permettront de réaliser les fonctionnalités attendues suivantes :

- Calculer le prix d'un +Voyage+
- Calculer le prix moyen d'un voyage pour un +Tour Operator+
- Afficher la liste des options d'un +Voyage+
- Afficher la liste des commandes en cours (à venir) d'un +Client+

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
=== Correction

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution 1 (orientée base de donnée)
====
image::voyageDC.png[alt="DIag de Classe",width="100%"]
====
[NOTE]
====
Pas besoin des +id...+ si l'implémentation de ce modèle est un programme écrit dans un langage orienté objet comme Java.
====

[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution 2 (avec méthodes)
====
image::voyageDC2.png[alt="DIag de Classe",width="100%"]
====
[NOTE]
====
IL y a plusieurs implémentations possibles. Celle-ci n'est qu'un exemple.
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

== Reverse Java -> UML

=== Enoncé

Soient les codes Java suivants :

[NOTE]
====
Les codes complets ont été générés automatiquement, ils sont donc très "verbeux"...
====

.Accident.java (version complète link:../examples/accidents/Accident.java[ici])
[source,java]
----
include::examples/accidents/AccidentEx.java[]
----

.AccidentType.java (version complète link:../examples/accidents/AccidentType.java[ici])
[source,java]
----
include::examples/accidents/AccidentTypeEx.java[]
----

.Employee.java (version complète link:../examples/accidents/Employee.java[ici])
[source,java]
----
include::examples/accidents/EmployeeEx.java[]
----

.SeriousnessLevel.java (version complète link:../examples/accidents/SeriousnessLevel.java[ici])
[source,java]
----
include::examples/accidents/SeriousnessLevelEx.java[]
----

=== Question

Réaliser le Diagramme de Classes correspondant (avec associations et méthodes)

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
=== Correction
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution (orientée base de donnée)
====
http://yuml.me/bec2f2a5
====

Cette solution a été générée à partir de l'exemple +Accidents+ de http://cruise.eecs.uottawa.ca/umpleonline/[UMPLE Online].

endif::prof[]
//----------------------------------------------------- fin Correction -------------------------
