ifdef::slides[:leveloffset: -1]

=== Différence entre modèle et dessins

{UML} n'est pas une palette de dessins et d'éléments de base servant à faire
des diagrammes. Il existe une représentation graphique des éléments modélisés en {UML}. 
Cette représentation graphique est celle à laquelle la plupart des étudiants s'attachent et
sur laquelle ils se concentrent : ils apprennent à "dessiner"!
Elle est importante car elle permet de communiquer visuellement sur le système en développement, 
mais du point de vue du concepteur, c'est *le modèle* qui importe le plus. 

C'est pourquoi nous vous recommandons de ne jamais "dessiner" des diagrammes {UML} footnote:[Sauf bien sûr au brouillon ou sur un tableau, notamment quand on travaille en équipe.], mais d'utiliser des outils dédiés (cf. <<Outils>>).
Ils respectent en général la norme {norme} (bien qu'il faille se méfier).

ifdef::slides[<<<]

// Merci à Raphaël Faudou pour cette partie

Un des intérêts de la modélisation est de faciliter la communication, notamment 
au travers des diagrammes et leur aspect graphique et synthétique. 
Un dessin est donc un plus par rapport à du texte. 

Néanmoins, il ne faut pas se
contenter d'un simple dessin pour au moins deux raisons importantes :

- un dessin n'est pas assez formel (comment être sûr d'avoir correctement utilisé tel ou tel symbole, cf. les exemples dans la suite) ;
- il est impossible d'assurer la cohérence globale des modèles dans le cas d'un dessin. 

ifdef::slides[<<<]

Un *modèle* est une sorte de base de donnée qui regroupe des éléments issues de différents points de vue (saisis le plus
souvent au travers de diagrammes). Un *diagramme* est une vue partielle du modèle (donc incomplète). 
Le modèle est la vraie plus value car il va permettre de détecter les incohérences sur les exigences, les problèmes de complétude, 
lancer des analyses, faire des transformations vers d'autres langages ou formats, etc.
Par exemple dans un outil de modélisation il y a une grande différence entre supprimer un élément d'un diagramme (on parlera
alors de "masquer" un élément d'un diagramme) et supprimer un élément de modèle (ce qui aura pour effet de supprimer cet élément de 
tous les diagrammes où il était présent). 

[NOTE]
====
La seule "entorse" à cette règle de l'utilisation d'outils de modélisation plutôt que 
d'outils de dessin que je m'autoriserai dans la suite concerne les diagrammes {uml} que
je génère dans ce document à l'aide de {plantumlweb} ou parfois de {yuml}. Les diagrammes étant générés, ils
respectent la notation de manière automatique.
====

Voici deux exemples de non respect de la notation qui illustre le type d'erreur que l'on trouve souvent dans les modèles qui circulent
sur Internet ou même parfois dans certains livres.

ifndef::slides[:leveloffset: 1]

include::uc.asc[]

include::dss.asc[]

=== Conclusion

Soyez donc d'autant plus prudent que vous n'utilisez pas d'outils dédiés.

NOTE: Pour une discussion intéressante sur les différences entre modéliser et dessiner, cf. http://modeling-languages.com/drawing-tools-vs-modeling-tools/.

ifndef::slides[:leveloffset: 0]

//---------------------------------------------------------------------------------
[[Outils]]
=== 	Outils UML
//---------------------------------------------------------------------------------

Il existe un certain nombre d'outils permettant de réaliser des modèles {UML}. Voici une liste non exhaustive :

include::outils.txt[]

ifndef::slides[]

Vous trouverez sur Internet des comparatifs et des avis à jour sur les outils.

Ce que je voudrai souligner ici c'est l'importance du modèle comme "dépôt" (je préfère le terme anglais de _repository_) d'éléments de base en relation les uns avec les autres. C'est toute la différence entre le dessin et le modèle.

[WARNING]
====
Attention toutefois à ne pas confondre ce que vous permet (ou pas) de faire l'outil et la notation elle-même. Les fabricants ont parfois pris des libertés ou bien n'ont pas complètement implémenté toutes les subtilités de la notation.
====
endif::slides[]

ifdef::slides[:leveloffset: 0]
