= *Modeling* Information: an introduction
J.-M. Bruel <jbruel@gmail.com>
V1.0, {localdate} - ITT Dublin, Ireland
:toc-title: Table of Content
:toc: left
:icons: font
:numbered:
:imagesdir: images
:source-highlight: asciidoctor

//------------------------------- definitions
include::definitions.txt[]
:courselink: http://bit.ly/jmb-dublin16

ifndef::slides[]
image:ITTDublin2016.jpg[]
endif::slides[]

//------------------------------- QRCode
ifdef::slides[]

== Follow this course on the Internet...

image::dublin2016.jpg[link="images/dublin2016.jpg",alt="{courselink}",width=40%]

.........
http://bit.ly/jmb-dublin16
.........

endif::slides[]

//=================================================
== icon:home[] About me and this course

ifdef::slides[:leveloffset: -1]

=== icon:user[] Who am I ?

- Professor
image:logo-iut.png[width=20%]
image:dublin-trip.png[width=20%]
- Head of the MACAO footnote:[Models, Aspects, Components, Architecture & Objects] team of the CNRS/IRIT Lab image:logo-irit.png[height=40,link="http://www.irit.fr/"]
- Teaching Undergraduate (IUT), M.Sc. (Master), Doctorate:
* {UML} / {sysmlfrance}
* {Java} / Object-Orientation / Design Patterns

=== icon:map-signs[] Topics

This course will consist in :

- <<Concepts>>
- <<Practice>>
- <<Outils>>

=== Time schedule

Monday::
- 9-11am room 212
- 13-15h room 215

TuesDAY::
- 9-11am room 212
- 13-15h room 221

ifdef::slides[]
NOTE: Yes, I know, only 2 days ! icon:smiley[]
endif::slides[]


ifdef::slides[:leveloffset: +1]

//=================================================
[[Concepts]]
== icon:graduation-cap[] Concepts and definitions

ifdef::slides[]
icon:map-signs[]

- Before starting
- Objects
- Properties
- Class
- Attributes
- Associations

endif::slides[]

ifdef::slides[:leveloffset: -1]

=== Before starting

ifndef::slides[.A class as a "record"]
[source,java]
----
public class Student {
	String name;
}
----

ifndef::slides[.A universal, graphical representation of a class]
[plantuml,Student,svg]
----
hide circle
hide empty members
hide empty methods

class Student {
	name
}
----

ifdef::slides[]

=== Discussions

image::tuxteacher.png[width=20%]

- Why a square and not a circle?
- What "data" have you manipulated so far?
- Any "record" ?
- Let's model some of them...

endif::slides[]

=== We need to agree on a notation

- => {UML}
- => Independant from coding language ({java}, `PHP`, ...)

=== Data vs Information

A data (e.g., `37.2`) is raw, it has no meaning until it becomes an information (e.g., "temperature in Celcius").

[quote]
A *variable* stores a *data* that represents an *information*.

=== Objects

.JSON example
[source,json]
----
{
  "jmb": {
    "location": "Toulouse",
    "name": "Jean-Michel Bruel",
    "country": "France"
  },
  "am": {
    "location": "Dublin",
    "name": "Andrew Donnellan",
    "country": "Ireland"
  }
}
----

=== Properties

In the previous example, each *object* has the same
*properties*:

- location
- name
- country

=== Class

ifndef::slides[.A class as abstraction of Objects]
[plantuml,People,svg]
----
hide circle
hide empty members
hide empty methods

class People {
	location
  name
  country
}
----

ifdef::slides[=== Class]

[WARNING]
====
A class is not a set of objects (hence no prurial on its name)!
====

=== Attributes

In the previous example, for the `People`  *class*, we have defined some *attributes*:

- location
- name
- country

NOTE: So far you should wonder why I used 2 different words for the same concepts: _properties_ and _attributes_, but we'll see why in a minute...

ifdef::slides[=== Attributs]

An *attribute* is a characteristic of an objet
(person's name, color of a car, average grade of a stydent...).

Each object is characterized by the set of values of its attributes.

=== Special kind of attribute : _Identifiers_

An *identifier* (or "Id") is an attribute that is unique for each object (e.g., social seciruty number).

[TIP]
====
We will make those attributes explicitely identifiers, by
preceeding their name with `id` (e.g., idStudent).
====

=== Conventions

You might have noticed that I used the same conventions for naming things (same as {java}):

- 1st letter of a class, always in Capital (e.g.,  `Student`, `People`)
- 1st letter of a properties, never in Capital (e.g.,    `name`,`dateOfBirth`)
- no plurial on class name

=== Back to object notation (in UML)

- In classical programming languages (such as C), we talk about `type` and `variable`.
- In object oriented programming (and hence in UML) we will talk about `class` and `object` (or also `instance`).

ifndef::slides[.UML representation of an object]
[plantuml,jmb,svg]
----
hide circle
hide empty members
hide empty methods

class "jmb : People" as jmb {
	location = "Toulouse"
  name = "Jean-Michel Bruel"
  country = "France"
}
----

ifdef::slides[]

=== Discussions

image::tuxteacher.png[width=20%]

Questions so far?

endif::slides[]

=== Associations

ifdef::slides[:leveloffset: -1]

==== Definition

Through *association* we are going to model links between objects.

Let's start with an example :

ifndef::slides[.Some objects we would like to link]
[plantuml,assoc1,svg]
----
hide circle
hide empty members
hide empty methods

class "jmb : People" as jmb {
	location = "Toulouse"
  name = "Jean-Michel Bruel"
  country = "France"
}

class "ad : People" as ad {
	location = "Dublin"
  name = "Andrew Donnellan"
  country = "Ireland"
}

class "team1 : Staff" as team1 {
  name = "Team Triathlon"
  kind = "Erasmus"
}
----

ifdef::slides[==== Definition]

ifndef::slides[.Some objects now linked]
[plantuml,assoc2,svg]
----
hide circle
hide empty members
hide empty methods

class "jmb : People" as jmb {
	location = "Toulouse"
  name = "Jean-Michel Bruel"
  country = "France"
}

class "ad : People" as ad {
	location = "Dublin"
  name = "Andrew Donnellan"
  country = "Ireland"
}

class "team1 : Staff" as team1 {
  name = "Team Triathlon"
  kind = "Erasmus"
}

team1 -- jmb
team1 -- ad
----

Advantage::
- Now we know they belong to the same team
- Now we know the content of the team

Problem::
- We cannot do that for all the objects!!

ifdef::slides[==== Definition]

ifndef::slides[.Links at the class level => associations]
[plantuml,assoc3,svg]
----
hide circle
hide empty members
hide empty methods

class People {
	location
  name
  country
}

class Staff {
  name
  kind
}

People - Staff
----

==== Dimension of an association

An association between two class is a *binary* association.

NOTE: We will see others (such as ternary associations) later.

.Example of binary association
image:prod-fourn.svg[width="50%"]

==== Name of an association

An association has a *name* (often a verb). It is not mandatory, but sometimes usefull to understand the links between objects.

ifndef::slides[.Links at the class level => associations]
[plantuml,assoc5,svg]
----
hide circle
hide empty members
hide empty methods

class Product

class Provider

Product "1..*" - "0..*" Provider : Provides
----

==== Multiplicity

It is important to visualize the number of objects on one side, in association with the objects on the other side.
Most of the time this number is not fixed, but is a range denoted `M..N`.

[WARNING]
====
On `M..N`, `M` must always be lower or equal to `N` (e.g., `3..10`).
====

ifndef::slides[.Links at the class level => associations]
[plantuml,assoc4,svg]
----
hide circle
hide empty members
hide empty methods

class People {
	location
  name
  country
}

class Staff {
  name
  kind
}

People "1..*" -- "0..*" Staff
----

ifdef::slides[==== Multiplicity]

Usual situations:

- `*` => multiple optional (meaning `0..*`).
- `1..*` => multiple mandatory
- `1` => mandatory (meaning `1..1`)

ifdef::slides[:leveloffset: +2]

//=================================================
[[Practice]]
== icon:graduation-cap[] Advanced concepts

icon:map-signs[]

- How association are "stored" ?
- Navigability
- Class-Association
- Ternary (and more) association
- Ownership
- Link with databases

ifdef::slides[:leveloffset: -1]

=== How association are "stored" ?

Let's have a look at some java code...

{umple}

=== Navigability

What are the differences between those two associations:

[plantuml,assoc6,svg]
----
hide circle
hide empty members
hide empty methods

People "1..*" <- "0..*" Staff : IsComposedOf
----

[plantuml,assoc7,svg]
----
hide circle
hide empty members
hide empty methods

People "1..*" -> "0..*" Staff : BelongsTo
----

Question: write the corresponding Java classes.

=== Class association

Some associations have properties!

Example: the price at which a product is proposed by a given provider.

[plantuml,assoc8,svg]
----
hide circle
hide empty members
hide empty methods

class Product {
  designation
  weight
}

class Provider {
  name
  address
}

Product "0..*" -- "0..*" Provider

(Product, Provider) . Selling

class Selling {
	price
}
----

=== Ternary (and more) association


=== Ownership

In lots of situations, we want an extra link between objects: a *life-time dependency*. One object (the _whole_) possess the other
(the _part_). This is called an *composition* and is represented
with a dedicated notation in {uml}:

[plantuml,assoc9,svg]
----
hide circle
hide empty members
hide empty methods

Car *-> "1" Engine
----

[NOTE]
====
- The "black diamond" is on the _whole_ side
- The multiplicity on the _whole_ side is always `1`
- It is often the case that this kind of association is a one-way association (from the _whole_ to the _parts_)
====

=== Link with databases

- Importance of the "Id"
-

ifdef::slides[:leveloffset: +1]

//=================================================
[[Practice]]
== icon:cogs[] Practice & exercices

ifdef::slides[:leveloffset: -1]

=== Easy class diagrams

==== Identify concepts

In the following class diagram, find those elements :

. +Class+
. +Class names+
. +attributes+
. +associations+
. +multiplicities+

image::dc1.png[width=200,height=200]

==== Class diagrams

Model the following situations through class diagrams:

. Laptops
* A laptop has a keyboard
* A keyboard has a type ("azerty" or "querty")
* A keyboard has some keys
* A laptop can have an owner, himself having a first and last name
* A laptop has a price (when bought) and a value (actual)
. Model the IP datagrams class and find some associations with other classes. Make sure to put names, multiplicities.
. Pick up your favorite domain and model the data as classes

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
====
. Laptop
+
image::portable.png[alt="DIag de Classe",width=400,height=400]
+
. IP
+
.Solution from mailto:dillonwaters@ymail.com[Dillon Waters]
image::IP.jpeg[width=100%]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------


=== Second level class diagrams

Model the following situations through class diagrams:

* Exams
** Students have a number, a name, a firstname, a date of birth. They follow some courses (title, code).
** The exams concern a given course. Each exam has a date and coef.
** For each exam a student has a grade.
** Course are taugt by professors (name, firstname)

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
====
image::exams.png[alt="DIag de Classe",width=400,height=400]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== Other exercices

==== Reverse Engineering

Considering the following Java codes:

.Accident.java
[source,java]
----
include::examples/accidents/AccidentEx.java[]
----

.AccidentType.java
[source,java]
----
include::examples/accidents/AccidentTypeEx.java[]
----

.Employee.java
[source,java]
----
include::examples/accidents/EmployeeEx.java[]
----

.SeriousnessLevel.java
[source,java]
----
include::examples/accidents/SeriousnessLevelEx.java[]
----

Make the corresponding class diagram.

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
=== Correction
[icon="solution.png"]
[IMPORTANT]
.Solution (DataBase oriented)
====
http://yuml.me/bec2f2a5
====

This exercice was inspired by the `Accidents` example in http://cruise.eecs.uottawa.ca/umpleonline/[UMPLE Online].

endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

==== Air France

When not in strike, the crue of an AF flight is composed of  a pilote, a copilote and several personnels, called PNC. Each of these persons are identified by his/her name and function. A crue on a plane is different for each flight.

Each crue member has to be acredited on two categories of planes (e.g.,) Richard is operational on Airbus A320 & Boeing 747). Each plane category requires a certain number of PNC (a minimum & a maximum).

Here is an example of flight planning:

image::airfranceplanning.png[width=300,height=300]

Realize the class diagram that represents those data.

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
=== Correction

.Solution
[CAUTION]
====
image::airfrance.png[width=100%]

The full correction is here (sorry for the French):
http://www-inf.it-sudparis.eu/COURS/CSC4002/EnLigne/EnoncesTP/ETP13-14/index.html
====
endif::prof[]

//----------------------------------------------------- fin Correction -------------------------

ifdef::slides[:leveloffset: +1]

//=================================================
[[Outils]]
== icon:wrench[] Tools

{plantuml}::
You like to draw? You prefer programming?

{papyrus}::
Wanna try professional environment?

//=================================================
[[models]]
== Modeling is not (just) drawing

- With a modeling tool => respect of the notation
- Global vision and links between elements


ifndef::slides[:leveloffset: 1]


:numbered!:
== About...

****************************************************************
Material by mailto:{email}[{author}] via  {asciidoctorlink} (v.`{asciidoctor-version}`) from 'Dan Allen'.
'Licence Creative Commons'.
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternity].
image:88x31.png["Licence Creative Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
****************************************************************
