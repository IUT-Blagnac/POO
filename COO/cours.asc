= Titre
:Author: Jean-Michel Bruel 
:Author Initials: JMB
:Email: jean-michel.bruel@univ-tlse2.fr
:doctitle: DUT-Info/S2/M2104 (COO) : Support de cours
:lang: fr
:slideshowlocation: Your computer
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169; 
:incremental!:
:source-highlighter: pygments
:numbered:
:toc:
:toc-placement: manual
:dessins: dessins

//----------- définitions --------------
:asciidoc: link:http://www.methods.co.nz/asciidoc[AsciiDoc]
:sitecours: http://webetud.iut-blagnac.fr/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:eclipse: link:http://www.eclipse.org/[eclipse]
:eclipseversion: Kepler 4.3.1
:M2103: http://webetud.iut-blagnac.fr/xxx[M2103]
:M2105: http://webetud.iut-blagnac.fr/xxx[M2105]
:java: http://java.com/fr/[Java]
// personnes et institutions
:ap: mailto:andre.peninou@univ-tlse2.fr[André Peninou]
:irit: http://www.irit.fr[IRIT]
:iut: link:http://www.iut-blagnac.fr[IUT de Blagnac]
:iutcalais: link:http://iutcalais.univ-littoral.fr/[IUT de Calais]
:jmb: mailto:jean-michel.bruel@univ-tlse2.fr[Jean-Michel Bruel]
:jmimail: jean-michel.inglebert@univ-tlse2.fr
:jmi: mailto:{jmimail}[Jean-Michel Inglebert]
:nico: mailto:belloir@univ-pau.fr[Nicolas Belloir]
:nonne: mailto:laurent.nonne@univ-tlse2.fr[Laurent Nonne]
:prfc: Pascal Roques
:univ-tlse: link:http://www.univ-toulouse.fr[Univesité de Toulouse]
:uppa: Université de Pau et des Pays de l'Adour
// raccourcis sites
:acsi: link:http://jmbhome.heroku.com/teaching/ACSI/acsi.html[ACSI]
:aadl: link:http://www.aadl.info/[AADL]indexterm:[AADL]
:artisan: link:http://www.artisansw.com/[Artisan]
:cdo: http://www.eclipse.org/cdo/[CDO]
:deckjsite: http://houqp.github.io/asciidoc-deckjs/[deckjs]
:doors: http://www-03.ibm.com/software/products/fr/fr/ratidoor/[DOORS(TM)]
:ea: link:http://www.sparxsystems.com.au/products/mdg/tech/sysml/index.html[Enterprise Architect]
:eclipse: link:http://www.eclipse.org[eclipse]indexterm:[eclipse]
:gemoc: http://gemoc.org/[GEMOC]
:grafcet: http://fr.wikipedia.org/wiki/Grafcet[Grafcet]
:magicDraw: http://www.nomagic.com/[MagicDraw]
:marte: http://www.omgmarte.org/[MARTE]indexterm:[MARTE]
:modelica: https://www.modelica.org/[Modelica(R)]
:modelio: http://www.modeliosoft.com/[Modelio]
:models: http://www.modelsconference.org/[MODELS]
:moodle: http://webetud.iut-blagnac.fr[Moodle]
:norme: http://www.omg.org/spec/UML/2.4.1/[OMG UML v2.4.1]
:omg: link:http://www.omg.org[OMG(TM)]indexterm:[OMG]
:lomg: http://www.omg.org[l'OMG(TM)]indexterm:[OMG]
:OSLC: link:http://open-services.net/[OSCL]
:pandoc: http://johnmacfarlane.net/pandoc/[Pandoc]
:papyrus: http://www.eclipse.org/papyrus/[Papyrus]
:plantumlweb: http://plantuml.sourceforge.net/[plantUML]
:rapportPotier: http://www.industrie.gouv.fr/logiciel-embarque/Rapport-BGLE-final.pdf[Rapport Potier]
:rcp: http://wiki.eclipse.org/index.php/Rich_Client_Platform[RCP]
:remodd: http://www.cs.colostate.edu/remodd/v1/[ReMoDD]
:rhapsody: http://www-142.ibm.com/software/products/us/en/ratirhap[Rhapsody]indexterm:[Rhapsody]
:rtaw: http://www.realtimeatwork.com/[RTaW]indexterm:[RTaW]
:sart: http://fr.wikipedia.org/wiki/Structured_Analysis_for_Real_Time[SADT/SART]
:semco: http://www.semcomdt.org/[SEMCO]
:slidy2: http://www.w3.org/Talks/Tools/Slidy2/[W3C HTML Slidy]
:sosym: http://www.sosym.org/[SoSyM]
:sym: http://www.omg.org/spec/SyM/[SysML-Modelica]
:sysml: http://www.omgsysml.org/[SysML(TM)]indexterm:[SysML]
:sysmlfrance: http://www.sysml-france.fr[SysML-France]
:sysmltrends: http://www.google.fr/trends/explore#q=sysml[SysML Trends]
:topcased: http://www.topcased.org[TOPCASED]indexterm:[Topcased]
:uml: link:http://www.uml.org/[UML(TM)]indexterm:[UML(TM)]
:umlspec: link:http://www.omg.org/spec/UML/2.4.1/Infrastructure/PDF/[UML 2.4.2 Specifictation]
:vle: http://www.vle-project.org/wiki/Main_Page[VLE]
:visualparadigm: http://www.visual-paradigm.com/[Visual Paradigm]
:xtext: http://www.eclipse.org/Xtext/[Xtext]
:yuml: http://yuml.me/[yuml]
// data
:flux: Flux
:traitements: Traitements
:donnees: Données
:conceptuel: Conceptuel
:organisationel: Organisationel				
:logique: Logique
:technique: Technique
:resume: En résumé
:revisions: Questions de révision

ifndef::slides[]

//-------------------- Warning si correction -----------
ifdef::prof[]
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

:numbered:

== Plan

toc::[]

endif::slides[]

ifdef::slides[]
:numbered!:

== Plan

1. Avant-propos
2. Organisation et généralités
3. La notation UML
4. Modèles, Diagrammes et outils
5. Modéliser les données
6. Diagramme des UC
7. Diagramme Séquence Système
8. Compléments Diag. Classe
9. Schéma Navigationnel d’Interface
10. Diagramme Séquence et Java
11. Conception de tests
12. MVC

endif::slides[]

include::preambule.asc[]

== Organisation et généralités

Ce support de cours sert deux publiques :

- les étudiants de l'{iut} à qui il est destiné en priorité
- les étudiants de l'{iutcalais} qui suivent à distance ce module!

Comme déjà indiqué, ce module est fortement corrélé aux modules de programmation ({M2103}) et d'IHM ({M2105}).

Il est prévu pour 10h de cours, complété par 15h de TD et 20h de TP.
Il va porter principalement sur {UML}, un langage universel de modélisation très utilisé en entreprise.

include::UML.txt[]

== Modèles, Diagrammes et outils

include::modeles.asc[]

[[DC]]
== Modéliser les données

Le diagramme de classe {uml} permet principalement de modéliser les données qui seront
manipulées par le système en développement, que ce soit les données de la future base
de donnée (par exemple si l'on s'oriente vers une solution du type +PHP+/+MySQL+)
ou bien des objets manipulés dans le futur programme Java (par exemple).

===  Données et variables

Commençons par un parallèle avec les données manipulées en programmation :

.Information vs. donnée
....
Une donnée (e.g., 37.2) est brute, elle n'a de signification que lorsqu'elle devient une information
(e.g., "température en degré Celcius").
....

Nous souhaitons donc dépasser la notion de *variable* vu en programmation au premier semestre
pour passer à la notion de *donnée* (qui sera utilisée pour véhiculer une *information*).

ifdef::slides[<<<]

=== En Merise

Pour ceux qui ont étudié la méthode Merise, elle permet de modéliser, en plus des {flux} et des {traitements}, les {donnees}.
Mais les modèles de données de Merise ont été remplacés dans la pratique par ceux proposés par {uml}.

[align="center",cols="h,^2,^2,^2",options="header",width="20%"]
|======================
|					| {flux} 	| {traitements}	| [red  yellow-background]*{donnees}*
| {conceptuel}		|			|  				| MCD
| {organisationel}	|			|        		| 				
| {logique} 		|			|        		| MLD				
| {technique}		|			|        		| MTD				
|======================

include::DC.txt[]


[[UC]]
== Diagramme des Cas d'Utilisation

Le *Diagramme des Cas d'Utilisation* est un modèle UML permettant de représenter :

- les *UC* (_Use Case_ ou Cas d’Utilisation)
- les *acteurs* (principaux et secondaires)
- les *relations* entre acteurs et UC

[NOTE]
=====================================================================
On notera simplement +UC+ pour signifier "diagramme des UC"
=====================================================================

ifdef::slides[:leveloffset: -1]

=== Définition et concepts

ifdef::slides[]
- Cas d'utilisation (UC)
- Acteur
- Relations entre UC

:leveloffset: -2

endif::slides[]

==== Cas d'Utilisation

[[uc]]
Un cas d'utilisation (_Use Case_ ou UC en abrégé) représente un ensemble de *scénarios* que le système doit exécuter pour produire un résultat observable par un <<acteur,*acteur*>>.

ifdef::slides[:leveloffset: -3]

===== Exemple d'UC

Retrait par carte bancaire

*Scénario principal*::
	L'UC démarre lorsque le Guichet Automatique Bancaire (GAB) demande au client son numéro confidentiel après l’introduction de sa CB. Le client 
	entre son code et valide son entrée. Le GAB contrôle la validité du code. Si le code est valide, le GAB autorise 
	le retrait et l’UC se termine.
*Scénario alternatif n°1 *::
	Le client peut à tout instant annuler l'opération. La carte est éjectée et l'UC se termine.
*Exemple de codification de l'UC*:: 
	UC01 ou RetraitCB (pour Retrait par carte bleue)

===== Précisions

Un cas d'utilisation peut être précisé par : 

- une description textuelle
- un ou des diagrammes UML (séquence, activité)

[NOTE]
=====================================================================
Dans les outils, cette "précision" se manifeste par le fait que l'on "attache"
généralement un diagramme de séquence à un cas d'utilisation (clic droit sur un UC -> nouveau +seq+).
=====================================================================

ifdef::slides[:leveloffset: -2]

==== Acteur

[[acteur]]
Un acteur peut être une personne, un ensemble de personnes, un logiciel, un processus qui interagit avec un ou plusieurs <<uc,UC>>.

On peut trouver plusieurs types d'acteurs :

* extérieurs au système (cf. +actor+ <<ucdiag,Diagramme d'UC ci-après>>)
** les acteurs principaux (= acteurs internes du MOT de Merise)
** les acteurs secondaires (= acteurs externes du MOT de Merise)
** les administrateurs (ils gèrent le système : données, sécurité, droits d'accès, utilisateurs...)
* types d'acteurs prédéfinis dans UML :
** +\<<metaclass>>+
** +\<<utility>>+
** +\<<process>>+
** +\<<thread>>+
** +\<<powertype>>+

==== Relations entre UC 

Extension (+\<<extend>>+)::
	Indique que l’UC source est *éventuellement* exécutée en complément de l’UC destination (cas particulier, erreur...)
Inclusion (+\<<include>>+)::
	Indique qu’un UC est inclus *obligatoirement* dans un autre UC (notion de sous-programme par exemple)
Généralisation::
	Relation entre un UC général et un autre plus spécialisé qui hérite de ses caractéristiques et en rajoute

ifdef::slides[<<<]

[[ucdiag]]
.Notation dans le diagramme d'UC
image::{dessins}/UC.png["Diagramme d'UC"]

[TIP]
=====================================================================
On n'utilise généralement +\<<include>>+ que dans le cas où le sous-cas d'utilisation est
inclut dans plusieurs UC. Si ce n'est pas le cas, il est généralement englobé dans l'UC.
=====================================================================

ifdef::slides[:leveloffset: -1]

=== Pour construire un UC (de manière générale)

. identifier les acteurs
. identifier les cas d'utilisation
. structurer en _packages_
. ajouter les relations
. finaliser les diagrammes de cas d'utilisation

La suite logique est de décrire chaque UC par un diagramme de séquence système (cf. section suivante).

=== Exemples complets

ifdef::slides[:leveloffset: -2]

==== Service comptable

[[ucexp]]
.Exemple de diagramme d'UC
image::UC.png["Exemple de Diagramme d'UC",width="80%"]

==== Gestion des notes

[[ucexp2]]
.Autre exemple de diagramme d'UC
image::uc2.png["Exemple de Diagramme d'UC",width="70%"]

==== Liens entre SNI et UC

.Lien entre UC et SNI
image::uc-sni.png["Lien entre UC et SNI",width="70%"]

ifdef::slides[:leveloffset: 0]

== Opérations, Paquetages et Java

ifdef::slides[:leveloffset: -1]

=== Opérations

Un ensemble d'opérations définit le comportement de l’objet (ex : +setVitesse(valeur)+), 
c’est à dire son interface.

[[classeVoit]]
.Exemple de classe avec opération
image::voiture.png["Exemple de classe avec opération",width="20%"] 

[[classeVoit]]
.Opération et objet
image::{dessins}/encapsulation.png["Opérations et objet",width="40%"]

=== Opérations et Visibilité

L'*encapsulation* ::

* facilite l'évolution d'une application car elle stabilise l'utilisation des objets. On peut modifier l'implémentation des attributs d'un objet sans modifier son interface
* garantit l'intégrité des données, car elle permet d'interdire l'accès direct aux attributs des objets (utilisation d’_accesseurs_). Un objet n’est manipulable qu’à travers son interface

[TIP]
=====================================================================
Rappel : chaque opération a un argument implicite qui est l’objet sur lequel elle porte. +
+Int getKilometrage( );+ 

Exemple : +varKm = v2.getKilometrage( );+
=====================================================================

ifdef::slides[<<<]

Type d’opérations ::

Un accesseur +getX()+ permet de consulter l’attribut +X+ de l’objet, le modificateur +setX(val)+ permet de modifier la valeur de l’attribut +X+ avec le paramètre +val+. Par défaut, on doit avoir un accesseur par attribut privé.

Visibilité ::
Il existe 4 niveaux de visibilité des attributs et des opérations :

- +-+ *privé* (l’élément n’est visible que par la classe)
- +++ *public* (l’élément est visible par toutes les autres classes)
- +#+ *protégé* (l’élément est visible par la classe et ses sous-classes) 
- +~+ *package* (l’élément est visible par la classe et les classes du même paquetage)

=== Paquetages

[[paq]]
Les paquetages permettent de regrouper les éléments de modélisation. Ils peuvent contenir d’autres sous-paquetages sans limites de niveaux.

Le paquetage est un espace de *nommage*.

Un paquetage peut importer une classe issue d’un autre paquetage.

Exemple : +Vehicules::Voitures+ signifie que la classe +Voiture+ est importée du paquetage +Vehicules+.

[[pack]]
.Dépendances entre packages
image::{dessins}/pack.png["Dépendances entre packages",width="70%"]

[NOTE]
=====================================================================
On emploiera souvent dans ce cours le terme anglais de _package_ pour désigner un paquetage.
=====================================================================

=== Génération de code

Voici quelques exemples de diagramme de classes et du code java associé.

ifdef::slides[:leveloffset: -2]

==== Classe

[[catalogue]]
.La classe +Catalogue+ du package +Catalogue+
image::catalogue.png["Une classe",width="40%"]

[source,java]
-------------------------------------------
package Catalogue;
import java.util.Date;

public class Catalogue {
	private String nom;
	private Date dateCreation;
	
	public Catalogue() {
		...
	}
	
	public Livre chercherLivre(String isbn) {
		...
	}
}
-------------------------------------------

==== Généralisation

[[personne]]
.La classe +Adherent+ hérite de +Personne+
image::personne.png["Généralisation",width="40%"]

[source,java]
-------------------------------------------
public abstract class Personne {
	private String nom;
	private String prenom;
	protected Date dateNaissance;
	private static int ageMajorite = 18;
	public abstract int calculerDureePret() {... } 
	public static void setAgeMajorite (int aMaj) {... }
}

public class Adherent extends Personne { 
	private int iD;
	
	public Adherent() { ... }
	public int getAge() { ... }
	public int calculerDureePret() { ... } 
}
-------------------------------------------

==== Associations

[[Association]]
.Associations
image::association.png["Associations",width="40%"]

[source,java]
-------------------------------------------
public class A1 { 
	private B1 leB1;
}
public class A2 { 
	private B2 lesB2[ ];
}
public class A3 {
	private List lesB3 = new ArrayList();
}
-------------------------------------------

==== Dépendance

[[dependance]]
.Dépendance
image::dependances.png["Dépendance",width="40%"]

[source,java]
-------------------------------------------
package Bibliotheque; 
import Catalogue;

public class Bibliotheque {
	private Catalogue leCatalogue; 
	...
}
-------------------------------------------

==== Equivalences entre diagramme de classes

[[Equivalences]]
.Equivalences
image::equiv.png["Equivalences",width="70%"]

==== Classe Association

[[assoc]]
.Classe Association
image::assoc.png["Classe Association",width="50%"]

[source,java]
-------------------------------------------
public class Emploi {
	private String titre
	private Double salaire; 
	private Employe salarie; 
	private Societe employeur; 
	...
}
-------------------------------------------

ifdef::slides[:leveloffset: 0]

== Le Diagramme de Séquence

ifdef::slides[:leveloffset: -1]

=== Généralités

* Modélise les interactions entre objets
* Séquencement dans le temps
* Échange de messages
* Spécifie les scénarios des cas d'études
* Éléments :
** participants
** lignes de vie
** barres d'activation
** messages

ifdef::slides[<<<]

[[seq]]
.Diagramme de séquence
image:seq1.png["Diagramme de séquence",width="40%"]
image:seq2.png["Eléments de notation",width="40%"]

[WARNING]
=====================================================================
Les lignes de vie représentent des objets et non des classes
=====================================================================


=== Exemple

[[seqexp]]
.Exemple de diagramme de séquence
image::seq3.png["Exemple de diagramme de séquence",width="60%"]

=== Notions avancées

* Instructions itératives et conditionnelles
* Mieux vaut utiliser un diagramme d'activité
* Cadres d'interaction
** +loop+ (boucle)
** +alt+ (alternative)
** +opt+ (optionel)
** +par+ (parallèle)
** +region+ (région critique - un seul thread à la fois)

ifdef::slides[<<<]

[[fowler]]
.Exemple algorithme / diagramme
image:fowl1.png["Un algorithme",width="30%"]
image:fowl2.png["Sa modélisation",width="60%"]

=== Exemple de conceptions

[[fowler1]]
.Conception "centralisée"
image::fowl3.png["Conception 'centralisée'",width="60%"]

ifdef::slides[<<<]

[[fowler2]]
.Conception "objet"
image::fowl4.png["Conception 'objet'",width="60%"]

=== Diagramme de séquence système

Bien que non présent dans UML, il est courant de trouver un diagramme de séquence particulier, le
*diagramme de séquence système* ou *DSS*, où on ne représente qu'un seul objet : le système en cours de développement lui-même.

[[exp1-dss]]
.Un exemple de DSS
image::dssexp1.png["Exemple de DSS",width="40%"]

=== Lien entre UC, DSS et DS

La décomposition hiérarchique permet de réaliser une description "_TOP-DOWN_" du système à réaliser.

On fait un Diagramme de Séquence Système pour chaque UC (issu du Diagramme d’UC) pour déterminer les échanges d’informations entre l’acteur et le système.

Ensuite on fait un Diagramme de Séquence (DS) pour décrire comment les objets composants le système (issus du Diagramme de Classes) collaborent pour réaliser le traitement demandé.

ifdef::slides[<<<]

[[exp1-uc]]
.Diagramme d'UC
image::ucexp1.png["Diagramme d'UC",width="30%"]

ifdef::slides[<<<]

[[exp1-dss]]
.Le DSS correspondant
image::dssexp1.png["Le DSS correspondant",width="30%"]

ifdef::slides[<<<]

[[exp1-ds]]
.Le DS correspondant
image::dsexp1.png["Le DS correspondant",width="70%"]

ifdef::slides[:leveloffset: 0]

== Compléments Diag. Classe

Bientôt...

== Schéma Navigationnel d'Interface

[NOTE]
====
Sera sûrement vu en {M2105} (IHM) plutôt.
====

== Diagramme Séquence et Java

Bientôt...

== Conception de tests

Cette partie vise à préparer les étudiants à écrire du +JUnit+ pour le {M2103}.

== MVC

Pour anticiper le Semestre prochain, où ce paradigme sera la règle...

:numbered!:
[[refs]]
== Liens utiles

- Le site officiel d'{UML}: http://www.uml.org/
- Un site très bien fait sur {UML} : http://www.uml-sysml.org/

== A propos de ce document...

**********************************************************************
Document généré par mailto:{email}[{author}] via {asciidoc} (version +8.6.8+) de 'Stuart Rackham'.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'. 
image:{iconsdir}/88x31.png["Licence Creative 
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
**********************************************************************



